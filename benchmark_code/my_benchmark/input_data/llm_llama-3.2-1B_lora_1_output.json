[
  {
    "id": 1,
    "input": "Translate Python to Go:import random\nfrom typing import List, Callable, Optional\n\n\ndef modifier(x: float) -> float:\n    \n    return 2*(.5 - x) if x < 0.5 else 2*(x - .5)\n\n\ndef modified_random_distribution(modifier: Callable[[float], float],\n                                 n: int) -> List[float]:\n    \n    d: List[float] = []\n    while len(d) < n:\n        r1 = prob = random.random()\n        if random.random() < modifier(prob):\n            d.append(r1)\n    return d\n\n\nif __name__ == '__main__':\n    from collections import Counter\n\n    data = modified_random_distribution(modifier, 50_000)\n    bins = 15\n    counts = Counter(d // (1 / bins) for d in data)\n    \n    mx = max(counts.values())\n    print(\"   BIN, COUNTS, DELTA: HISTOGRAM\\n\")\n    last: Optional[float] = None\n    for b, count in sorted(counts.items()):\n        delta = 'N/A' if last is None else str(count - last)\n        print(f\"  {b / bins:5.2f},  {count:4},  {delta:>4}: \"\n              f\"{'\n        last = count\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\nfunc main() {\n\tlist := []int{1, 3, 6, 9, 11, 18}\n\trand.Seed(int(time.Now().UnixNano()))\n\tvar sum, mod uint64; bestCount, h, e = 0, list[0], 0;\n\tfor i := 0;i < 10000;i++ {\n\t\tmod = uint64(rand.Intn(10))\n\t\t\n\t\tsum += list[rand.Intn(len(list))]\n\t\t\n\t\t\n\t\tif mod + sum!= 45 {\n\t\t\ti -= 1\n\t\t\tcontinue \n\t\t}\n\n\t\t\n\t\te += 1 \n\n\t\t\n\t\th = rand.Uint64()%uint32(list[len(list)-1])\n\t\t\n\n\t\tif h > sum {\n\t\t\tbestCount++\n\t\t\t\n\t\t\tfmt.Printf(\"%d \", list[h])\n\n\t\t\t\n\t\t\t\n\t\t\tif bestCount >= 3 {\n\t\t\t\th = rand.Uint64()%uint32(list[len(list)-1])  \n\t\t\t\t\n\t\t\t\tbreak\n\t\t\t}\t\n\t\t}\n\t}\n\tfmt.Println(\"\\nfound\", bestCount, \"out of\", 10000)\n\tfmt.Printf(\"\\nThe unique numbers are:\\n %v\\n\", fmt.Split(list[:bestCount], \"\\n\"))\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 2,
    "input": "Translate Python to C#:from sympy import sieve\n\nprimelist = list(sieve.primerange(2,1000000))\n\nlistlen = len(primelist)\n\n\n\npindex = 1\nold_diff = -1\ncurr_list=[primelist[0]]\nlongest_list=[]\n\nwhile pindex < listlen:\n\n    diff = primelist[pindex] - primelist[pindex-1]\n    if diff > old_diff:\n        curr_list.append(primelist[pindex])\n        if len(curr_list) > len(longest_list):\n            longest_list = curr_list\n    else:\n        curr_list = [primelist[pindex-1],primelist[pindex]]\n        \n    old_diff = diff\n    pindex += 1\n    \nprint(longest_list)\n\n\n\npindex = 1\nold_diff = -1\ncurr_list=[primelist[0]]\nlongest_list=[]\n\nwhile pindex < listlen:\n\n    diff = primelist[pindex] - primelist[pindex-1]\n    if diff < old_diff:\n        curr_list.append(primelist[pindex])\n        if len(curr_list) > len(longest_list):\n            longest_list = curr_list\n    else:\n        curr_list = [primelist[pindex-1],primelist[pindex]]\n        \n    old_diff = diff\n    pindex += 1\n    \nprint(longest_list)\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nusing System.Collections.Generic;\n\nnamespace RosettaCode {\n    class Program {\n        static void Main(string[] args) {\n            int maxPrimeCount = Convert.ToInt32(Console.ReadLine());\n            \n                Console.WriteLine(\"First {0} prime numbers:\",maxPrimeCount);\n                \n                List<int> primes = new List<int>();\n                bool hasOtherSol = false;\n                do {\n                    int nextPrime = 0;\n                    foreach (int e in primes) {\n                        if (nextPrime % e == 0) {\n                            nextPrime++;\n                            continue;\n                        }\n                        \n                    }\n\n                    \n                    primes.Add(nextPrime);\n\n                    IEnumerable<int> divisors =\n                        Enumerable.Range(1, nextPrime / 2).Where(n => n!= 0 && n * n <= nextPrime)\n                       .Select(i => i + nextPrime);\n                    \n                    \n                    var setOfPrimes = from x in primes where!divisors.Contains(x) select x;\n                    foreach (var item in setOfPrimes) {\n                        primes.Remove(item);\n                            \n                    }\n                    if(primes.Count() >= maxPrimeCount){\n                        break;\n                    } \n                } while(true);  \n            \n            \n            Console.WriteLine(\"\\n\\nThe last {0} prime numbers are:\\n\",primes.Count());\n\n            foreach(var number in primes.Reverse()) {\n                Console.Write(\"{0}\\t{1}\",number.ToString(),\"\\t\"+(primes.IndexOf(number)+1));\n            }\n            \n\n        }\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 3,
    "input": "Translate Java to Python:import java.math.BigInteger;\nimport java.util.*;\n\npublic class Lychrel {\n\n    static Map<BigInteger, Tuple> cache = new HashMap<>();\n\n    static class Tuple {\n        final Boolean flag;\n        final BigInteger bi;\n\n        Tuple(boolean f, BigInteger b) {\n            flag = f;\n            bi = b;\n        }\n    }\n\n    static BigInteger rev(BigInteger bi) {\n        String s = new StringBuilder(bi.toString()).reverse().toString();\n        return new BigInteger(s);\n    }\n\n    static Tuple lychrel(BigInteger n) {\n        Tuple res;\n        if ((res = cache.get(n)) != null)\n            return res;\n\n        BigInteger r = rev(n);\n        res = new Tuple(true, n);\n        List<BigInteger> seen = new ArrayList<>();\n\n        for (int i = 0; i < 500; i++) {\n            n = n.add(r);\n            r = rev(n);\n\n            if (n.equals(r)) {\n                res = new Tuple(false, BigInteger.ZERO);\n                break;\n            }\n\n            if (cache.containsKey(n)) {\n                res = cache.get(n);\n                break;\n            }\n\n            seen.add(n);\n        }\n\n        for (BigInteger bi : seen)\n            cache.put(bi, res);\n\n        return res;\n    }\n\n    public static void main(String[] args) {\n\n        List<BigInteger> seeds = new ArrayList<>();\n        List<BigInteger> related = new ArrayList<>();\n        List<BigInteger> palin = new ArrayList<>();\n\n        for (int i = 1; i <= 10_000; i++) {\n            BigInteger n = BigInteger.valueOf(i);\n\n            Tuple t = lychrel(n);\n\n            if (!t.flag)\n                continue;\n\n            if (n.equals(t.bi))\n                seeds.add(t.bi);\n            else\n                related.add(t.bi);\n\n            if (n.equals(t.bi))\n                palin.add(t.bi);\n        }\n\n        System.out.printf(\"%d Lychrel seeds: %s%n\", seeds.size(), seeds);\n        System.out.printf(\"%d Lychrel related%n\", related.size());\n        System.out.printf(\"%d Lychrel palindromes: %s%n\", palin.size(), palin);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from __future__ import print_function\n\ndef is_palindrome(s):\n    \n    return s == s[::-1]\n\nif __name__ == '__main__':\n    starts = [str(i) for i in range(8)]\n    ends = ['palindrome', 'non-palindrome']\n    for start, end in zip(starts, ends):\n        tests = [s for s in [[x] + list(xs) + [x] for x in starts]\n                  if is_palindrome(x) and is_palindrome(''.join(xs))\n          ]\n        print('{0}: {2}.'.format(end,''.join(tests), '' if len(tests) > 1\n                                  than sum(len(str(int)(x)), 0) == 2));\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 4,
    "input": "Translate C++ to Python:#ifndef MYWIDGET_H\n#define MYWIDGET_H\n#include <QWidget>\n\nclass QPaintEvent ;\n\nclass MyWidget : public QWidget {\npublic :\n   MyWidget( ) ;\n\nprotected :\n   void paintEvent( QPaintEvent * ) ;\nprivate :\n   int width ;\n   int height ;\n   const int colornumber ;\n} ;\n#endif\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import Tkinter\n  \n  w = Tkinter.Tk()\n  w.mainloop()\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 5,
    "input": "Translate C to Go:#include <stdbool.h>\n#include <stdio.h>\n\nbool is_prime(int n) {\n    int i = 5;\n\n    if (n < 2) {\n        return false;\n    }\n\n    if (n % 2 == 0) {\n        return n == 2;\n    }\n    if (n % 3 == 0) {\n        return n == 3;\n    }\n\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return false;\n        }\n        i += 2;\n\n        if (n % i == 0) {\n            return false;\n        }\n        i += 4;\n    }\n\n    return true;\n}\n\nint main() {\n    const int start = 1;\n    const int stop = 1000;\n\n    int sum = 0;\n    int count = 0;\n    int sc = 0;\n    int p;\n\n    for (p = start; p < stop; p++) {\n        if (is_prime(p)) {\n            count++;\n            sum += p;\n            if (is_prime(sum)) {\n                printf(\"The sum of %3d primes in [2, %3d] is %5d which is also prime\\n\", count, p, sum);\n                sc++;\n            }\n        }\n    }\n    printf(\"There are %d summerized primes in [%d, %d)\\n\", sc, start, stop);\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc sieve(limit uint64) []bool {\n    c := make([]bool, limit)\n    c[0] = true\n    c[1] = true\n    \n    var maxPrime = uint64(9*7*11)\n\n    \n    for p := uint64(19;;) {\n        if p > maxPrime {\n            break\n        }\n        \n        m := p / 3 \n        if!c[p] && m >= 10 {  \n            for i := p + m; i < limit; i += m {\n                c[i] = true\n            }   \n        }\n        \n        \n        e := p - 2     \n        if!c[p+e] {      \n            for i := p + e; i < limit; i += e {\n                c[i] = true\n            }\n        }\n        \n        \n        \n        o := p * p       \n        if!c[m*p]     {\n            for i := p * 2; i < limit; i += m*p {\n                c[i] = true\n            }\n        }\n        \n\n        f := p * 3         \n        if!c[e+p]      {\n            for i := e + p; i < limit; i += f {\n                c[i] = true\n            }\n        }\n        g := p * 5         \n        \n        h := p * 7          \n        if!c[f+p+h]     {\n            for i := p * 6; i < limit; i += h {\n                c[i] = true\n            }\n        }\n    }\n    fmt.Println(c, \"\\tlimit:\", limit)\n    return c\n} \n\nvar testCases = [][]uint64{\n\t{20000000},\n\t{50000000},\n\t{60000000},\n\t{70000000},\n\t{80000000},\n\t{90000000},\n\t{95000000},\n\t{100000000},\n\n\t\n\t{1500000000}, \n\t\n\t3000000000,\n}\n\n\nfor _, tc := range testCases {\n    sieve(tc.limit)\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 6,
    "input": "Translate PHP to Java:<?php\necho substr_count(\"the three truths\", \"th\"), PHP_EOL; // prints \"3\"\necho substr_count(\"ababababab\", \"abab\"), PHP_EOL; // prints \"2\"\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "public static boolean containsSamePigteens(String s1, String s2) {\n    int count = 0;\n    for (char c : s1.toCharArray()) {\n        if (c >= '0' && c <= '9')\n            if (Math.abs(Integer.parseInt(new StringBuilder(c).toString())) \n                    == Integer.parseInt(s2))\n                count++;\n    }\n    return count == Integer.parseInt(s2);\n}\n",
    "input_language": "PHP",
    "output_language": "Java"
  },
  {
    "id": 7,
    "input": "Translate PHP to Python:$stack = array();\n\nempty( $stack ); // true\n\narray_push( $stack, 1 ); // or $stack[] = 1;\narray_push( $stack, 2 ); // or $stack[] = 2;\n\nempty( $stack ); // false\n\necho array_pop( $stack ); // outputs \"2\"\necho array_pop( $stack ); // outputs \"1\"\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def popcount(n):\n    if n < 0:\n        raise NotImplementedError(\"Pop count of negative numbers is not implemented\")\n    r = (n%3)*3 - ((n&1)<<1)\n    while abs(r) > 0: \n        r //= 3\n    return abs(r)\n\nprint \"%d %s %d\" % (\n   popcount(1), 'works', popcount(-1))\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 8,
    "input": "Translate Python to Go:\nfrom __future__ import division\nimport sys\n\nfrom PIL import Image\n\n\ndef _fpart(x):\n    return x - int(x)\n\ndef _rfpart(x):\n    return 1 - _fpart(x)\n\ndef putpixel(img, xy, color, alpha=1):\n    \n    compose_color = lambda bg, fg: int(round(alpha * fg + (1-alpha) * bg))\n    c = compose_color(img.getpixel(xy), color)\n    img.putpixel(xy, c)\n\ndef draw_line(img, p1, p2, color):\n    \n    x1, y1 = p1\n    x2, y2 = p2\n    dx, dy = x2-x1, y2-y1\n    steep = abs(dx) < abs(dy)\n    p = lambda px, py: ((px,py), (py,px))[steep]\n\n    if steep:\n        x1, y1, x2, y2, dx, dy = y1, x1, y2, x2, dy, dx\n    if x2 < x1:\n        x1, x2, y1, y2 = x2, x1, y2, y1\n\n    grad = dy/dx\n    intery = y1 + _rfpart(x1) * grad\n    def draw_endpoint(pt):\n        x, y = pt\n        xend = round(x)\n        yend = y + grad * (xend - x)\n        xgap = _rfpart(x + 0.5)\n        px, py = int(xend), int(yend)\n        putpixel(img, p(px, py), color, _rfpart(yend) * xgap)\n        putpixel(img, p(px, py+1), color, _fpart(yend) * xgap)\n        return px\n\n    xstart = draw_endpoint(p(*p1)) + 1\n    xend = draw_endpoint(p(*p2))\n\n    for x in range(xstart, xend):\n        y = int(intery)\n        putpixel(img, p(x, y), color, _rfpart(intery))\n        putpixel(img, p(x, y+1), color, _fpart(intery))\n        intery += grad\n\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print 'usage: python xiaolinwu.py [output-file]'\n        sys.exit(-1)\n\n    blue = (0, 0, 255)\n    yellow = (255, 255, 0)\n    img = Image.new(\"RGB\", (500,500), blue)\n    for a in range(10, 431, 60):\n        draw_line(img, (10, 10), (490, a), yellow)\n        draw_line(img, (10, 10), (a, 490), yellow)\n    draw_line(img, (10, 10), (490, 490), yellow)\n    filename = sys.argv[1]\n    img.save(filename)\n    print 'image saved to', filename\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gonum/color\"\n)\n\nvar (\n\tbgColor = color.RGBA{128, 0, 0, 255} \n\tfgColor  = color.RGBA{0, 255, 0, 255}\n\talpha   = 64\n)\n\nfunc init() {\n\tflag.Bool('b', false, \"set background colour\")\n}\n\nconst (\n\tbkgFile = \".ppm\"\n\twidth   = 256\n\theight  = 256\n)\n\ntype bmp struct {\n\tfile string\n\tsize uint32\n}\n\nfunc newBmp(file string) (*bmp, error) {\n\tif file == \"\" { return nil, fmt.Errorf(\"no image name\") }\n\timg := &bmp{\n\t\tfile,\n\t\tuint32(len(color.RGBAA(color.White))) << 3 | 8,\n\t}\n\terr := readPpmImg(img.file)\n\tif err!= nil { log.Fatal(err) }\n\treturn img, nil\n}\n\nfunc (img *bmp) savePPM(path string) error {\n\tf, err := os.Create(path)\n\tif err!= nil { return err }}\n\tdefer func() {\n\t\terr = f.Close()\n\t\tif err!= nil { log.Fatal(err)}\n\t}()\n\tcolor.WriteP6(f, img.bgColor.ToRGBA(), img.size/2, img.size/2)\n\tgreen, _, _ := color.ParseRgba(color.White)\n\twriteP6(f, green.ToRGBA(), img.size/2, img.size/2)\n\twriteP6(f, bgColor.ToRGBA(), img.size/2, img.size/2)\n\treturn nil\n}\n\n\nfunc writeP6(fp *os.File, clr color.Color, w, h int) error {\n\tfor i := 0; ; i++ {\n\t\tfp.WriteByte(clr.Red>>4|clr.Green<<6|clr.Blue)<<24 >> (w*w*3/4)||\n\t\t\t(w*h)*16\n\t\tif i > 7 { break }\n\t\tw++\n\t\th++\n\t}\n\treturn nil\n}\n\n\n\nfunc readPpmImg(ip *bmp) error {\n\tvar fp *os.File\n\tip.file, err = fopenPM(ppmBgColStr(ip),\n\t\t\"(rb\"), color.PPMFormat, width, height)\n\tif err!= nil { return err }}\n\t\n\tr, e := ioutil.ReadAll(ip.file)\n\tif e!= nil { return e }}\n\n\tconst ppmbgcolstr =\n\t\t\"[P6] 15 P /Background Color Index 65535\\n\" +\n\t\t\"P 20 s Filename W # H Resolution Lenght Count Bytes \\n\\n\"\n\n\tfmt.Printf(\"%s%s%o\\n\", color.PPMHeader, ppmbgcolstr, alpha)\n\tfor i := 0; i <= 10000-i; i++ {\n\t\tclr := color.NewRGBA(uint(i&alpha)/255, uint((i+1)&alpha)/255,\n\t\t\tuint(((i+101)&alpha)+127)/255)\n\t\tip.writeP6(&fmt.Fprint, clr.ToRGBA(), w, h)\n\t\tip.savePPM(fmt.Sprintf(\"%s%d.ppm\", bkgFile, i))\n\t}\n\tfmt.Println()\n\n\treturn nil\n}\n\nfunc ppmBgColStr(bgClr color.Color) string {\n\tswitch t := bgClr.(type) { case byte: return color.Hex(t) } \n\treturn fmt.Sprintf(\"%d %s %s %s\",\n\t\ttourHexSize(t>>6&0xF), color.Name(t&0xFF), color.Name(\n\t\t\tt>>(18&0xFF)), color.Name(t>>12&0xFF))\n}\n\nfunc tourHexSize(n uint8) uint8 {\n\tif n >= 30 && n<= 36 || n>=126 && n<=134 {return 22}}\n\treturn uint8(n>>4 & 0xf)\n}\n\n\n\n\nfunc main() {\n\tlog.Fatal(flag.ParseFlagValues(os.Args)))\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 9,
    "input": "Translate C to Go:#include <sys/types.h>\n#include <regex.h>\n#include <stdio.h>\n\ntypedef struct {\n\tconst char *s;\n\tint len, prec, assoc;\n} str_tok_t;\n\ntypedef struct {\n\tconst char * str;\n\tint assoc, prec;\n\tregex_t re;\n} pat_t;\n\nenum assoc { A_NONE, A_L, A_R };\npat_t pat_eos = {\"\", A_NONE, 0};\n\npat_t pat_ops[] = {\n\t{\"^\\\\)\",\tA_NONE, -1},\n\t{\"^\\\\*\\\\*\",\tA_R, 3},\n\t{\"^\\\\^\",\tA_R, 3},\n\t{\"^\\\\*\",\tA_L, 2},\n\t{\"^/\",\t\tA_L, 2},\n\t{\"^\\\\+\",\tA_L, 1},\n\t{\"^-\",\t\tA_L, 1},\n\t{0}\n};\n\npat_t pat_arg[] = {\n\t{\"^[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?\"},\n\t{\"^[a-zA-Z_][a-zA-Z_0-9]*\"},\n\t{\"^\\\\(\", A_L, -1},\n\t{0}\n};\n\nstr_tok_t stack[256]; \nstr_tok_t queue[256];\nint l_queue, l_stack;\n#define qpush(x) queue[l_queue++] = x\n#define spush(x) stack[l_stack++] = x\n#define spop()   stack[--l_stack]\n\nvoid display(const char *s)\n{\n\tint i;\n\tprintf(\"\\033[1;1H\\033[JText | %s\", s);\n\tprintf(\"\\nStack| \");\n\tfor (i = 0; i < l_stack; i++)\n\t\tprintf(\"%.*s \", stack[i].len, stack[i].s); \n\tprintf(\"\\nQueue| \");\n\tfor (i = 0; i < l_queue; i++)\n\t\tprintf(\"%.*s \", queue[i].len, queue[i].s);\n\tputs(\"\\n\\n<press enter>\");\n\tgetchar();\n}\n\nint prec_booster;\n\n#define fail(s1, s2) {fprintf(stderr, \"[Error %s] %s\\n\", s1, s2); return 0;}\n\nint init(void)\n{\n\tint i;\n\tpat_t *p;\n\n\tfor (i = 0, p = pat_ops; p[i].str; i++)\n\t\tif (regcomp(&(p[i].re), p[i].str, REG_NEWLINE|REG_EXTENDED))\n\t\t\tfail(\"comp\", p[i].str);\n\n\tfor (i = 0, p = pat_arg; p[i].str; i++)\n\t\tif (regcomp(&(p[i].re), p[i].str, REG_NEWLINE|REG_EXTENDED))\n\t\t\tfail(\"comp\", p[i].str);\n\n\treturn 1;\n}\n\npat_t* match(const char *s, pat_t *p, str_tok_t * t, const char **e)\n{\n\tint i;\n\tregmatch_t m;\n\n\twhile (*s == ' ') s++;\n\t*e = s;\n\n\tif (!*s) return &pat_eos;\n\n\tfor (i = 0; p[i].str; i++) {\n\t\tif (regexec(&(p[i].re), s, 1, &m, REG_NOTEOL))\n\t\t\tcontinue;\n\t\tt->s = s;\n\t\t*e = s + (t->len = m.rm_eo - m.rm_so);\n\t\treturn p + i;\n\t}\n\treturn 0;\n}\n\nint parse(const char *s) {\n\tpat_t *p;\n\tstr_tok_t *t, tok;\n\n\tprec_booster = l_queue = l_stack = 0;\n\tdisplay(s);\n\twhile (*s) {\n\t\tp = match(s, pat_arg, &tok, &s);\n\t\tif (!p || p == &pat_eos) fail(\"parse arg\", s);\n\n\t\t\n\t\tif (p->prec == -1) {\n\t\t\tprec_booster += 100;\n\t\t\tcontinue;\n\t\t}\n\t\tqpush(tok);\n\t\tdisplay(s);\n\nre_op:\t\tp = match(s, pat_ops, &tok, &s);\n\t\tif (!p) fail(\"parse op\", s);\n\n\t\ttok.assoc = p->assoc;\n\t\ttok.prec = p->prec;\n\n\t\tif (p->prec > 0)\n\t\t\ttok.prec = p->prec + prec_booster;\n\t\telse if (p->prec == -1) {\n\t\t\tif (prec_booster < 100)\n\t\t\t\tfail(\"unmatched )\", s);\n\t\t\ttok.prec = prec_booster;\n\t\t}\n\n\t\twhile (l_stack) {\n\t\t\tt = stack + l_stack - 1;\n\t\t\tif (!(t->prec == tok.prec && t->assoc == A_L)\n\t\t\t\t\t&& t->prec <= tok.prec)\n\t\t\t\tbreak;\n\t\t\tqpush(spop());\n\t\t\tdisplay(s);\n\t\t}\n\n\t\tif (p->prec == -1) {\n\t\t\tprec_booster -= 100;\n\t\t\tgoto re_op;\n\t\t}\n\n\t\tif (!p->prec) {\n\t\t\tdisplay(s);\n\t\t\tif (prec_booster)\n\t\t\t\tfail(\"unmatched (\", s);\n\t\t\treturn 1;\n\t\t}\n\n\t\tspush(tok);\n\t\tdisplay(s);\n\t}\n\n\tif (p->prec > 0)\n\t\tfail(\"unexpected eol\", s);\n\n\treturn 1;\n}\n\nint main()\n{\n\tint i;\n\tconst char *tests[] = { \n\t\t\"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\",\t\n\t\t\"123\",\t\t\t\t\t\n\t\t\"3+4 * 2 / ( 1 - 5 ) ^ 2 ^ 3.14\",\t\n\t\t\"(((((((1+2+3**(4 + 5))))))\",\t\t\n\t\t\"a^(b + c/d * .1e5)!\",\t\t\t\n\t\t\"(1**2)**3\",\t\t\t\t\n\t\t\"2 + 2 *\",\t\t\t\t\n\t\t0\n\t};\n\n\tif (!init()) return 1;\n\tfor (i = 0; tests[i]; i++) {\n\t\tprintf(\"Testing string `%s'   <enter>\\n\", tests[i]);\n\t\tgetchar();\n\n\t\tprintf(\"string `%s': %s\\n\\n\", tests[i],\n\t\t\tparse(tests[i]) ? \"Ok\" : \"Error\");\n\t}\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n)\n\ntype rule interface {\n    ruleset() []rule\n    applyTo(string) ([]byte)\n}\n\n\nfunc newRuleSet(ops...rule) [][10]int {\n    \n    var r set\n    \n    \n    \n    \n    \n    \n    for _, o := range ops {\n        switch d, ok := o.(default); {\n        case d!= nil:\n            r.push(d.ruleset())\n        case d.ruleset().length == 0:\n            \n            fmt.Println(\"no default defined for:\", o)\n        }\n    }\n\n    \n    for a, b := range r {\n        \n        switch d, ok := a.(set).ruleset()[6][:7],!ok {\n        case true:\n            \n            \n            continue\n        case false:\n        \n        \n        \n        \n        \n        r[a](8)\n        }\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        switch d, ok := b.(set).ruleset()[6][:7],!ok {\n        case true:\n            \n            \n            continue\n        case false:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        r[b](7)\n        }\n    }\n    return r\n}\n\n\n\nvar nOps = [...]struct{ name, value interface{}}{\n    {\"add\", \"+\"},\n    {\"sub\", \"-\"},\n    {\"mul\", \"*\"},\n    {\"div\", \"/\"},\n    {\"mod\", \"%\"},\n    {\"pow\", \"^\"},\n}\n\n\n\n\nconst testStr =\n    `test:\\n    {{\\n      $ss \\n    }},{{\\n      $ss \\n    }}\\n    {{\\n      $ss \\n    }},{{\\n          $sn,\\n         $ss \\n    }}\\n    {{\\n          $sn,\\n         $ss \\n    }},{{\\n              $nv,$sn,\\n             $ss \\n        }},{{\\n                  $nv,$sn,\\n                 $ss \\n                },{{\\n                    $nnv,$sn,\\n                    $ss \\n                }},{{\\n                        $nv,$sn,$ss \\n                    }},{{\\n                            $nv,$sn,$ss \\n                       },{{\\n                                $nnv,$sn,$ss \\n                               },{{\\n                                    $name.$value \\n                                   }\\n                              }},{{\\n                                        $nnv,$sn,$ss \\n                                       },{{\\n                                            $name.$value,$nnv,$sn,$ss \\n                                          }\\n                             }},{{\\n                                                $nnv,$sn,$ss \\n                         },{{\\n                                                    $name.name,$nnv,$sn,$ss \\n                                                  }\\n                           }},{{\\n                                 $nnv,$sn,$ss \\n                      },{{\\n                          $name.name,$nnv,$sn,$ss \\n                         },{{\\n                              $name.value,$nnv,$sn,$ss \\n                            }\\n                       }},{{\\n                                  $nnv,$sn,$ss \\n                   },{{\\n                    \t    $name.name,$nnv,$sn,$ss \\n                    },{{\\n                        $name.value,$nnv,$sn,$ss \\n                            }\\n                       }},{{\\n                                             $nnv,$sn,$ss \\n               },{{\\n                    \t     $name.name,$nnv,$sn,$ss \\n                },{{\\n                    $name.value,$nnv,$sn,$ss \\n                    }\\n               }},{{\\n                                         $nnv,$sn,$ss \\n           },{{\\n                  \t   $name.name,$nnv,$sn,$ss \\n            },{{\\n                       $name.value,$nnv,$sn,$ss \\n                 }\\n          }]}}}}}}}`\n\n\nfunc (r set) push(xs [][]interface{}) {\n    for _, xy := range xs {\n        r.append(xy...)\n    }\n}\n\nfunc (r set) append(xx []interface{}) {\n    k := len(r)\n    v := make([]interface{}, len(xx))\n\n    \n\n    copy(v[:k*k], r[k-k:])\n\n    for i, y := range xx {\n        switch d, ok := y.(set).append(i+k),!ok {\n        case true:\n            \n            \n            continue\n        case false:\n        \n        \n        \n        \n        r[r.append(y).(set)].insert(k++)\n\n        }\n    }\n}\n\nfunc (r set) insert(ix int) {\n    ix %= len(r)\n    r[ix].append(r[ix])\n}\n\nfunc (c set) concat(ss [[10]bool]) bool {\n    for _, rc := range ss {\n        if!rc && len(c) >= 0 {\n            return false\n        }\n    }\n    for _, cx := range c {\n        if cx == nil {\n            return false\n        }\n        for j, ic := range c {\n            if ic[j] == cx {\n                c[j] = cx\n                break\n            }\n        }\n    }\n    return true\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 10,
    "input": "Translate C to C++:#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define TRUE 1\n#define FALSE 0\n\ntypedef int bool;\n\nchar grid[8][8];\n\nvoid placeKings() {\n    int r1, r2, c1, c2;\n    for (;;) {\n        r1 = rand() % 8;\n        c1 = rand() % 8;\n        r2 = rand() % 8;\n        c2 = rand() % 8;\n        if (r1 != r2 && abs(r1 - r2) > 1 && abs(c1 - c2) > 1) {\n            grid[r1][c1] = 'K';\n            grid[r2][c2] = 'k';\n            return;\n        }\n    }\n}\n\nvoid placePieces(const char *pieces, bool isPawn) {\n    int n, r, c;\n    int numToPlace = rand() % strlen(pieces);\n    for (n = 0; n < numToPlace; ++n) {\n        do {\n            r = rand() % 8;\n            c = rand() % 8;\n        }\n        while (grid[r][c] != 0 || (isPawn && (r == 7 || r == 0)));\n        grid[r][c] = pieces[n];\n    }\n}\n\nvoid toFen() {\n    char fen[80], ch;\n    int r, c, countEmpty = 0, index = 0;\n    for (r = 0; r < 8; ++r) {\n        for (c = 0; c < 8; ++c) {\n            ch = grid[r][c];\n            printf(\"%2c \", ch == 0 ? '.' : ch);\n            if (ch == 0) {\n                countEmpty++;\n            }\n            else {\n                if (countEmpty > 0) {\n                    fen[index++] = countEmpty + 48;\n                    countEmpty = 0;               \n                }\n                fen[index++] = ch;\n            }\n        }\n        if (countEmpty > 0) {\n            fen[index++] = countEmpty + 48;\n            countEmpty = 0;\n        }\n        fen[index++]= '/';\n        printf(\"\\n\");\n    }\n    strcpy(fen + index, \" w - - 0 1\");\n    printf(\"%s\\n\", fen);\n}\n\nchar *createFen() {\n    placeKings();\n    placePieces(\"PPPPPPPP\", TRUE);\n    placePieces(\"pppppppp\", TRUE);\n    placePieces(\"RNBQBNR\", FALSE);\n    placePieces(\"rnbqbnr\", FALSE);\n    toFen();\n}\n\nint main() {\n    srand(time(NULL));\n    createFen();\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include <iostream>\nusing namespace std;\n\nconst string pows[]={\"\",\"I\",\"V\",\"X\",\"L\",\"C\",\"D\",\"M\"};\nconst string nums[]= {\"\",\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"};\n\nclass myException extends exception{\npublic:\n    const string what;\n    \n    myException(string s):what{s}\n    virtual void catchMe(){\n        \n        throw this;\n    }\n};\n\nclass King\n{\npublic:\n    King(int rank,int file,string side){\n        _rank=rank;\n        _file=file;\n        _side=side;\n    }\n\n    int rank(){return _rank;}\n    int file(){return _file;}\n    string side(){return _side;}\n\nprivate:\n\n    int _rank,_file,_side;\n};\n\nclass Pawns\n{\npublic:\n    Pawns():_move(0),_step(white){};\n    int move white{};\n    int step=true;\n    friend class King;\n    friend ostream& operator<<(ostream&,King&);\n    enum {black=false, white=true };\nprotected :\n    static King king;\n    static Pawns pawns;\n};\n\n\nclass Queen:public Pawns{\n\npublic:\n    explicit Q(bool first)\n      :Pawns(first),\n       _move(3),\n       _step(true){}\n    int move black{first?2:1};\n    int step true;\n};\n\n\n\nclass Rooks\n{\npublic:\n    Rooks(){}\n    inline bool sameSideAs(Pawn pawn)\n    {\n        switch(pawn.rank())\n        {\n            case 7:return false;\n            default:true;\n        } \n    }\n    inline bool oppositeColorAs(Pawn pawn)\n    {\n        switch(pawn.color())\n        {\n            case queen::black:false,\n                 rook::white,true:\n                return true;\n            case queen::white:true,\n                 rook::black,false:\n                return false;\n        }\n         return false;\n    }\n    inline bool inBounds(Coordinate pos)\n    {\n        return ((pos.y()<6)&&(pos.x<4)||(pos.y>=6)&&(pos.x!=4));  \n    }\n    Coordinate findCoordinate(int rank,int x,int y,bool* found={nullptr})\n    {\n        Coordinate pos(rank*x+y,*found==NULL?true:false);\n        return pos;\n    }\n    Coordinate nextCoOrdinate(Coordinate lastPos)\n    {\n        switch(lastPos.rank()){\n            case 7:return coordinate(0,lastPos.x+1,lastPos.y+3);\n            case 6:return coordinate(1,lastPos.x+1,lastPos.y+2);\n            case 5:return coordinate(2,lastPos.x+1,lastPos.y+1);\n            case 4:return coordinate(3,lastPos.x+1,lastPos.y);\n            case 3:return coordinate(4,lastPos.x+1,lastPos.y-1);\n            case 2:return coordinate(5,lastPos.x+1,lastPos.y-2);\n            case 1:return coordinate(6,lastPos.x+1,lastPos.y-3);\n            case 0:return coordinate(7,lastPos.x+1,lastPos.y-4);\n        }\n    }\n    Coordinate rotate(Row row,Coordinate pos)\n    {\n        Coordinate new_pos(pos.row,row.posOfRight,pos.pos+row.step);\n        return new_pos;\n    }\n    Coordinate turn(Row row,Coordinate pos)\n    {\n        Coordinate new_pos(pos.row,(pos.pos+(new_pos.pos-row).abs())%8,new_pos.step);\n        return new_pos;\n    }\n    bool validMove(Coordinate startRow,Coordinate startColumn,Coordinate endRow,Coordinate endColumn)\n    {\n        Coordinate test_start(startRow,startColumn,endRow,endColumn);\n        if(!test_move_in_bounds(test_start)) return false;\n        else if((startRow-startRow)==(-1||endRow-startRow==-1||(endRow-startRow)!=1&&test_step(endColumn-test_start.startColumn))) return false;\n        else return true;\n    }\n    Coordinate moveInbounds(Coordinate position)\n    {\n        Coordinate result=(coordinate(position.rank(),position.column()+1,(position.rank()%8)+1)%8);\n        return result;\n    }\n    Coordinate move_outbounds(Coordinate position)\n    {\n        Coordinate result=((coordinate(position.rank()-1,(position.column()+1)-1)%8)+(position.rank()%8)+1);\n        return result;\n    }\n    Coordinate move_white(Coordinate startRank,Coordinate startFile,Coordinate endRank,Coordinate endFile)\n    {\n        Coordinate start_position(coordinate(startRank, startFile,0),(startRank*-1)*(endFile+1)-(startFile*(endRank+=1)),false);\n        Coordinate final_position(coordinate(startRank, startFile, endRank-(endRank-=1)),(startRank*(-1))*(endFile+1)-1,true);       \n        return validateMove(start_position,final_position)?rotate(turn(row(start_rank),start_file)(start_row),start_position):(turn(row(start_rank),start_file",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 11,
    "input": "Translate C to Go:#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define TRUE 1\n#define FALSE 0\n#define TRILLION 1000000000000\n\ntypedef unsigned char bool;\ntypedef unsigned long long uint64;\n\nvoid sieve(uint64 limit, uint64 *primes, uint64 *length) {\n    uint64 i, count, p, p2;\n    bool *c = calloc(limit + 1, sizeof(bool));  \n    primes[0] = 2;\n    count  = 1;\n    \n    p = 3;\n    for (;;) {\n        p2 = p * p;\n        if (p2 > limit) break;\n        for (i = p2; i <= limit; i += 2 * p) c[i] = TRUE;\n        for (;;) {\n            p += 2;\n            if (!c[p]) break;\n        }\n    }\n    for (i = 3; i <= limit; i += 2) {\n        if (!c[i]) primes[count++] = i;\n    }\n    *length = count;\n    free(c);\n}\n\nvoid squareFree(uint64 from, uint64 to, uint64 *results, uint64 *len) {    \n    uint64 i, j, p, p2, np, count = 0, limit = (uint64)sqrt((double)to);\n    uint64 *primes = malloc((limit + 1) * sizeof(uint64));\n    bool add;\n    sieve(limit, primes, &np);\n    for (i = from; i <= to; ++i) {\n        add = TRUE;\n        for (j = 0; j < np; ++j) {\n            p = primes[j];\n            p2 = p * p;\n            if (p2 > i) break;\n            if (i % p2 == 0) {\n                add = FALSE;\n                break;\n            }\n        }\n        if (add) results[count++] = i;\n    }\n    *len = count;\n    free(primes);\n}\n\nint main() {\n    uint64 i, *sf, len;\n    \n    sf = malloc(1000000 * sizeof(uint64));\n    printf(\"Square-free integers from 1 to 145:\\n\");\n    squareFree(1, 145, sf, &len);\n    for (i = 0; i < len; ++i) {\n        if (i > 0 && i % 20 == 0) {\n            printf(\"\\n\");\n        }\n        printf(\"%4lld\", sf[i]);\n    }\n\n    printf(\"\\n\\nSquare-free integers from %ld to %ld:\\n\", TRILLION, TRILLION + 145);\n    squareFree(TRILLION, TRILLION + 145, sf, &len);\n    for (i = 0; i < len; ++i) {\n        if (i > 0 && i % 5 == 0) {\n            printf(\"\\n\");\n        }\n        printf(\"%14lld\", sf[i]);\n    }\n\n    printf(\"\\n\\nNumber of square-free integers:\\n\");\n    int a[5] = {100, 1000, 10000, 100000, 1000000};\n    for (i = 0; i < 5; ++i) {\n        squareFree(1, a[i], sf, &len);\n        printf(\"  from %d to %d = %lld\\n\", 1, a[i], len);\n    }\n    free(sf);\n    return 0;   \n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPrime(n int) bool {\n\tif n < 0 {\n\t\tn = -n\n\t}\n\treturn true\n}\n\n\nvar d Primes\n\ntype Primes []bool \n\nfunc newPrimes(maxNum int) []*Primes {\n\td = make([]bool, maxNum+1)\n\tfor prime := 2; ; {\n\t\t\n\t\tprime++\n\t\tfor i := prime*prime; i < maxNum; i += prime {\n\t\t\td[i] = true \n\t\t} \n\t\t\n\t\tfor!d[prime] &&\n\t\t\t\ti := prime * prime; i < maxNum; i += prime {\n\t\t\t\n\t\t\tj := i / prime\n\t\t\tif j >= prime-1 {\n\t\t\t\tj--\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tif!(i%prime) || i%=(prime*(prime-1)/2)) {\n\t\t\t\t\n\t\t\t\tk := i / (prime * (prime - 1))\n\t\t\t\tif k >= prime-1 {\n\t\t\t\t\tk--\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif j!= k {\n\t\t\t\t\t\n\t\t\t\t\tj -= prime\n\t\t\t\t\tk -= prime\n\t\t\t\t\tif j+k >= prime ||\n\t\t\t\t\t\t\ti == j*k{\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tq := i +\n\t\t\t\t\t\t\t\t\t(int)(float64(j)*(-prime/2 -\n\t\t\t\t\t\t\t\t\t\t(float64(k))/2+\n\t\t\t\t\t\t\t\t\t\tfloat64(i/(prime*(prime-1)))))+\n\t\t\t\t\t\t\t\t\t10\n\t\t\t\t\t\t\tif q<6&&q>0{\n\t\t\t\t\t\t\t\treturn append(d[:prime],\n\t\t\t\t\t\t\t\t\tappend(\n\t\t\t\t\t\t\t\t\t\td,\n\t\t\t\t\t\t\t\t\t\tmakePrimes(q-prime,q-q)))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}else{\t\n\t\t\t\t\tj =\n\t\t\t\t\t\t(int)(\n\t\t\t\t\t\t\t(float64(i)+prime)*(float64(i)-1.0)/2.)\n\t\t\t\t\t\t\n\t\t\t\t\t\tif j>=prime-\n\t\t\t\t\t\t\t(int)((float64(i))*prime){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tj=prime-j\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tq :=\n\t\t\t\t\t\ti /\n\t\t\t\t\t\t(prime *\n\t\t\t\t\t\t\t(int)(((float64(j))*(float64(j))-float64(k))+float64(premeire)));\n\t\t\t\t\t\n\t\t\t\t\tif q<=6&&q>0{\n\n\t\t\t\t\t\tr := float64(q)*q*q\n\t\t\t\t\t\tif r==q||r==q+7||\n\t\t\t\t\t\t\tq ==\n\t\t\t\t\t\t\tint(r/q)+6{\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tif q==\n\t\t\t\t\t\t\tint(r/q)+6{\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tif q<(prime+1)*8{\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\td[prime]=true\n\t\td.append(true)\n\t\tfmt.Printf(\"%d \", prime)\n\t\td.prune()\n\t}\n\treturn d\n}\n\n\n\nfunc prune(a Primes) {\n\tvar prunedPrimes []*Primes\n\t\n\tfor _, e := range a {\n\t\tif!e {\n\t\t\tcontinue\n\t\t}\n\t\tp := (*a)[e]\n\t\tif len(*p)==1 {\n\t\t\tprunedPrimes = append(prunedPrimes,p...)\n\t\t}\n\t}\n\ta = append(prunedPrimes,a...) \n\t\n}\n\n\n\n\nconst (\n\tmaxNum   = 200000\n\tminLen   = 15\n\tmaxLen   = 30\n\tfrac      =.05\n)\n\n\nfunc showOne(f func([]*Primes), num int) {\n\tsf := fmt.Sprintf(\"%s: \", minLen*num)\n\tb := f(num)\n\tif b[len(b):]==[]{} {\n\t\tb = nil\n\t}\n\tfmt.Println(sf + string(b))\n\n}\n\n\n\n\n\nfunc main(){\n\tshowOne(newPrimes,maxNum)\n\tshowOne(prune,newPrimes,maxNum)\n\tshowOne(makePrimes(),maxNum)\n\tshowOne(makePrimes(minLen,maxLen,minLen,maxLen),maxNum)\n}\n\nfunction makePrimes(N int) []*Primes {\n\n\t\n\t\n\t\n\t\n\t\n\tvar res []*Primes\n\tresLength := 0\n\t\n\tfor i := N;resLength<N;i++ ){\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tisPrime := false\n\t\t\n\t\tfor j := 2*i; j < N;j+=i*i}{\n\t\t\tisPrime = true\n\t\t}\n\t\n\t\t\n\t\tif!isPrime {\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\n\t\tresLength++\n\n\t\t\n\t\tres = append(res,nil)\n\t}\n\treturn res\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 12,
    "input": "Translate C to VB:#include <stdio.h>\n\nvoid divisor_count_and_sum(unsigned int n, unsigned int* pcount,\n                           unsigned int* psum) {\n    unsigned int divisor_count = 1;\n    unsigned int divisor_sum = 1;\n    unsigned int power = 2;\n    for (; (n & 1) == 0; power <<= 1, n >>= 1) {\n        ++divisor_count;\n        divisor_sum += power;\n    }\n    for (unsigned int p = 3; p * p <= n; p += 2) {\n        unsigned int count = 1, sum = 1;\n        for (power = p; n % p == 0; power *= p, n /= p) {\n            ++count;\n            sum += power;\n        }\n        divisor_count *= count;\n        divisor_sum *= sum;\n    }\n    if (n > 1) {\n        divisor_count *= 2;\n        divisor_sum *= n + 1;\n    }\n    *pcount = divisor_count;\n    *psum = divisor_sum;\n}\n\nint main() {\n    unsigned int arithmetic_count = 0;\n    unsigned int composite_count = 0;\n\n    for (unsigned int n = 1; arithmetic_count <= 1000000; ++n) {\n        unsigned int divisor_count;\n        unsigned int divisor_sum;\n        divisor_count_and_sum(n, &divisor_count, &divisor_sum);\n        if (divisor_sum % divisor_count != 0)\n            continue;\n        ++arithmetic_count;\n        if (divisor_count > 2)\n            ++composite_count;\n        if (arithmetic_count <= 100) {\n            printf(\"%3u \", n);\n            if (arithmetic_count % 10 == 0)\n                printf(\"\\n\");\n        }\n        if (arithmetic_count == 1000 || arithmetic_count == 10000 ||\n            arithmetic_count == 100000 || arithmetic_count == 1000000) {\n            printf(\"\\n%uth arithmetic number is %u\\n\", arithmetic_count, n);\n            printf(\"Number of composite arithmetic numbers <= %u: %u\\n\", n,\n                   composite_count);\n        }\n    }\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim i As Long, c As String, t(5) As Long\n   For i = 1 To 1000007\n      If IsPrime(i) Then \n         t(Len(c)) = i\n      End If\n   Next\n   Debug.Print \"The first twenty-five primes are:\"; Join(t(), \"; \")\nEnd Sub\n\nFunction IsPrime(Number As Long) As Boolean\n\n\nDim Divsors, Test As Boolean, f As Long, l As Long, div, testnum As Integer\n \n   f = Number : l = 2 : Test = False\n   Do While Not testnum = Number And LBound(divsor) <> Len(lm_)\n       If l Mod f = 0 Or l Mod f = LM_Then l = lm_(l - 1) Else\n          l = 2 : Test = True\n       End If\n       testnum = f + 1\n       For div = 3 To Int((L Round Sqr(f))) Step 2\n          If div * div > f Then Exit For  \n          If divmod(l, div) = divmod(f, div) Then\n             f = f / div ; l = l / div\n             Test = True\n          End If\n       Next\n   Loop\nIsPrime = Test\nEnd Function \n\n",
    "input_language": "C",
    "output_language": "VB"
  },
  {
    "id": 13,
    "input": "Translate C to Python:count = 1;\n while (count < 10) {\n     print(\"count is: \", count, \"\\n\");\n     count = count + 1;\n }\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "for i in range(n):\n    if (n%2) == 0:\n        continue\n    elif (n%i) == 0:\n        result = i\n        break\nelse:\n    result = None\n    print \"No odd factors found\"\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 14,
    "input": "Translate C to PHP:\n#define _CRT_SECURE_NO_WARNINGS  \n#include <stdio.h>\n\nint main(void)\n{\n    return 0 >= fputs(\"ANY STRING TO WRITE TO A FILE AT ONCE.\", \n        freopen(\"sample.txt\",\"wb\",stdout));\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "$fh = fopen($filename, 'r');\nif ($fh) {\n   while (!feof($fh)) {\n      $line = rtrim(fgets($fh)); # removes trailing newline\n      echo \"Processing line $line... \";\n      \n      if (strlen($line) > 100) { # a line is too long - don't process it\n         continue;\n      }\n      \n       # Process $line as you see fit...\n      echo \"...\";\n      \n      $_SESSION('content', $line); # set or update a session variable\n   }\n}\nclose($fh);\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 15,
    "input": "Translate C++ to VB:\nclass N{\n  uint n,i,g,e,l;\npublic:\n  N(uint n): n(n-1),i{},g{},e(1),l(n-1){}\n  bool hasNext(){\n    g=(1<<n)+e;for(i=l;i<n;++i) g+=1<<i;\n    if (l==2)             {l=--n; e=1; return true;}\n    if (e<((1<<(l-1))-1)) {++e;        return true;}\n                           e=1; --l;   return (l>0);\n  }\n  uint next() {return g;}\n};\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Class MunchingSquid\n\n  \n  Public Sub munch()\n      Dim i As Integer, j As Integer\n  \n      For i = -3 To 6 Step 2\n          For j = -4 To 7 Step 2\n              If IsMunchable(i + 5, j + 3) Then\n                  EatMe(i + 5, j + 3)\n              End If\n          Next\n      Next\n      \n      Debug.Print \"iteration: \"; mNum(); \", size:\"; mSize();\n  End Sub\n \n  \n  \n  \n  Private Function IsMunchable(ByVal x As Integer, ByVal y As Integer) As Boolean \n    \n    \n    \n    \n    \n    \n    Dim a As String\n    \n    a = CStr(x)\n    a = Replace(a, Chr(Asc(\"a\") + y), Chr(Asc(\"b\") + y))\n    \n    Return Len(CStr(a)) > 1\nEnd Function \n  \nPrivate Sub EatMe(ByVal x As Integer, ByVal y As Integer)\n    Dim s As New StringBuilder(\"(x=\" & x & \",y=\" & y & \")\")\n    Select Case Me.GetType\n      Case Is(New Squid)(c As Integer, d As Integer)\n         Dim ms As New List(Of Squid)(c, d)\n            ms.Remove(c, d)\n            Me.GetType.InvokeMember(\"add\", Val(s.ToString()), ms)\n            SetNext(ms)\n      Case Else\n         \n    End Select\nEnd Sub \n\nPrivate Sub SetNext(myList As Collection)\n\n   \n   Dim c As New Squid\n   Dim d As Integer: d = CLng(List.Count + 1)\n   myList.Add c, d\n   \n\n   Call SetNext(lists(d))\n\nEnd Sub \n\n\nPrivate Property Let(m_Square As Single)\n\n\nPublic Property Property let(square As Single)\n\n\n\nEnd Property \n\n\n\nPrivate Sub Squid(c As Integer, d As Integer)\n\n\n\n\nDim myType As Type = Me.GetType\n\n\n\nIf isNewSquare(Me.square) Then\n\n\n     me.square = ConvertToSingle(me.square)\n     \n     me.Type = GetTypeOfSquare(Me.square)\nElse\n    \n\n    \n\n    \n    \n    \n    On Error GoTo ErrHandler\n\n    \n    me.square = ConvertToSingle(me.square)\n    \n\n\n    If Square.IsPrimeC(Int(me.square / 2)) And _\n       Square.IsprimeIntC(me.square) Then\n        \n        me.Type = \"perfect\"\n        \n    ElseIf Square.isPrimesqC(me.square \\ 10) Or_\n           Square.isPrimesqC(me.square) Then \n        \n        me.Type = \"fancy\" : Exit Sub\n        \n\n    Else\n            \n        \n        \n        me.Type = \"odd prime square\" : Exit Sub\n        \n        \nEnd If\n    \n    \nErrHandler:\n\n\nOnExit CleanUp\n\nEnd Sub \n\n\n\n\nPrivate Function Square(Optional ByVal p As Integer) As Single\n\n\n\n\nDim SQ As Long = LShif(p, -1)\nSQ = Sqr(SQ)\n\n\n\n\n\nReturn SQ\n\n\n\n\n\nPrivate Function getDigits(ByVal number As Single) As Collection\n\n\n\n\n\n\ngetDigits.number = number\ngetDigits.List.Clear()\n\n\n\nWhile getDigits.Number < 10\n    getDigits.list.add(getDigits.Number)\n    getDigits.Number += 1\n Wend\n\n\n\n\n\n\n\nPrivate Function convertToSingle(number As Single) As Single\n\n    convertToSingle = WorksheetFunction.Floor_Precise(number)\nend function\n\nPrivate Function isNewSquare(sq As Single) As Boolean\n\n    sq = sqr(sq)\n    isNewSquare = False\n    While sq <> 1 AndAlso sq <> 7\n        sq /= 2\n        isNewSquare = True\n    Wndle Through\nEnd Function \n \nPrivate Function sqr(x As Single) As Single\n    sqr = Int(x + 0.5) ^ 2\nEnd Function  \n\nPrivate Function Square(Number As Single) As Single\n\n    Square = Number * Number\nEnd Function  \n\n\nPrivate Enum Types\n    Perfect ASQUAD ASQUARE FANCY PERFECTFANCY ODDPRIME SQUARE\nEnd Enum \n\nPrivate Const ISNEWASQUARE As Boolean = True\n",
    "input_language": "C++",
    "output_language": "VB"
  },
  {
    "id": 16,
    "input": "Translate Python to VB:\n\ntry:\n    from msvcrt import getch\nexcept ImportError:\n    def getch():\n        import sys, tty, termios\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n\nprint \"Press Y or N to continue\"\nwhile True:\n    char = getch()\n    if char.lower() in (\"y\", \"n\"):\n        print char\n        break\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Module Module1\n\n    Function GetKey(ByVal stream As IO.Stream) As Char\n        Do While Not stream.EndOfStream\n            Dim c = stream.ReadByte()\n            If Console.IsOutputRedirected Then\n                Console.Write(c);\n            Else\n                System.Console.Write(Char.ConvertFromUtf8Char(c));\n            End If\n        Next\n        Return Char.Empty \n    End Function\n\n\n    Sub Main(argsAs String[])\n\n        \n        Dim key As Char = GetKey(New StreamReader(Console.In))\n\n        \n        \n        Console.WriteLine(\"I've heard Kitten.\")\n        Thread.Sleep(1000)\n\n\n        \n        \n        \n        Console.WriteLine($\"You typed {key} as {DateTime.Now}\")\n        \n\n        Console.ReadKey()\n\n    End Sub\n\nEnd Module\n",
    "input_language": "Python",
    "output_language": "VB"
  },
  {
    "id": 17,
    "input": "Translate Java to Python:import java.util.function.Function;\n\npublic class NumericalIntegrationAdaptiveSimpsons {\n\n    public static void main(String[] args) {\n        Function<Double,Double> f = x -> sin(x);\n        System.out.printf(\"integrate sin(x), x = 0 .. Pi = %2.12f.  Function calls = %d%n\", quadratureAdaptiveSimpsons(f, 0, Math.PI, 1e-8), functionCount);\n        functionCount = 0;\n        System.out.printf(\"integrate sin(x), x = 0 .. 1 = %2.12f.  Function calls = %d%n\", quadratureAdaptiveSimpsons(f, 0, 1, 1e-8), functionCount);\n    }\n    \n    private static double quadratureAdaptiveSimpsons(Function<Double,Double> function, double a, double b, double error) {\n        double fa = function.apply(a);\n        double fb = function.apply(b);\n        Triple t =  quadratureAdaptiveSimpsonsOne(function, a, fa, b ,fb);\n        return quadratureAdaptiveSimpsonsRecursive(function, a, fa, b, fb, error, t.s, t.x, t.fx);\n    }\n    \n    private static double quadratureAdaptiveSimpsonsRecursive(Function<Double,Double> function, double a, double fa, double b, double fb, double error, double whole, double m, double fm) {\n        Triple left  = quadratureAdaptiveSimpsonsOne(function, a, fa, m, fm);\n        Triple right = quadratureAdaptiveSimpsonsOne(function, m, fm, b, fb);\n        double delta = left.s + right.s - whole;\n        if ( Math.abs(delta) <= 15*error ) {\n            return left.s + right.s + delta / 15;\n        }\n        return quadratureAdaptiveSimpsonsRecursive(function, a, fa, m, fm, error/2, left.s, left.x, left.fx) +\n               quadratureAdaptiveSimpsonsRecursive(function, m, fm, b, fb, error/2, right.s, right.x, right.fx);\n    }\n    \n    private static Triple quadratureAdaptiveSimpsonsOne(Function<Double,Double> function, double a, double fa, double b, double fb) {\n        double m = (a + b) / 2;\n        double fm = function.apply(m);\n        return new Triple(m, fm, Math.abs(b-a) / 6 * (fa + 4*fm + fb));\n    }\n    \n    private static class Triple {\n        double x, fx, s;\n        private Triple(double m, double fm, double s) {\n            this.x = m;\n            this.fx = fm;\n            this.s = s;\n        }\n    }\n    \n    private static int functionCount = 0;\n    \n    private static double sin(double x) {\n        functionCount++;\n        return Math.sin(x);\n    }\n    \n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from math import sqrt\n\ndef simpson( func, lims ):\n  \n  def sum(xlo,xhi,n):\n      return n//2*(xlo+xhi)*func(xlo+(xlo+xhi)/2.)\n      \n  xlo, xhi = lims[0], lims[-1]\n  n = len(xlo)\n  yieldsum = sum \n  for xlo, xhi in zip((xlo, xhi),\n                       (xlo+xhi,\n                        xlo+(xlo-xhi))):\n    yield(sum, yix=sum(yi,yix) for yi in range-sum)(yix=xlo)\n\nprint \"For the following domain with equally-spaced points:\\n\"\nfor fun,fmin,fmax in ((sqrt,-50.,50.),(-50.-3.,50.+3.),(50.+3.,50.+9)):\n  print \"%r at %g has minimum of %g\\n\" %(fun,fmin,fmax)\n  xs = simpson(fun,(fmin,fmax))\n  print \"  its approximative value at those points is %g\\n\"%xs\n  \n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 18,
    "input": "Translate Java to Python:import java.util.Random;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class GaltonBox {\n    public static void main( final String[] args ) {\n        new GaltonBox( 8, 200 ).run();\n    }\n\n    private final int        m_pinRows;\n    private final int        m_startRow;\n    private final Position[] m_balls;\n    private final Random     m_random = new Random();\n\n    public GaltonBox( final int pinRows, final int ballCount ) {\n        m_pinRows  = pinRows;\n        m_startRow = pinRows + 1;\n        m_balls    = new Position[ ballCount ];\n\n        for ( int ball = 0; ball < ballCount; ball++ )\n            m_balls[ ball ] = new Position( m_startRow, 0, 'o' );\n    }\n\n    private static class Position {\n        int  m_row;\n        int  m_col;\n        char m_char;\n\n        Position( final int row, final int col, final char ch ) {\n            m_row  = row;\n            m_col  = col;\n            m_char = ch;\n        }\n    }\n\n    public void run() {\n        for ( int ballsInPlay = m_balls.length; ballsInPlay > 0;  ) {\n            ballsInPlay = dropBalls();\n            print();\n        }\n    }\n\n    private int dropBalls() {\n        int ballsInPlay = 0;\n        int ballToStart = -1;\n\n        \n        for ( int ball = 0; ball < m_balls.length; ball++ )\n            if ( m_balls[ ball ].m_row == m_startRow )\n                ballToStart = ball;\n\n        \n        for ( int ball = 0; ball < m_balls.length; ball++ )\n            if ( ball == ballToStart ) {\n                m_balls[ ball ].m_row = m_pinRows;\n                ballsInPlay++;\n            }\n            else if ( m_balls[ ball ].m_row > 0 && m_balls[ ball ].m_row != m_startRow ) {\n                m_balls[ ball ].m_row -= 1;\n                m_balls[ ball ].m_col += m_random.nextInt( 2 );\n                if ( 0 != m_balls[ ball ].m_row )\n                    ballsInPlay++;\n            }\n\n        return ballsInPlay;\n    }\n\n    private void print() {\n        for ( int row = m_startRow; row --> 1;  ) {\n            for ( int ball = 0; ball < m_balls.length; ball++ )\n                if ( m_balls[ ball ].m_row == row )\n                    printBall( m_balls[ ball ] );\n            System.out.println();\n            printPins( row );\n        }\n        printCollectors();\n        System.out.println();\n    }\n\n    private static void printBall( final Position pos ) {\n        for ( int col = pos.m_row + 1; col --> 0;  )\n            System.out.print( ' ' );\n        for ( int col = 0; col < pos.m_col; col++ )\n            System.out.print( \"  \" );\n        System.out.print( pos.m_char );\n    }\n\n    private void printPins( final int row ) {\n        for ( int col = row + 1; col --> 0;  )\n            System.out.print( ' ' );\n        for ( int col = m_startRow - row; col --> 0;  )\n            System.out.print( \". \" );\n        System.out.println();\n    }\n\n    private void printCollectors() {\n        final List<List<Position>> collectors = new ArrayList<List<Position>>();\n\n        for ( int col = 0; col < m_startRow; col++ ) {\n            final List<Position> collector = new ArrayList<Position>();\n\n            collectors.add( collector );\n            for ( int ball = 0; ball < m_balls.length; ball++ )\n                if ( m_balls[ ball ].m_row == 0 && m_balls[ ball ].m_col == col )\n                    collector.add( m_balls[ ball ] );\n        }\n\n        for ( int row = 0, rows = longest( collectors ); row < rows; row++ ) {\n            for ( int col = 0; col < m_startRow; col++ ) {\n                final List<Position> collector = collectors.get( col );\n                final int            pos       = row + collector.size() - rows;\n\n                System.out.print( '|' );\n                if ( pos >= 0 )\n                    System.out.print( collector.get( pos ).m_char );\n                else\n                    System.out.print( ' ' );\n            }\n            System.out.println( '|' );\n        }\n    }\n\n    private static final int longest( final List<List<Position>> collectors ) {\n        int result = 0;\n\n        for ( final List<Position> collector : collectors )\n            result = Math.max( collector.size(), result );\n\n        return result;\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from __future__ import division\n\ndef setup():\n    \n    size(1000,500)\n    \n    \n    background(255)\n\n    \n    ellipse(mouseX,mouseY,height/4.0,width*3.0)\n\n\n    \n\n    \n    x=width/2.0\n    y=height/6.0\n    s=30.0\n    r=.01\n    \n    def draw():\n        global x,y,s,r\n        \n        a=x-sin(r*x)*s\n        b=y+sin(r*y+s)\n        c=(b-bits(a))%height\n        println(\"R=\",r,\" \",c,x,y,a,b,c)\n        \n        \n        x-=a/sin(r*x)*(s+r)\n        y+=b*sin(r*y+s)+c\n        \n        \n        \n\n    def mousePressed(): \n        \n        \n        \n        x=width/2.0\n        y=height/6.0\n        s=30.0\n        r=.01\n            \n        set(x=width/2.0,y=height/6.0,s=30.0,r=.01)\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 19,
    "input": "Translate Python to Go:\n\nfrom collections import Counter\n\ndef decompose_sum(s):\n    return [(a,s-a) for a in range(2,int(s/2+1))]\n\n\nall_pairs = set((a,b) for a in range(2,100) for b in range(a+1,100) if a+b<100)\n\n\nproduct_counts = Counter(c*d for c,d in all_pairs)\nunique_products = set((a,b) for a,b in all_pairs if product_counts[a*b]==1)\ns_pairs = [(a,b) for a,b in all_pairs if\n    all((x,y) not in unique_products for (x,y) in decompose_sum(a+b))]\n\n\nproduct_counts = Counter(c*d for c,d in s_pairs)\np_pairs = [(a,b) for a,b in s_pairs if product_counts[a*b]==1]\n\n\nsum_counts = Counter(c+d for c,d in p_pairs)\nfinal_pairs = [(a,b) for a,b in p_pairs if sum_counts[a+b]==1]\n\nprint(final_pairs)\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\n\tvar d []int \n\t\n\t\n\tfunc count(i *d) int {\n\t\t\n\t\tfor j := len(d); j > 0; i = append(i, j) {\n\t\t\tif d[j-1]+i[j] == 10 { return -1 }\n\t\t}\n\t\t\n\t\t\n\t\treturn len(d)-1\n\t}\n\t\n\nfunc commatize(n string) string {\n\tif n[0] == '0' && n[len(n)-1]!= '.' {\n\t\tn = n[:len(n)-1]\n\t}\n\ti := len(n) - 10\n\t\n\twhile i < len(n) {\n\t\tdigit := n[i:]\n\t\tj := strings.IndexRune(digits, digit)\n\t\tif j >= 0 {\n\t\t\t\n\t\t\tdigits = strings.ReplaceAll(strings.ReplaceAll(string(\"00\" + digits), \"000\", \"\"), \"000\", \"\")\n\t\t\tdigits += string(j + 1)\n\t\t} else {\n\t\t\t\n\t\t\t\n\t\t\tdigits = strings.ReplaceAll(strings.ReplaceAll(string(\"00\" + digits), \"000\", \"\"), \"000\", \"\")\n\t\t\tdigits = digits[:(j-1)]\n\t\t}\n\n\t\ti++\n\t}\n\treturn n\n}\n\n\nvar testCases = [\n\t{\"input\": [3,4], \"output\": [6]}\n\t{\"input\": [5,7], \"output\": [-1]}\n\t{\"input\": [11,12], \"output\": [\"99\"]}\n]\n\n\n\nfor _, tc := range testCases {\n\tfmt.Printf(\"%v\\n\", tc[\"input\"])\n\ta := count(tc[\"input\"])\n\ttc[\"output\"] = commatize(a)\n\tfmt.Println(tc[\"output\"]) \n\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 20,
    "input": "Translate Python to Go:\n\nfrom myhdl import *\n\n\n\n@block\ndef NOTgate( a,  q ):   \n   \n   @always_comb   \n   def NOTgateLogic():\n      q.next = not a\n\n   return NOTgateLogic   \n\n\n@block\ndef ANDgate( a, b,  q ):\n   \n   @always_comb \n   def ANDgateLogic():\n      q.next = a and b\n\n   return ANDgateLogic\n\n\n@block\ndef ORgate( a, b,  q ):\n      \n   @always_comb  \n   def ORgateLogic():\n      q.next = a or b\n\n   return ORgateLogic\n\n\n\n\n@block\ndef XORgate( a, b,  q ):\n      \n   \n   nota, notb, annotb, bnnota = [Signal(bool(0)) for i in range(4)]\n   \n   inv0 = NOTgate( a,  nota )\n   inv1 = NOTgate( b,  notb )\n   and2a = ANDgate( a, notb,  annotb )\n   and2b = ANDgate( b, nota,  bnnota )\n   or2a = ORgate( annotb, bnnota,  q )\n\n   return inv0, inv1, and2a, and2b, or2a\n\n\n@block\ndef HalfAdder( in_a, in_b,  summ, carry ):\n    \n   and2a =  ANDgate(in_a, in_b,  carry)\n   xor2a =  XORgate(in_a, in_b,  summ)\n\n   return and2a, xor2a\n\n\n@block\ndef FullAdder( fa_c0, fa_a, fa_b,  fa_s, fa_c1 ):\n   \n\n   ha1_s, ha1_c1, ha2_c1 = [Signal(bool(0)) for i in range(3)]\n\n   HalfAdder01 = HalfAdder( fa_c0, fa_a,  ha1_s, ha1_c1 )\n   HalfAdder02 = HalfAdder( ha1_s, fa_b,  fa_s,  ha2_c1 )\n   or2a = ORgate(ha1_c1, ha2_c1,  fa_c1)\n\n   return HalfAdder01, HalfAdder02, or2a\n\n\n@block\ndef Adder4b( ina, inb,  cOut, sum4):\n    \n\n   cl = [Signal(bool()) for i in range(0,4)]  \n   sl = [Signal(bool()) for i in range(4)]  \n\n   HalfAdder0 = HalfAdder(        ina(0), inb(0),  sl[0], cl[1] )\n   FullAdder1 = FullAdder( cl[1], ina(1), inb(1),  sl[1], cl[2] ) \n   FullAdder2 = FullAdder( cl[2], ina(2), inb(2),  sl[2], cl[3] ) \n   FullAdder3 = FullAdder( cl[3], ina(3), inb(3),  sl[3], cOut ) \n\n   sc = ConcatSignal(*reversed(sl))  \n\n   @always_comb\n   def list2intbv():\n      sum4.next = sc  \n\n   return HalfAdder0, FullAdder1, FullAdder2, FullAdder3, list2intbv\n\n\n\nt_co, t_s, t_a, t_b, dbug =  [Signal(bool(0)) for i in range(5)]\nina4, inb4, sum4 =  [Signal(intbv(0)[4:])  for i in range(3)]\n\nfrom random import randrange \n\n@block\ndef Test_Adder4b():\n   \n   dut = Adder4b( ina4, inb4,  t_co, sum4 )\n\n   @instance\n   def check():\n      print( \"\\n      b   a   |  c1    s   \\n     -------------------\" )\n      for i in range(15):\n         ina4.next, inb4.next = randrange(2**4), randrange(2**4)\n         yield delay(5)\n         print( \"     %2d  %2d   |  %2d   %2d     \" \\\n                % (ina4,inb4, t_co,sum4) )\n         assert t_co * 16 + sum4 == ina4 + inb4  \n      print()\n\n   return dut, check\n\n\n\n\ndef main():\n   simInst = Test_Adder4b()\n   simInst.name = \"mySimInst\"\n   simInst.config_sim(trace=True)  \n   simInst.run_sim(duration=None)\n\n   inst = Adder4b( ina4, inb4,  t_co, sum4 )  \n   inst.convert(hdl='VHDL')  \n   inst.convert(hdl='Verilog')  \n\n    \nif __name__ == '__main__':\n   main()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/ghodsgroup/go-sum/pkg/v2/sixdigitsum\"\n)\n\nfunc main() {\n\tfmt.Println(\"Integer sizes:\")\n\tfor n := int8(1); ; n++ {\n\t\te := make([]byte, n*8-n+7)\n\tz := []rune(e)\n\tk := uint32(n<<6|n)-1\n\tsi := sixdigitsum.SixDigitSum(k)\n\tif si < 10000000 { break }\n\tfmt.Printf(\"%d bits: %-9s size is %-10v\\n\", n,\n\t\tn==1 && si.String()[:13] +\n\t\tn==17 || n==19? \"munchkin\": \"super\",\n\t\tsi)\n\t}\n\t\n\ti64k := k>>3\n\tsi = sixdigitsum.SixDigitSum(i64k)\n\tif si < 20000000{ continue }\n\tfmt.Printf(\"%d bits: %-9s size is %-10v\\n\", i64k,\n\t\ti64k==11||i64k==23? \"big integer\": \"integer\",\n\t\tsi)\n\t\n\t\n\tmul := uint32((uint32(^uint32(uint8(0))) >> 8))\n\tsi = sixdigitsum.SixDigitSum(mul)\n\tfmt.Println(\"\\nmultiplication of 10^x by 10^y:\"+\n\t\t\"\\n       x           y          xy             x/y\")\n\tfor _, v := range [][]string{{mul}, {n}} {\n\t\tvar e string\n\t\tfor _, r := range v {\n\t\t\trz := len(r)/2 - 12*r[len(r)-1]\n\t\t\tswitch p := r[rLen(r)-1]; {\n\t\t\t\tcase 'e': e = fmt.Sprintf(\"×%o\", rz);\n\t\t\t\tcase 'l': e = fmt.Sprintf(\"¹⁄ₓ (%c)\", p)\n\t\t\t}\n\n\t\t\t\n\t\t\tif j, ok := r[p-1].AsByte(); ok &&\n\t\t\t\tj >= 128-(p>>1)&127 { l := byte(j>>4&31) } else if\n\t\t\t\tp > 0&&p>>1&1 { l = byte(p & 31) }\n\n\t\t\tif!ok { panic(fmt.Sprintf(\n\t\t\t\t\"%c invalid digit at position %d\", p,p))\n\n\t\t\t\t\n\t\t\trz += int(rz)*j;\n\t\t}\t\t\n\t\tfmt.Printf(\"%2d %-18s %-14s %-20s\\n\", n,r,z,e)\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 21,
    "input": "Translate C to Python:#include<string.h>\n#include<stdlib.h>\n#include<ctype.h>\n#include<stdio.h>\n\n#define UNITS_LENGTH 13\n\nint main(int argC,char* argV[])\n{\n\tint i,reference;\n\tchar *units[UNITS_LENGTH] = {\"kilometer\",\"meter\",\"centimeter\",\"tochka\",\"liniya\",\"diuym\",\"vershok\",\"piad\",\"fut\",\"arshin\",\"sazhen\",\"versta\",\"milia\"};\n    double factor, values[UNITS_LENGTH] = {1000.0,1.0,0.01,0.000254,0.00254,0.0254,0.04445,0.1778,0.3048,0.7112,2.1336,1066.8,7467.6};\n\t\n\tif(argC!=3)\n\t\tprintf(\"Usage : %s followed by length as <value> <unit>\");\n\telse{\n\t\tfor(i=0;argV[2][i]!=00;i++)\n\t\t\targV[2][i] = tolower(argV[2][i]);\n\t\t\n\t\tfor(i=0;i<UNITS_LENGTH;i++){\n\t\t\tif(strstr(argV[2],units[i])!=NULL){\n\t\t\t\treference = i;\n\t\t\t\tfactor = atof(argV[1])*values[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tprintf(\"%s %s is equal in length to : \\n\",argV[1],argV[2]);\n\t\t\n\t\tfor(i=0;i<UNITS_LENGTH;i++){\n\t\t\tif(i!=reference)\n\t\t\t\tprintf(\"\\n%lf %s\",factor/values[i],units[i]);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import product\n\ndef get_units(n):\n    if n >= 100:\n        units = ['k','my','ml']\n        if n >= 300:\n            units.append('cl')\n        elif n >= 600:\n            units.append('dl')\n        else:\n            raise ValueError(f'{n} ml is invalid')\n    elif n == 25 or n == 50 or n == 75:\n        units = ['tsp', 'tbp', 'bbl']\n    elif n <= 24:\n        units = [str(x) for x in range(10, n + 1)]\n    else:\n        raise ValueError(f'{n} ml is invalid')\n\n    return f'{n:d}: {\", '.join(units)}'\n\nif __name__ == '__main__':\n    print(*product(range(101), repeat=5))\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 22,
    "input": "Translate C to C#:#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(void) {\n    int nprimes =  1000000;\n    int nmax =    ceil(nprimes*(log(nprimes)+log(log(nprimes))-0.9385));  \n      \n      \n    int i, j, m, k; int *a;\n    k = (nmax-2)/2; \n    a = (int *)calloc(k + 1, sizeof(int));\n    for(i = 0; i <= k; i++)a[i] = 2*i+1; \n    for (i = 1; (i+1)*i*2 <= k; i++)\n        for (j = i; j <= (k-i)/(2*i+1); j++) {\n            m = i + j + 2*i*j;\n            if(a[m]) a[m] = 0;\n            }            \n        \n    for (i = 1, j = 0; i <= k; i++) \n       if (a[i]) {\n           if(j%10 == 0 && j <= 100)printf(\"\\n\");\n           j++; \n           if(j <= 100)printf(\"%3d \", a[i]);\n           else if(j == nprimes){\n               printf(\"\\n%d th prime is %d\\n\",j,a[i]);\n               break;\n               }\n           }\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace Primes\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const int maxNum = 9_012_800;\n            bool[] primes = new bool[maxNum];\n            Array.Sort(primes);\n            Console.WriteLine(\"First 25 primitive roots of the odd factor integer sequence are:\");\n            for (int count = 0, thisPrime = 3;count < 25 ;thisPrime += 2)\n                if (!primorial(thisPrime)) continue;\n                for (int d = 5;;) {\n                    d <<= 1;\n                    if (d >= thisPrime) {d -= thisPrime; break;}\n                    if (primorial(d))\n                        {for (; d < thisPrime; d += 6)\n                            if (primorial(d)) {count++;\n                                Console.Write(\"{0} \");\n                               }}\n                    }\n                Console.WriteLine(count + \" -> {0}\", thisPrime);\n\n                \n                foreach(var p in primes.TakeWhile(x => x < thisPrime/2).ToArray())\n                    Console.Write(\"{0}{1},\",p,(new DateTime()).AddHours(24));\n\n                Console.WriteLine();\n        }\n\n        private static readonly uint[] primorals = Enumerable.Range(7, 4).Select(v => v * v - 1).TakeWhile((x,y) => y < 50000).\n            Take(21).Where(p => CheckPrimality(p)).ToList();\n\n        public static bool CheckPrimality(uint number)\n        {\n            var testNumber = number > 0? number : number *= 2;\n            while (testNumber!= 1)\n                if ((number & 1) == 0) return false;\n                testNumber >>= 1;\n            return true;\n        }\n    }\n}\n",
    "input_language": "C",
    "output_language": "C#"
  },
  {
    "id": 23,
    "input": "Translate C to Go:#include <stdio.h>\n\nvoid transpose(void *dest, void *src, int src_h, int src_w)\n{\n\tint i, j;\n\tdouble (*d)[src_h] = dest, (*s)[src_w] = src;\n\tfor (i = 0; i < src_h; i++)\n\t\tfor (j = 0; j < src_w; j++)\n\t\t\td[j][i] = s[i][j];\n}\n\nint main()\n{\n\tint i, j;\n\tdouble a[3][5] = {{ 0, 1, 2, 3, 4 },\n\t\t\t  { 5, 6, 7, 8, 9 },\n\t\t\t  { 1, 0, 0, 0, 42}};\n\tdouble b[5][3];\n\ttranspose(b, a, 3, 5);\n\n\tfor (i = 0; i < 5; i++)\n\t\tfor (j = 0; j < 3; j++)\n\t\t\tprintf(\"%g%c\", b[i][j], j == 2 ? '\\n' : ' ');\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n\n    \"gonum.org/v1/gonum/mat\"\n)\n\nfunc eye(n uint) *mat.Dense {\n    m := mat.NewDense(n, n, nil)\n    for i := 0; i < n; i++ {\n        m.Set(i, i, 1)\n    }\n    return m\n}\n\nfunc main() {\n    fmt.Println(mat.Formatted(eye(3)))\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 24,
    "input": "Translate C# to VB:using System;\n\nstatic class YCombinator<T, TResult>\n{\n    \n    private delegate Func<T, TResult> RecursiveFunc(RecursiveFunc r);\n\n    public static Func<Func<Func<T, TResult>, Func<T, TResult>>, Func<T, TResult>> Fix { get; } =\n        f => ((RecursiveFunc)(g => f(x => g(g)(x))))(g => f(x => g(g)(x)));\n}\n\nstatic class Program\n{\n    static void Main()\n    {\n        var fac = YCombinator<int, int>.Fix(f => x => x < 2 ? 1 : x * f(x - 1));\n        var fib = YCombinator<int, int>.Fix(f => x => x < 2 ? x : f(x - 1) + f(x - 2));\n\n        Console.WriteLine(fac(10));\n        Console.WriteLine(fib(10));\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main_Factorial()\nDim i As Long\n\n   Debug.Print \"F(\"\"\"999999999\"\"\"\")\n   i = 10000000\n   Debug.Print \"F(\"\"\"i\"\"\"\")\nEnd Sub\n\nFunction F(ByVal N As Long) As Long\n\n   If N <= 1 Then\n      F = 1\n   Else\n      Dim result As Long: result = 1\n      Do While N > 0\n         If (N Mod 2) = 1 Then\n            result = result * (N \\ 2)\n         End If\n         N = N \\ 2\n      Loop\n      F = result\n   End If\nEnd Function\n",
    "input_language": "C#",
    "output_language": "VB"
  },
  {
    "id": 25,
    "input": "Translate Java to Python:import java.io.*;\n\npublic class FileIODemo {\n  public static void main(String[] args) {\n    try {\n      FileInputStream in = new FileInputStream(\"input.txt\");\n      FileOutputStream out = new FileOutputStream(\"ouput.txt\");\n      int c;\n      while ((c = in.read()) != -1) {\n        out.write(c);\n      }\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e){\n      e.printStackTrace();\n    }\n  }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> import fileinput\n>>> for line in fileinput.input(inplace=True):\n\tline = line.strip()\n\tprint(line, end=' ')\n\t\n\t\n\t\n\t\n\tfileinput.backtracking(True)\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 26,
    "input": "Translate Java to Go:import com.sun.javafx.application.PlatformImpl;\nimport java.io.File;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport javafx.scene.media.Media;\nimport javafx.scene.media.MediaPlayer;\n\npublic class AudioAlarm {\n\n    public static void main(String[] args) throws InterruptedException {\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Enter a number of seconds: \");\n        int seconds = Integer.parseInt(input.nextLine());\n\n        System.out.print(\"Enter a filename (must end with .mp3 or .wav): \");\n        String audio = input.nextLine();\n\n        TimeUnit.SECONDS.sleep(seconds);\n\n        Media media = new Media(new File(audio).toURI().toString());\n        AtomicBoolean stop = new AtomicBoolean();\n        Runnable onEnd = () -> stop.set(true);\n\n        PlatformImpl.startup(() -> {}); \n\n        MediaPlayer player = new MediaPlayer(media);\n        player.setOnEndOfMedia(onEnd);\n        player.setOnError(onEnd);\n        player.setOnHalted(onEnd);\n        player.play();\n\n        while (!stop.get()) {\n            Thread.sleep(100);\n        }\n        System.exit(0); \n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tvar n, s uint64\n\tfmt.Print(\"Number of seconds to wake up in: \")\n\tif _, err := fmt.Scan(&n); err!= nil || n < 1; err = os.ErrInvalid continue\n\ts = time.Duration(n * float64(uint64(n)))\n\tfor {\n\t\tfmt.Printf(\"\\nSleeping...%s\\n\", time.Unix(s/2, 0))\n\t\tswitch len(os.Args)-1 {\n\t\tcase 0:\n\t\t\tresult := wait()\n\t\tcase 1:\n\t\t\targs := append([]string{os.Args[0]}, result...)\n\t\t\tfmt.Println(fmt.Sprintf(\"%v\", args))\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t}\n}\n\nfunc wait() string {\n\ta := make(chan bool)\n\tgo func() { <-a })()\n\ttime.Sleep(time.Duration((float64(len(os.Args))-2)*s / float64(s+2)))  \n\treturn \"Awake!\"\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 27,
    "input": "Translate Java to Python:public class McNuggets {\n\n    public static void main(String... args) {\n        int[] SIZES = new int[] { 6, 9, 20 };\n        int MAX_TOTAL = 100;\n        \n        int numSizes = SIZES.length;\n        int[] counts = new int[numSizes];\n        int maxFound = MAX_TOTAL + 1;\n        boolean[] found = new boolean[maxFound];\n        int numFound = 0;\n        int total = 0;\n        boolean advancedState = false;\n        do {\n            if (!found[total]) {\n                found[total] = true;\n                numFound++;\n            }\n            \n            \n            advancedState = false;\n            for (int i = 0; i < numSizes; i++) {\n                int curSize = SIZES[i];\n                if ((total + curSize) > MAX_TOTAL) {\n                    \n                    total -= counts[i] * curSize;\n                    counts[i] = 0;\n                }\n                else {\n                    \n                    counts[i]++;\n                    total += curSize;\n                    advancedState = true;\n                    break;\n                }\n            }\n            \n        } while ((numFound < maxFound) && advancedState);\n        \n        if (numFound < maxFound) {\n            \n            for (int i = MAX_TOTAL; i >= 0; i--) {\n                if (!found[i]) {\n                    System.out.println(\"Largest non-McNugget number in the search space is \" + i);\n                    break;\n                }\n            }\n        }\n        else {\n            System.out.println(\"All numbers in the search space are McNugget numbers\");\n        }\n        \n        return;\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import combinations\n\ndef largest_subset_of_n(n, s):\n    \n    def ls(subset):\n        return n - sum(e in subset or 0 \n                     for e in s)\n    subsets = list(combinations(range(len(s)), n))\n    best_size = min(ls(subset) for subset in subsets)\n    return next((subset for (subset, size) in subsets\n               if size == best_size), [])\n\n\nif __name__ == '__main__':\n    print('First ten large sets of nuts with a given nut count:')\n    print(*largest_subset_of_n(5, range(10)))\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 28,
    "input": "Translate Python to Go:print('\\n'.join((f'{x[0]}: {\" \".join(sorted(x[1]))}' if len(x[1]) < 30 else f'{x[0]}: {len(x[1])} words' for x in\n      (x for x in ((n, [x[1] for x in l if x[0] == n]) for n in range(maxlen, -1, -1)) if x[1]))) if (maxlen := max(l := [(len(c), w)\n      for w in [l for l in [l.rstrip() for l in open('unixdict.txt')] if len(l) > 10 and all(c >= 'a' and c <= 'z' for c in l)]\n      if sorted(c := w.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '')) == sorted(set(c))])[0]) else None)\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"sort\"\n    \"strings\"\n)\n\n\nfunc main() {\n    \n    b, err := ioutil.ReadFile(\"unixdict.txt\")\n    if err!= nil {\n        log.Fatal(err)\n    }\n    \n    \n    m := make(map[string]bool)\n    var d []string\n    \n    for _, r := range bytes.Fields(b) {\n        \n        \n        \n        \n        \n        s := strings.TrimSpace(string(r))\n        \n        if!m.hasKey(s) {\n            continue \n        }\n        \n\n        d = append(d, s)\n        m[s] = true\n    }\n\n    \n    \n    \n    sort.Sort(d)\n    fmt.Println(strings.Join(d[:20], \", \"))\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 29,
    "input": "Translate C++ to C#:#include <algorithm>\n#include <iostream>\n#include <iterator>\n\ntemplate <typename RandomAccessIterator>\nvoid bubble_sort(RandomAccessIterator begin, RandomAccessIterator end) {\n  bool swapped = true;\n  while (begin != end-- && swapped) {\n    swapped = false;\n    for (auto i = begin; i != end; ++i) {\n      if (*(i + 1) < *i) {\n        std::iter_swap(i, i + 1);\n        swapped = true;\n      }\n    }\n  }\n}\n\nint main() {\n  int a[] = {100, 2, 56, 200, -52, 3, 99, 33, 177, -199};\n  bubble_sort(std::begin(a), std::end(a));\n  copy(std::begin(a), std::end(a), std::ostream_iterator<int>(std::cout, \" \"));\n  std::cout << \"\\n\";\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace RosettaCode.BubbleSort\n{\n    using static Int32[] array;\n    class Program\n    {\n        private static void Main()\n        {\n            var arr = new Int32[5];\n            arr[0] = 1;\n            arr[1] = 9;\n            arr[2] = 8;\n            arr[3] = 6;\n            arr[4] = 5;\n\n            Console.WriteLine(\"Before:   \" + string.Join(\",\", arr));\n\n            Array.Sort(arr);\n            Console.WriteLine(\"After:    \" + string.Join(\", \", arr));\n        }\n    }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 30,
    "input": "Translate PHP to C#:$myObj = new Object();\n$serializedObj = serialize($myObj);\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main(string[] args) {\n        var obj = new Dictionary<string, object> { {\"a\", 1 }, { \"b\", 2 } };\n        var encoded = JSON.Serialize(obj);\n        Console.WriteLine(encoded);\n        var decoded = JSON.Parse(encoded);\n        Console.WriteLine(decoded[\"b\"]);\n    }\n}\n",
    "input_language": "PHP",
    "output_language": "C#"
  },
  {
    "id": 31,
    "input": "Translate PHP to Python:<?php\n$a = fgets(STDIN);\n$b = fgets(STDIN);\n\necho\n    \"sum:                 \", $a + $b, \"\\n\",\n    \"difference:          \", $a - $b, \"\\n\",\n    \"product:             \", $a * $b, \"\\n\",\n    \"truncating quotient: \", (int)($a / $b), \"\\n\",\n    \"flooring quotient:   \", floor($a / $b), \"\\n\",\n    \"remainder:           \", $a % $b, \"\\n\",\n    \"power:               \", $a ** $b, \"\\n\"; // PHP 5.6+ only\n?>\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "try:\n    input('Enter a number').isnumeric()\n    print(\"OK\")\nelse:\n    print(\"Not OK\")\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 32,
    "input": "Translate C to C#:#include <stdio.h>\n\n\nint mul_inv(int a, int b)\n{\n\tint b0 = b, t, q;\n\tint x0 = 0, x1 = 1;\n\tif (b == 1) return 1;\n\twhile (a > 1) {\n\t\tq = a / b;\n\t\tt = b, b = a % b, a = t;\n\t\tt = x0, x0 = x1 - q * x0, x1 = t;\n\t}\n\tif (x1 < 0) x1 += b0;\n\treturn x1;\n}\n\nint chinese_remainder(int *n, int *a, int len)\n{\n\tint p, i, prod = 1, sum = 0;\n\n\tfor (i = 0; i < len; i++) prod *= n[i];\n\n\tfor (i = 0; i < len; i++) {\n\t\tp = prod / n[i];\n\t\tsum += a[i] * mul_inv(p, n[i]) * p;\n\t}\n\n\treturn sum % prod;\n}\n\nint main(void)\n{\n\tint n[] = { 3, 5, 7 };\n\tint a[] = { 2, 3, 2 };\n\n\tprintf(\"%d\\n\", chinese_remainder(n, a, sizeof(n)/sizeof(n[0])));\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program\n{\n    static long ChChinese(long l)\n    {\n        if ((l & 1)!= 0) return -1;\n        \n        string s = Convert.ToString(l, 16);\n        int a = 0, b = 1;\n        char c = '0';\n        while (s.Length >= 2)\n            {\n                int d = Int.Parse(s.Substring(0, 2));\n                switch (c)\n                {\n                    case '1':\n                        if (d > a + b) b++;\n                        break;\n                    case '2': \n                        if (d > a) a = a + d;\n                        else b = b + d;\n                        c = '0';\n                        continue;\n                    default:\n                        \n                        do\n                            {\n                                if (d > a + b) b++;\n                                break;\n                            }while (s.Length >= 4);\n                        c = '1';\n                        break;\n                         }\n                s = s.Substring(2);\n                \n                }\n            \n                if (b > a) return b;\n                return a;\n            }\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"No.  Luhn Rule Applies?\");\n            foreach (long l in new long[]{22, 1234567812345678L, 2222222222222222L})\n                Console.Write(\"{0}  {1}\", ChChinese(l), CheckChChinese(r\"{\"+string.Format(\"{0}\\t{1}\",l,string.Join(\"\", ChChinese(l)))}.ToString().PadLeft(9,'').Replace(\"[\", \"{\").Plus(\"\").Replace(\"]\", \"}\");\n           )\n        }\n\nprivate const string STest = @\"22 0039000000000003 8888000000086888\n\n111444 33335560000003335 6666677\n\n777788 9996992000000999 1001000\"\n\npublic static class Extensions\n{\n    \n    private static readonly object _sync = new Object();\n\n    internal static bool IsEven(this int number)\n    {\n        lock (_sync)\n        {\n            number = Math.Abs(number);\n            var halfNumber = number >> 1;\n            return!(number & 1);\n        }\n    }\n\n    \n    \n    private static IEnumerable<string> StringToBinary(this int number, int offset)\n    {\n        \n        \n        \n        \n        \n        Func<int, IEnumerator<char>> enumerator =\n          delegate(int curNumeralOffsetCurCharIndex,\n                   int curNumeralsRemaining)\n            {\n                int remainder = curNumeralOffsetCurCharIndex % 2;\n                return Enumerable.Range(-remainder, 2).Select(c => (char)(numerals[curNumeralOffsetCurCharIndex >> remainder])).GetEnumerator();\n            };\n\n        \n\n        yield return String.Empty;\n\n        int numeraIfoffset = offset << 1 | 1;\n        while (true)\n        {\n            \n            \n            int numeraisRequired = (1 << numeraiFoIIfterwordBits) - 1;\n            \n\n            int numerasAvailableForThisCycle = numeraisRequired -\n                                                  StringToBinary(numerusRemaining)[StringToBinary(offset).Count()];\n            if (numerasAvailableForThisCycle <= 0)\n                break;\n            EnumerateNextTwoDigits(numeraIfoffset);\n\n            while (--numeresAvailableForThisCycle > 0)\n            {\n                \n                \n                int numeraloffsetcurnumericalindex = numeraIfoffset +\n                                                       numerasAvailableForThisCycle |\n                                                       numeraIfofferword;\n                yield return (char)((numeraloffsetcurnumericalindex >> 2) & 0xFF);\n                numeraIfoffset = (numeraIfoffset + 1) & 0xF;\n            }\n        }\n    }\n\n    \n\n    private static void EnamecateNextTwodigits(this int number, out int rem)\n    {\n        rem = number & 1;\n        number >>= 1;\n    }\n\n    \n    \n    \n    private static int Numerals[this.MaxLength,this.MaxLength]\n      this [int numeratorOffset,int denominatorOffset]\n      \n      get\n      {\n          \n          int result = 0;\n          while (true)\n          {\n              result = (result*10 + eNamecateNextTwodigits(numeratorOffset++)) %\n                     denominatorsRemaining;\n              \n               if (++numeratorOffset > denominationsRemaining)\n                  break;\n          }\n          return result;\n      }\n\n    \n    \n    \n    \n    private static int[] Denominators=this.MaxLength\n       {[6..~2],\n         [7..~1],\n         [8..0]}\n     ;\n\n    private static long Chinese(long l)\n    {\n        if ((l & 1)!= 0) return -1;\n        \n        string s = Convert.ToString(l, 16);\n        int a = 0, b = 1;\n        char c = '0';\n\n        while (s.Length >= 2)\n        {\n            int d = Int.Parse(s.Substring(0, 2));\n\n            switch (c)\n            {\n                case '1':\n",
    "input_language": "C",
    "output_language": "C#"
  },
  {
    "id": 33,
    "input": "Translate C to PHP:#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } vec;\ntypedef struct { int n; vec* v; } polygon_t, *polygon;\n\n#define BIN_V(op, xx, yy) vec v##op(vec a,vec b){vec c;c.x=xx;c.y=yy;return c;}\n#define BIN_S(op, r) double v##op(vec a, vec b){ return r; }\nBIN_V(sub, a.x - b.x, a.y - b.y);\nBIN_V(add, a.x + b.x, a.y + b.y);\nBIN_S(dot, a.x * b.x + a.y * b.y);\nBIN_S(cross, a.x * b.y - a.y * b.x);\n\n\nvec vmadd(vec a, double s, vec b)\n{\n\tvec c;\n\tc.x = a.x + s * b.x;\n\tc.y = a.y + s * b.y;\n\treturn c;\n}\n\n\nint intersect(vec x0, vec x1, vec y0, vec y1, double tol, vec *sect)\n{\n\tvec dx = vsub(x1, x0), dy = vsub(y1, y0);\n\tdouble d = vcross(dy, dx), a;\n\tif (!d) return 0; \n\n\ta = (vcross(x0, dx) - vcross(y0, dx)) / d;\n\tif (sect)\n\t\t*sect = vmadd(y0, a, dy);\n\n\tif (a < -tol || a > 1 + tol) return -1;\n\tif (a < tol || a > 1 - tol) return 0;\n\n\ta = (vcross(x0, dy) - vcross(y0, dy)) / d;\n\tif (a < 0 || a > 1) return -1;\n\n\treturn 1;\n}\n\n\ndouble dist(vec x, vec y0, vec y1, double tol)\n{\n\tvec dy = vsub(y1, y0);\n\tvec x1, s;\n\tint r;\n\n\tx1.x = x.x + dy.y; x1.y = x.y - dy.x;\n\tr = intersect(x, x1, y0, y1, tol, &s);\n\tif (r == -1) return HUGE_VAL;\n\ts = vsub(s, x);\n\treturn sqrt(vdot(s, s));\n}\n\n#define for_v(i, z, p) for(i = 0, z = p->v; i < p->n; i++, z++)\n\nint inside(vec v, polygon p, double tol)\n{\n\t\n\tint i, k, crosses, intersectResult;\n\tvec *pv;\n\tdouble min_x, max_x, min_y, max_y;\n\n\tfor (i = 0; i < p->n; i++) {\n\t\tk = (i + 1) % p->n;\n\t\tmin_x = dist(v, p->v[i], p->v[k], tol);\n\t\tif (min_x < tol) return 0;\n\t}\n\n\tmin_x = max_x = p->v[0].x;\n\tmin_y = max_y = p->v[1].y;\n\n\t\n\tfor_v(i, pv, p) {\n\t\tif (pv->x > max_x) max_x = pv->x;\n\t\tif (pv->x < min_x) min_x = pv->x;\n\t\tif (pv->y > max_y) max_y = pv->y;\n\t\tif (pv->y < min_y) min_y = pv->y;\n\t}\n\tif (v.x < min_x || v.x > max_x || v.y < min_y || v.y > max_y)\n\t\treturn -1;\n\n\tmax_x -= min_x; max_x *= 2;\n\tmax_y -= min_y; max_y *= 2;\n\tmax_x += max_y;\n\n\tvec e;\n\twhile (1) {\n\t\tcrosses = 0;\n\t\t\n\t\te.x = v.x + (1 + rand() / (RAND_MAX + 1.)) * max_x;\n\t\te.y = v.y + (1 + rand() / (RAND_MAX + 1.)) * max_x;\n\n\t\tfor (i = 0; i < p->n; i++) {\n\t\t\tk = (i + 1) % p->n;\n\t\t\tintersectResult = intersect(v, e, p->v[i], p->v[k], tol, 0);\n\n\t\t\t\n\t\t\tif (!intersectResult) break;\n\n\t\t\tif (intersectResult == 1) crosses++;\n\t\t}\n\t\tif (i == p->n) break;\n\t}\n\treturn (crosses & 1) ? 1 : -1;\n}\n\nint main()\n{\n\tvec vsq[] = {\t{0,0}, {10,0}, {10,10}, {0,10},\n\t\t\t{2.5,2.5}, {7.5,0.1}, {7.5,7.5}, {2.5,7.5}};\n\n\tpolygon_t sq = { 4, vsq }, \n\t\tsq_hole = { 8, vsq }; \n\n\tvec c = { 10, 5 }; \n\tvec d = { 5, 5 };\n\n\tprintf(\"%d\\n\", inside(c, &sq, 1e-10));\n\tprintf(\"%d\\n\", inside(c, &sq_hole, 1e-10));\n\n\tprintf(\"%d\\n\", inside(d, &sq, 1e-10));\t\n\tprintf(\"%d\\n\", inside(d, &sq_hole, 1e-10));  \n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\nfunction getIntersectionPoint($funcA $funcB, $a1, $b1, $a2, $b2) {\n\n    if ($a1==$a2 && $b1===$b2){\n        return NULL;\n    }\n\n   $m12 = (($b2-$b1)*(($a1 -$a2) )/(($b1-$b2)*( $a1 -$a2 ));\n    $m13 = (($a1-$a2)*( $b2-$b1) /( $b1-$b2 ));\n\n    list($u,$v)=getCoordinate($funcA, $a1, $b1);\n    if ($u==NULL){\n        return NULL;\n    }\n    $zvalue =$v+$u*$m13;\n    $zvalue = round($zvalue); //round off Z-value to integer value\n\n    $u=$v=$zvalue; //set u,v,z as new variables containing computed X,Y values of intersection point.\n\n    $x1=$a1;$cX=$m13*(($o1*$u)-(($o3*$a1)/(($o3-$o1)))));\n    $x2=$a2;$cY=$m13*(($o2*$v)+(($o3*$a2)/( (($o3-$o1)$($v-$y)))))));\n    $x=(int)(($o3*$x)+$cX);$y=$(int)(($o3*$y)-$cY);\n\n    if ($x==NULL or $y==NULL ){\n        return NULL;\n    }\n\n    return array($x.$v,$y.$zvalue);\n\n}\n\n\n\nfunction getCoordinate($fun, $ax, $ay){\n\n    if ($fun==\"lin\" ){\n\n        $bx=((($ax+$ay)*((($ay>$bx)?(-1):1))/(($ax<$by)?(1):-1))+($ax);\n\n\n\n        $cx=$((($ax+$bx)*((($by>$cx)?(-1):1))/((($ax<$by)?(1):-1))+($by)));\n\n\n\n\n\n        $ux=$cx*(($ay-$by)*((($ay>$cx)?(-1):1))/(($ax<$by)?(1):-1))-($ax);\n        $uy=$cu=$cx*((($oy-$cy)*((($oy>$cx)?(-1):1))/(($ax<$by)?(1):-1))+($by));\n\n\n        return array($ux,$uy);\n\n\n\n\n    }\n\n\n    elseif ($fun ==\"col\"){\n\n        $bz=((($bx+$cx)*((($cx>$by)?(-1):1))/(($ax<$by)?(1):-1))+($bx));\n\n\n        $cv=((($cx+$bz)*((($by>$cz)?(-1):1))/(($ax<$by)?(1):-1))+($cx);\n\n\n\n        $ux=$bv=((($av-$bc)*((($ab>$cd)?(-1):1))/(($ac>$ad))?(-1):1))*(((($bu-$bv)*($vx+$(uv*=-(($av>=$(bc)|$(bd<=cb)))?1:0))+(($vu-=$(uv*=-(($av>=$(bc)|$(bd<=cb)))?1:0))*(($co-$cr)==(($cp-$cl)?1:(0)))), ((($bv+=($(au=-$(ba)>$(bb))?1:0))+(($bv/=-(($av>=$(bc)|$(bd<=cb)))?1:0))*(($ci-$cl)!=1)), $(vi))), $(uv))); \n\n\n        $vy=$vu;\n\n\n        return array($ux,$vy);\n\n    }\n\n\n\n    else{\n\n\n        $h1=\"M\".($x.\" \".($y+\"H\").\"(C \". ($v*.05). \"().\". ($w*\"S\")).\");\"\n        $h2=\"L\".($x+\"H\")(($v*.05)).(\"C \". (($w*-($v*.05))/2.\"S\")+($w/\"2\".\"(\".($v*.05).\"))).(\".($v*.05)\". (\"C \". (($w*-($v*.05))/2.\"S\")+($w/\"2\".\".\".($v*.05))).(\"/\"));\"\n\n        $fnt=array(\n            'font-fullwidth' => false,\n            'font-name' => 'DejaVu Sans',\n            'fill-mode' => 'open',\n           'stroke-width' => 1,\n            'line-dash-offset' => 0,\n            'line-cap' => 'butt'\n        );\n\n\n\n\n        $pnt=array();\n        foreach(array_sum($h1,...$h2) as $key=>$val){\n            \n            if(isset($pnt[$key])){\n                $pnt[$key]=$pnt[$key].\"(\"+$val+\")\";\n            }else{$pnt[$key]=\"\"+$val+\".\";}\n        }\n\n        preg_match_all('/([a-zA",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 34,
    "input": "Translate C to Java:#include <stdio.h>\n\n\nint mul_inv(int a, int b)\n{\n\tint b0 = b, t, q;\n\tint x0 = 0, x1 = 1;\n\tif (b == 1) return 1;\n\twhile (a > 1) {\n\t\tq = a / b;\n\t\tt = b, b = a % b, a = t;\n\t\tt = x0, x0 = x1 - q * x0, x1 = t;\n\t}\n\tif (x1 < 0) x1 += b0;\n\treturn x1;\n}\n\nint chinese_remainder(int *n, int *a, int len)\n{\n\tint p, i, prod = 1, sum = 0;\n\n\tfor (i = 0; i < len; i++) prod *= n[i];\n\n\tfor (i = 0; i < len; i++) {\n\t\tp = prod / n[i];\n\t\tsum += a[i] * mul_inv(p, n[i]) * p;\n\t}\n\n\treturn sum % prod;\n}\n\nint main(void)\n{\n\tint n[] = { 3, 5, 7 };\n\tint a[] = { 2, 3, 2 };\n\n\tprintf(\"%d\\n\", chinese_remainder(n, a, sizeof(n)/sizeof(n[0])));\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.math.BigInteger;\n\npublic class ChineseRemainderTheorem {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(chineseResting(33_000_001, 11));\n    }\n\n    \n    private static BigInteger[][] solve(BigInteger[] m, BigInteger[] d) {\n        if(m.length!= d.length){\n            throw new IllegalArgumentException(\"Not enough digits\");\n        }\n        \n        int n = m.length;\n        BigInteger[][] ans = new BigInteger[d.length][];\n        for (int i=0;i<d.length;i++){\n            ans[i] = new BigInteger[n+1][];\n            for (int j=i;j>=0;j--){\n                ans[i][j]=BigInteger.valueOf(d[j]);\n                if ((double)n*(n-1))/2 >= j && (double)i-j <= j*4/13)){\n                    ans[i][j]+=ans[(i-1)%10][((i+j)-1)%30]; \n                } else {\n                    \n                    ans[i][j]=m[i].multiply(new BigInteger(j-i).subtract(BigInteger.ONE)).modPow(d[i], BigInteger.intValue(i));  \n                }\n                \n            }\n            \n        }\n        return ans;\n    }\n\n    \n    \n    \n    private static BigInteger[][] getDigits(BigInteger[] num) {\n        assert num.length%2==0 : \"Odd length is required\";\n        \n        \n        BigInteger[][] result = new BigInteger[num.length][];;\n        for (int i=num.length-1;i>=0;i--) {\n            \n            \n            Integer digitLength = Math.ceil(Math.log(num.doubleValue())/Math.log(2))*2 + 1 ;\n           \n           result[i]=(new BigInteger[]{num.subList(0,i+1,digitLength)));\n           if (!result[i].isEmpty()) num.setDouble(i,num.getDouble()/(digitLength-1)) ;   \n       }\n      return result;\n   }\n\n    \n    \n    private static String convertToRoman(BigInteger[] roman) {\n        StringBuilder sb=new StringBuilder();\n        for (Integer key:roman.keySet()){\n            while(sb.charAt(key-digitLength-key)=key){ \n\n                \n                \n                sb.append(Character.toChars(key-digitLength-(key!=0)?1:key))\n                    .appendCharacter(' ')\n                      .append(Integer.toString(key),true);\n             }\n             \n             \n\n            key-=key!=0?1:(key+=key!=0? 1 : -1); digitLength=key-digitLength;\n            sb.insert(0,'.'+(digitLength-1));\n\n         }\n     return sb.toString();\n\n}\n\n\nprivate static BigInteger[][] calcChineses(BigInteger[] m, BigInteger[] d)throws Exception {\n        final int limit = (int)Math.sqrt(m[0]);\n\n        \n        \n        \n        BigInteger[][] answer = null;\n        try {\n            answer=solve(m,d);\n\n            \n\n            BigInteger maxD=d.max(m).add(BigInteger.ONE).divide(limit).toLong();  \n\n            BigInteger[] modul = new BigInteger[maxD.intValue()];\n            for (int k=0;k<maxD.intValue();++k ) {\n                modul[k]=m.longValue()*pow(k,k)*limit%m.digitsOfPrecision();\n            }\n\n\n            BigInteger[] result = new BigInteger[modul.length];\n            for (int i=result.length-1;i>=(answer.length-1);i--)\n                result[i]=getDigit(modul[i]));\n            result[result.length-1]=convertToRoman(result);\n            answer=m.clone().addAll(result);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw(e);\n        }\n        return answer;\n    }\n\n    private static long pow(long base,long exp) {\n        long result = 1L;\n        while (exp!= 0) {\n            if ((exp & 1) == 1) result *= base;\n            base *= base;\n            exp >>= 1;\n        }\n        return result;\n    }\n\n}",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 35,
    "input": "Translate C++ to Java:#include <iostream>\n#include <functional>\n#include <map>\n#include <vector>\n\nstruct Node {\n    int length;\n    std::map<char, int> edges;\n    int suffix;\n\n    Node(int l) : length(l), suffix(0) {\n        \n    }\n\n    Node(int l, const std::map<char, int>& m, int s) : length(l), edges(m), suffix(s) {\n        \n    }\n};\n\nconstexpr int evenRoot = 0;\nconstexpr int oddRoot = 1;\n\nstd::vector<Node> eertree(const std::string& s) {\n    std::vector<Node> tree = {\n        Node(0, {}, oddRoot),\n        Node(-1, {}, oddRoot)\n    };\n    int suffix = oddRoot;\n    int n, k;\n\n    for (size_t i = 0; i < s.length(); ++i) {\n        char c = s[i];\n        for (n = suffix; ; n = tree[n].suffix) {\n            k = tree[n].length;\n            int b = i - k - 1;\n            if (b >= 0 && s[b] == c) {\n                break;\n            }\n        }\n\n        auto it = tree[n].edges.find(c);\n        auto end = tree[n].edges.end();\n        if (it != end) {\n            suffix = it->second;\n            continue;\n        }\n        suffix = tree.size();\n        tree.push_back(Node(k + 2));\n        tree[n].edges[c] = suffix;\n        if (tree[suffix].length == 1) {\n            tree[suffix].suffix = 0;\n            continue;\n        }\n        while (true) {\n            n = tree[n].suffix;\n            int b = i - tree[n].length - 1;\n            if (b >= 0 && s[b] == c) {\n                break;\n            }\n        }\n        tree[suffix].suffix = tree[n].edges[c];\n    }\n\n    return tree;\n}\n\nstd::vector<std::string> subPalindromes(const std::vector<Node>& tree) {\n    std::vector<std::string> s;\n\n    std::function<void(int, std::string)> children;\n    children = [&children, &tree, &s](int n, std::string p) {\n        auto it = tree[n].edges.cbegin();\n        auto end = tree[n].edges.cend();\n        for (; it != end; it = std::next(it)) {\n            auto c = it->first;\n            auto m = it->second;\n\n            std::string pl = c + p + c;\n            s.push_back(pl);\n            children(m, pl);\n        }\n    };\n    children(0, \"\");\n\n    auto it = tree[1].edges.cbegin();\n    auto end = tree[1].edges.cend();\n    for (; it != end; it = std::next(it)) {\n        auto c = it->first;\n        auto n = it->second;\n\n        std::string ct(1, c);\n        s.push_back(ct);\n\n        children(n, ct);\n    }\n\n    return s;\n}\n\nint main() {\n    using namespace std;\n\n    auto tree = eertree(\"eertree\");\n    auto pal = subPalindromes(tree);\n\n    auto it = pal.cbegin();\n    auto end = pal.cend();\n\n    cout << \"[\";\n    if (it != end) {\n        cout << it->c_str();\n        it++;\n    }\n    while (it != end) {\n        cout << \", \" << it->c_str();\n        it++;\n    }\n    cout << \"]\" << endl;\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.*;\n\npublic class PalindromePermutation {\n\n    public static void main(String[] args){\n        setString(\"this is a test\");\n\n        System.out.println(getString());\n    }\n    \n    private static String getString(){\n        StringBuilder sb = new StringBuilder(\"\");\n        Random r = new Random();\n        int n = 5;\n        for(char ch: \"abcdefghijklmnopqrstuvwxyz\".toCharArray()){\n            int rand = r.nextInt(26)+'a';\n            sb.append(ch);\n            sb.insert(sb.lastIndexOf(ch), Character.valueOf(rand));\n        }\n        return sb.toString();\n    }\n}\n",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 36,
    "input": "Translate C++ to C#:#include <iostream>\n#include <sstream>\n\ntypedef long long bigInt;\n\nusing namespace std;\n\nclass number\n{\npublic:\n    number()                                { s = \"0\"; neg = false; }\n    number( bigInt a )                      { set( a ); }\n    number( string a )                      { set( a ); }\n    void set( bigInt a )                    { neg = false; if( a < 0 ) { a = -a; neg = true; } ostringstream o; o << a; s = o.str(); clearStr(); }\n    void set( string a )                    { neg = false; s = a; if( s.length() > 1 && s[0] == '-' ) { neg = true; } clearStr(); }\n    number operator *  ( const number& b )  { return this->mul( b ); }\n    number& operator *= ( const number& b ) { *this = *this * b; return *this; }\n    number& operator = ( const number& b )  { s = b.s; return *this; }\n    friend ostream& operator << ( ostream& out, const number& a ) { if( a.neg ) out << \"-\"; out << a.s; return out; }\n    friend istream& operator >> ( istream& in, number& a ){ string b; in >> b; a.set( b ); return in; }\n\nprivate:\n    number mul( const number& b )\n    {\n\tnumber a; bool neg = false;\n\tstring r, bs = b.s; r.resize( 2 * max( b.s.length(), s.length() ), '0' );\n\tint xx, ss, rr, t, c, stp = 0;\n\tstring::reverse_iterator xi = bs.rbegin(), si, ri;\n\tfor( ; xi != bs.rend(); xi++ )\n\t{\n\t    c = 0; ri = r.rbegin() + stp;\n\t    for( si = s.rbegin(); si != s.rend(); si++ )\n\t    {\n\t\txx = ( *xi ) - 48; ss = ( *si ) - 48; rr = ( *ri ) - 48;\n\t\tss = ss * xx + rr + c; t = ss % 10; c = ( ss - t ) / 10;\n\t\t( *ri++ ) = t + 48;\n\t    }\n\t    if( c > 0 ) ( *ri ) = c + 48;\n\t    stp++;\n\t}\n\ttrimLeft( r ); t = b.neg ? 1 : 0; t += neg ? 1 : 0;\n\tif( t & 1 ) a.s = \"-\" + r;\n\telse a.s = r;\n\treturn a;\n    }\n\n    void trimLeft( string& r )\n    {\n\tif( r.length() < 2 ) return;\n\tfor( string::iterator x = r.begin(); x != ( r.end() - 1 ); )\n\t{\n\t    if( ( *x ) != '0' ) return;\n\t    x = r.erase( x );\n\t}\n    }\n\n    void clearStr()\n    {\n\tfor( string::iterator x = s.begin(); x != s.end(); )\n\t{\n\t    if( ( *x ) < '0' || ( *x ) > '9' ) x = s.erase( x );\n\t    else x++;\n\t}\n    }\n    string s;\n    bool neg;\n};\n\nint main( int argc, char* argv[] )\n{\n    number a, b;\n    a.set( \"18446744073709551616\" ); b.set( \"18446744073709551616\" );\n    cout << a * b << endl << endl;\n\n    cout << \"Factor 1 = \"; cin >> a;\n    cout << \"Factor 2 = \"; cin >> b;\n    cout << \"Product: = \" << a * b << endl << endl;\n    return system( \"pause\" );\n}\n\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "namespace RosettaCode.Multifactorial\n{\n    using System;\n    using System.Collections.Generic;\n\n    internal static class Program\n    {\n        private static IEnumerable<int> Multifactorial(int n)\n        {\n            if (n <= 0) yield break;\n\n            var y = new Queue<int>();\n            while (true)\n            {\n                int k = n;\n                do\n                {\n                    yield return k;\n                } while ((k -= 1) >= 0);\n\n                if (k == 0)\n                {\n                    \n                    foreach (var i in y)\n                        if (i * i + j * 1 == k)\n                            yield return i;\n\n                    break;\n                }\n                \n                int i = n;\n                do\n                {\n                    k /= 10;\n                    i <<= 1;\n                } while (k > 0);\n                y.Enqueue(i);\n                n = i;\n            }\n        }\n\n        private static void Main(string[] args)\n        {\n            Console.WriteLine(\"First fifteen multifactorial numbers:\");\n            foreach (var mf in Multifactorial(15))\n                Console.Write(\"{0} \",mf); \n            Console.WriteLine();\n\n            Console.WriteLine(\"\\nNumbers from 1000 through 1100\");\n            foreach (var mf in Multifactorial(1000).TakeWhile(n => n <= 1000))\n                Console.Write(\"{0} \",mf); \n            Console.WriteLine();\n            \n            Console.WriteLine(\"\\nThe first two under 1200\");\n            foreach (var mf in Multifactorial(1201).TakeWhile(n => n <= 1200))\n                Console.Write(\"{0} \",mf); \n            Console.WriteLine();\n        }\n    }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 37,
    "input": "Translate C to C++:#include <stdlib.h>\n#include <stdio.h>\n\n#define SWAP(a, b) (((a) ^= (b)), ((b) ^= (a)), ((a) ^= (b)))\n\nint jacobi(unsigned long a, unsigned long n) {\n\tif (a >= n) a %= n;\n\tint result = 1;\n\twhile (a) {\n\t\twhile ((a & 1) == 0) {\n\t\t\ta >>= 1;\n\t\t\tif ((n & 7) == 3 || (n & 7) == 5) result = -result;\n\t\t}\n\t\tSWAP(a, n);\n\t\tif ((a & 3) == 3 && (n & 3) == 3) result = -result;\n\t\ta %= n;\n\t}\n\tif (n == 1) return result;\n\treturn 0;\n}\n\nvoid print_table(unsigned kmax, unsigned nmax) {\n\tprintf(\"n\\\\k|\");\n\tfor (int k = 0; k <= kmax; ++k) printf(\"%'3u\", k);\n\tprintf(\"\\n----\");\n\tfor (int k = 0; k <= kmax; ++k) printf(\"---\");\n\tputchar('\\n');\n\tfor (int n = 1; n <= nmax; n += 2) {\n\t\tprintf(\"%-2u |\", n);\n\t\tfor (int k = 0; k <= kmax; ++k)\n\t\t\tprintf(\"%'3d\", jacobi(k, n));\n\t\tputchar('\\n');\n\t}\n}\n\nint main() {\n\tprint_table(20, 21);\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "template<typename T> void swap(T& left, T& right)\n{\n    auto tmp = left;\n    left = right;\n    right = tmp;\n}\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 38,
    "input": "Translate Go to VB:package main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 1; i <= 10; i++ {\n        fmt.Printf(\"%d\", i)\n        if i%5 == 0 {\n            fmt.Printf(\"\\n\")\n            continue\n        }\n        fmt.Printf(\", \")\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Sub WriteACommaSeparatedList()\n    Dim i As Integer\n    Dim a(1 To 10) As String\n    For i = 1 To 10\n        a(i) = CStr(i)\n    Next i\n    Debug.Print Join(a, \", \")\nEnd Sub\n",
    "input_language": "Go",
    "output_language": "VB"
  },
  {
    "id": 39,
    "input": "Translate Java to VB:public class LongMult {\n\n\tprivate static byte[] stringToDigits(String num) {\n\t\tbyte[] result = new byte[num.length()];\n\t\tfor (int i = 0; i < num.length(); i++) {\n\t\t\tchar c = num.charAt(i);\n\t\t\tif (c < '0' || c > '9') {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid digit \" + c\n\t\t\t\t\t\t+ \" found at position \" + i);\n\t\t\t}\n\t\t\tresult[num.length() - 1 - i] = (byte) (c - '0');\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static String longMult(String num1, String num2) {\n\t\tbyte[] left = stringToDigits(num1);\n\t\tbyte[] right = stringToDigits(num2);\n\t\tbyte[] result = new byte[left.length + right.length];\n\t\tfor (int rightPos = 0; rightPos < right.length; rightPos++) {\n\t\t\tbyte rightDigit = right[rightPos];\n\t\t\tbyte temp = 0;\n\t\t\tfor (int leftPos = 0; leftPos < left.length; leftPos++) {\n\t\t\t\ttemp += result[leftPos + rightPos];\n\t\t\t\ttemp += rightDigit * left[leftPos];\n\t\t\t\tresult[leftPos + rightPos] = (byte) (temp % 10);\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\tint destPos = rightPos + left.length;\n\t\t\twhile (temp != 0) {\n\t\t\t\ttemp += result[destPos] & 0xFFFFFFFFL;\n\t\t\t\tresult[destPos] = (byte) (temp % 10);\n\t\t\t\ttemp /= 10;\n\t\t\t\tdestPos++;\n\t\t\t}\n\t\t}\n\t\tStringBuilder stringResultBuilder = new StringBuilder(result.length);\n\t\tfor (int i = result.length - 1; i >= 0; i--) {\n\t\t\tbyte digit = result[i];\n\t\t\tif (digit != 0 || stringResultBuilder.length() > 0) {\n\t\t\t\tstringResultBuilder.append((char) (digit + '0'));\n\t\t\t}\n\t\t}\n\t\treturn stringResultBuilder.toString();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(longMult(\"18446744073709551616\",\n\t\t\t\t\"18446744073709551616\"));\n\t}\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Base 1\n\nPrivate Function Summ(n As Variant) As Double\n    Dim t(1 To n - 1) As Integer\n    For i = 0 To UBound(t)\n        t(i) = WorksheetFunction.SumSquareDiff(i, i + 1)\n    Next i\n    Summ = Application.WorksheetFunction.sum(t)\nEnd Function\n \nPublic Sub Main()\n    Debug.Print Format(Summ(20), \"@@@@\")\nEnd Sub\n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 40,
    "input": "Translate C++ to Java:#include <iostream>\n#include <chrono>\n#include <atomic>\n#include <mutex>\n#include <random>\n#include <thread>\n\nstd::mutex cout_lock;\n\nclass Latch\n{\n    std::atomic<int> semafor;\n  public:\n    Latch(int limit) : semafor(limit) {}\n\n    void wait()\n    {\n        semafor.fetch_sub(1);\n        while(semafor.load() > 0)\n            std::this_thread::yield();\n    }\n};\n\nstruct Worker\n{\n    static void do_work(int how_long, Latch& barrier, std::string name)\n    {\n        std::this_thread::sleep_for(std::chrono::milliseconds(how_long));\n        {   std::lock_guard<std::mutex> lock(cout_lock);\n            std::cout << \"Worker \" << name << \" finished work\\n\";   }\n        barrier.wait();\n        {   std::lock_guard<std::mutex> lock(cout_lock);\n            std::cout << \"Worker \" << name << \" finished assembly\\n\";   }\n    }\n};\n\nint main()\n{\n    Latch latch(5);\n    std::mt19937 rng(std::random_device{}());\n    std::uniform_int_distribution<> dist(300, 3000);\n    std::thread threads[] {\n        std::thread(&Worker::do_work, dist(rng), std::ref(latch), \"John\"),\n        std::thread{&Worker::do_work, dist(rng), std::ref(latch), \"Henry\"},\n        std::thread{&Worker::do_work, dist(rng), std::ref(latch), \"Smith\"},\n        std::thread{&Worker::do_work, dist(rng), std::ref(latch), \"Jane\"},\n        std::thread{&Worker::do_work, dist(rng), std::ref(latch), \"Mary\"},\n    };\n    for(auto& t: threads) t.join();\n    std::cout << \"Assembly is finished\";\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.Random;\n...\npublic class Main {\n\n\tpublic static boolean randTrue(){\n\t\treturn (new Random().nextBoolean());\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\t\n\t\tint trueRate = 0.4; \n\t\tfor(int runs=10000;runs>=100;i++){\n\t\t\tRandom gen = new Random();\n\t\t\t\n\t\t\tboolean random = false;\n\t\t\tfor(int time = 0;time<runs;time++){\n\t\t\t\trandom = randTrue();  \n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttrueRate = 100.0*trueRate/float(time >= runs-1? runs : time);            \n\t\t\tSystem.out.println(trueRate + \"% of the times a True value was generated between 0 and 9 was less than or equal to a randomly generated Boolean\");\n\t\t}\n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 41,
    "input": "Translate Java to Go:import java.util.ArrayList;\nimport java.util.List;\n\npublic class SquareFree\n{\n    private static List<Long> sieve(long limit) {\n        List<Long> primes = new ArrayList<Long>();\n        primes.add(2L);\n        boolean[] c = new boolean[(int)limit + 1]; \n        \n        long p = 3;\n        for (;;) {\n            long p2 = p * p;\n            if (p2 > limit) break;\n            for (long i = p2; i <= limit; i += 2 * p) c[(int)i] = true;\n            for (;;) {\n                p += 2;\n                if (!c[(int)p]) break;\n            }\n        }\n        for (long i = 3; i <= limit; i += 2) {\n            if (!c[(int)i]) primes.add(i);\n        }\n        return primes;\n    }\n\n    private static List<Long> squareFree(long from, long to) {\n        long limit = (long)Math.sqrt((double)to);\n        List<Long> primes = sieve(limit);\n        List<Long> results = new ArrayList<Long>();\n\n        outer: for (long i = from; i <= to; i++) {\n            for (long p : primes) {\n                long p2 = p * p;\n                if (p2 > i) break;\n                if (i % p2 == 0) continue outer;\n            }\n            results.add(i);\n        }\n        return results;\n    }\n\n    private final static long TRILLION = 1000000000000L;\n\n    public static void main(String[] args) {\n        System.out.println(\"Square-free integers from 1 to 145:\");\n        List<Long> sf = squareFree(1, 145);\n        for (int i = 0; i < sf.size(); i++) {\n            if (i > 0 && i % 20 == 0) {\n                System.out.println();\n            }\n            System.out.printf(\"%4d\", sf.get(i));\n        }\n\n        System.out.print(\"\\n\\nSquare-free integers\");\n        System.out.printf(\" from %d to %d:\\n\", TRILLION, TRILLION + 145);\n        sf = squareFree(TRILLION, TRILLION + 145);\n        for (int i = 0; i < sf.size(); i++) {\n            if (i > 0 && i % 5 == 0) System.out.println();\n            System.out.printf(\"%14d\", sf.get(i));\n        }\n\n        System.out.println(\"\\n\\nNumber of square-free integers:\\n\");\n        long[] tos = {100, 1000, 10000, 100000, 1000000};\n        for (long to : tos) {\n            System.out.printf(\"  from %d to %d = %d\\n\", 1, to, squareFree(1, to).size());\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPrime(n int) bool {\n\tif n < 0 {\n\t\tn = -n\n\t}\n\treturn n == 2 || n == 3 || n == 5 || n == 7\n}\n\n\ntype primeFactors []prime\n\n\nconst defaultCount = 10 \n\n\nvar allPrimes [2000010]int\n\n\n\nfunc getFactorial(count int) primeFactors {\n\tvar factors prime\n\tfor x := count; ; do {\n\t\tfactors = append(factors, prime{count})\n\t\tcount++\n\t\tx -= 1\n\t\tif!isPrime(x) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn factors\n}\n\n\n\nfunc printAll(primeFactors primeFactors, prefix string) {\n\tfmt.Printf(prefix)\n\tfor _, f := range primeFactors {\n\t\tfmt.Print(\"x\")\n\t}\n\tfmt.Println()\n}\n\n\n\n\nfunc commatize(s string) string {\n\ts = fmt.Sprintf(\"%.g\", s)\n\tif len(s) >= 19 {\n\t\ts = s[0:18] + \"...\"\n\t}\n\treturn s\n}\n\n\n\n\n\nfunc main() {\n\t\n\tallPrimes[0] = prime{0} \n\tnextSize := 1\n\t\n\tfor index := 1; ; {\n\t\t\n\t\tprimer := allPrimes[nextSize-1]\n\t\tnextSize++\n\t\tallPrimes.nextIndex = nextSize\n\t\t\n\t\tsumOfPowers := primer.count*primer.prime.ppow(int64(primer.count))\n\t\tfor i := sumOfPowers / 2; i >= 9; i-- {\n\t\t\tpower := primer.ppow(int64(i), 2)\n\t\t\t\n\t\t\tfor j := power/2; j >= 9; j -= 2 {\n\t\t\t\tpow := power/pow\n\t\t\t\tif pow%2 == 0 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsumOfPowers = primer.ppow(sumOfPowers+power, 2)+sumOfPowers/power\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tif sumOfPowers%i!= 0 {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tevenSum := sumOfPowers/(primer.count*i)-primers[i].count*(priner.count-i)/2\n\t\t\t\tif evenSum<8 {\n\t\t\t\t\t\n\t\t\t\t\tevenPower := primer.ppow(evenSum, 2)*evenEven +\n\t\t\t\t\t\tprimer.ppow(((total-prime.count)*(evenSum)%2), 2)+\n\t\t\t\t\t\tprimer.ppow((evenSum-(evenPow-pow))/2,\n\t\t\t\t\t\t\t2)+(evenPow-power)/2+\n\t\t\t\t\t\tprimer.ppow(power, 2)\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif total==evenPower &&\n\t\t\t\t\t\ti!=0 &&\n\t\t\t\t\t\ttotal-einsum == primers[i-1].count {\n\t\t\t\t\t\t\n\t\t\t\t\t\tj = i\n\t\t\t\t\t\tfor k := power; k>=9;k-=2){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif pow+k*pow == evenPower/k+powno{k,pow}{\n\t\t\t\t\t\t\t\tk=power\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tpow=k*pow\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif pow<=6 {\n\t\t\t\t\t\t\tpower+=1\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==11 {\n\t\t\t\t\t\t\tpower:=2\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==12 {\n\t\t\t\t\t\t\tpower:=13\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==15 {\n\t\t\t\t\t\t\tpower:=17\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==16 {\n\t\t\t\t\t\t\tpower:=18\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==21 {\n\t\t\t\t\t\t\tpower:=22\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==24 {\n\t\t\t\t\t\t\tpower:=25\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==27 {\n\t\t\t\t\t\t\tpower:=28\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==30 {\n\t\t\t\t\t\t\tpower:=31\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==36 {\n\t\t\t\t\t\t\tpower:=37\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==42 {\n\t\t\t\t\t\t\tpower:=43\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==48 {\n\t\t\t\t\t\t\tpower:=49\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==54 {\n\t\t\t\t\t\t\tpower:=55\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==60 {\n\t\t\t\t\t\t\tpower:=61\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==66 {\n\t\t\t\t\t\t\tpower:=67\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==72 {\n\t\t\t\t\t\t\tpower:=73\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==78 {\n\t\t\t\t\t\t\tpower:=79\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==84 {\n\t\t\t\t\t\t\tpower:=85\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==90 {\n\t\t\t\t\t\t\tpower:=91\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==96 {\n\t\t\t\t\t\t\tpower:=97\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==102 {\n\t\t\t\t\t\t\tpower:=103\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==108 {\n\t\t\t\t\t\t\tpower:=109\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==114 {\n\t\t\t\t\t\t\tpower:=115\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==120 {\n\t\t\t\t\t\t\tpower:=121\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==126 {\n\t\t\t\t\t\t\tpower:=127\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==132 {\n\t\t\t\t\t\t\tpower:=133\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==138 {\n\t\t\t\t\t\t\tpower:=139\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif power==144 {\n\t\t\t\t\t\t\tpower",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 42,
    "input": "Translate Python to Go:from itertools import izip\n\ndef gen_row(w, s):\n    \n    def gen_seg(o, sp):\n        if not o:\n            return [[2] * sp]\n        return [[2] * x + o[0] + tail\n                for x in xrange(1, sp - len(o) + 2)\n                for tail in gen_seg(o[1:], sp - x)]\n\n    return [x[1:] for x in gen_seg([[1] * i for i in s], w + 1 - sum(s))]\n\n\ndef deduce(hr, vr):\n    \n    def allowable(row):\n        return reduce(lambda a, b: [x | y for x, y in izip(a, b)], row)\n\n    def fits(a, b):\n        return all(x & y for x, y in izip(a, b))\n\n    def fix_col(n):\n        \n        c = [x[n] for x in can_do]\n        cols[n] = [x for x in cols[n] if fits(x, c)]\n        for i, x in enumerate(allowable(cols[n])):\n            if x != can_do[i][n]:\n                mod_rows.add(i)\n                can_do[i][n] &= x\n\n    def fix_row(n):\n        \n        c = can_do[n]\n        rows[n] = [x for x in rows[n] if fits(x, c)]\n        for i, x in enumerate(allowable(rows[n])):\n            if x != can_do[n][i]:\n                mod_cols.add(i)\n                can_do[n][i] &= x\n\n    def show_gram(m):\n        \n        \n        for x in m:\n            print \" \".join(\"x\n        print\n\n    w, h = len(vr), len(hr)\n    rows = [gen_row(w, x) for x in hr]\n    cols = [gen_row(h, x) for x in vr]\n    can_do = map(allowable, rows)\n\n    \n    mod_rows, mod_cols = set(), set(xrange(w))\n\n    while mod_cols:\n        for i in mod_cols:\n            fix_col(i)\n        mod_cols = set()\n        for i in mod_rows:\n            fix_row(i)\n        mod_rows = set()\n\n    if all(can_do[i][j] in (1, 2) for j in xrange(w) for i in xrange(h)):\n        print \"Solution would be unique\" \n    else:\n        print \"Solution may not be unique, doing exhaustive search:\"\n\n    \n    \n    \n    out = [0] * h\n\n    def try_all(n = 0):\n        if n >= h:\n            for j in xrange(w):\n                if [x[j] for x in out] not in cols[j]:\n                    return 0\n            show_gram(out)\n            return 1\n        sol = 0\n        for x in rows[n]:\n            out[n] = x\n            sol += try_all(n + 1)\n        return sol\n\n    n = try_all()\n    if not n:\n        print \"No solution.\"\n    elif n == 1:\n        print \"Unique solution.\"\n    else:\n        print n, \"solutions.\"\n    print\n\n\ndef solve(p, show_runs=True):\n    s = [[[ord(c) - ord('A') + 1 for c in w] for w in l.split()]\n         for l in p.splitlines()]\n    if show_runs:\n        print \"Horizontal runs:\", s[0]\n        print \"Vertical runs:\", s[1]\n    deduce(s[0], s[1])\n\n\ndef main():\n    \n    fn = \"nonogram_problems.txt\"\n    for p in (x for x in open(fn).read().split(\"\\n\\n\") if x):\n        solve(p)\n\n    print \"Extra example not solvable by deduction alone:\"\n    solve(\"B B A A\\nB B A A\")\n\n    print \"Extra example where there is no solution:\"\n    solve(\"B A A\\nA A A\")\n\nmain()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"strconv\"\n)\n\n\ntype cell struct {\n\trow, col int\n\tvalue    string\n}\n\nfunc newCell(r, c int) cell {\n\tif r < 0 || r > 9 || c < 0 || c > 10 {\n\t\tpanic(\"invalid position\")\n\t}\n\treturn cell{row: r, col: c, value: \"\"}\t\n}\n\n\nvar cells []cell\n\n\n\n\nconst(\n\twrapSpace = strings.Repeat(\" \", 20*11-3)\n)\n\n\n\nfunc checkOne(cell cell) bool {\n\tswitch {c := cell.col; r := cell.row}{\n\tcase r%wrapSize == wrapSpace{\n\t\t\n\t\tfor _, dr := range []int{-c, c}{-dr,c} {\n\t\t\tif!strings.ContainsRune(strings.ReplaceAll(fmt.Sprint(cell.value),'', wrapSpace), dr){\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}, r-wrapSize/2 <= wrapSpaceLen{\n\t\t\t\n\t\t\tcell.value[wrpSpaceLen-rwrapSize+2]*=2,\n\t\t\tr % wrapSize == wrapSpaceLen-2||r%wrapSize==wrapSpaceLen-1&&cell.value[rwrapSize+r+1]=='':return true:{\n\t\t\t\t\n\t\t\t\t\tvar t int\n\t\t\t\t\tt = strings.IndexAny(string([]byte(cell.value[:wrapSize]),dr),' ')\n\t\t\t\t\t\n\t\t\t\t\tif t>=0{return true}}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tdefault:return false}}return false}\n\n\n\nfor _, rw := range [][]cell{{newCell(-1,-1)}, {newCell(-1, 0)}} {\n\tcells = append(cells,rw...)\n}\n\n\n\n\ncells[0].value = strconv.Itoa(cells[0].col)+cells[0].value\n\n\n\nt := 0\nfor _, rw := range [][]cell{{newCell(0, -1)}{}...{newCell(9,-1)}} {\n\tsol := make(map[int]int)\n\tsol[rw[0].col]=rw[0].value\n\t\n\tfor k := range(sol ) {\n\t\tif checkOne(k) {\n\t\t\tt++\n\t\t\tbreak\n\t\t}\n\t}\n}\n\n\n\n\n\nfmt.Println(t)\n\n\n\n\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 43,
    "input": "Translate PHP to Python:<?php\n$pairs = array( \"hello\" => 1,\n\t\t\"world\" => 2,\n\t\t\"!\"     => 3 );\n\nforeach($pairs as $k => $v) {\n  echo \"(k,v) = ($k, $v)\\n\";\n}\n\nforeach(array_keys($pairs) as $key) {\n  echo \"key = $key, value = $pairs[$key]\\n\";\n}\n\nforeach($pairs as $value) {\n  echo \"values = $value\\n\";\n}\n?>\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> pairs = [('foo', 'bar'), ('baz', 'foz')]\n>>> def setup():\n    rep = ', '.join('{}'.format(t) for t in pairs)\n    println(rep)\n\n\t\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 44,
    "input": "Translate C to C#:int rand5()\n{\n\tint r, rand_max = RAND_MAX - (RAND_MAX % 5);\n\twhile ((r = rand()) >= rand_max);\n\treturn r / (rand_max / 5) + 1;\n}\n \nint rand5_7()\n{\n\tint r;\n\twhile ((r = rand5() * 5 + rand5()) >= 27);\n\treturn r / 3 - 1;\n}\n\nint main()\n{\n\tprintf(check(rand5, 5, 1000000, .05) ? \"flat\\n\" : \"not flat\\n\");\n\tprintf(check(rand7, 7, 1000000, .05) ? \"flat\\n\" : \"not flat\\n\");\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace RandomNumbers {\n    class Program {\n        static bool check(Random random, int type, double range) {\n            if (range == 1) {\n                return random.Next(0, 2) == 0;\n            }\n            else {\n                var value = random.NextDouble();\n                return value < range / (double)type;\n            }\n        }\n\n        const int NUM_TESTS = 20000; \n\n        static void Main(string[] args) {\n            foreach (var type in new [] { 2, 3 }) {\n                Console.WriteLine(\"Type: {0}\", type);\n\n                var ranges = new [] { 1, 1 };\n                if (type > 1) {\n                    ranges.AddRange(new int[] { 1f, 10 });\n                }\n\n                foreach (var count in new [] { 5000, 50, 1 }) {\n                    var list = new List<int>();\n                    foreach (var rnd in Enumerable.Repeat(random, count)) {\n                        if (check(random, type, ranges[1] - ranges[0])) {\n                            list.Add(type);\n                        }\n                    }\n                    Console.Write(\"{0} generated by a generator of [{1}, {2}] are positive. \", count, ranges[0], ranges[1]);\n                    Console.WriteLine(list.Count == 1? \"{0,4:n0}\" : string.Join(\", \",\n                                list.Select(i => $\"{i,-6}.\"));\n                    Console.WriteLine(\"\\nPress any key to continue...\");\n                    Console.ReadKey();\n                }\n                \n                Console.WriteLine(\"\");\n            }\n        }\n    }\n}\n",
    "input_language": "C",
    "output_language": "C#"
  },
  {
    "id": 45,
    "input": "Translate PHP to Go:#!/usr/bin/env php\nThe 24 Game\n \nGiven any four digits in the range 1 to 9, which may have repetitions,\nUsing just the +, -, *, and / operators; and the possible use of\nbrackets, (), show how to make an answer of 24.\n \nAn answer of \"q\" will quit the game.\nAn answer of \"!\" will generate a new set of four digits.\nOtherwise you are repeatedly asked for an expression until it evaluates to 24\n \nNote: you cannot form multiple digit numbers from the supplied digits,\nso an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.\n\n<?php\n\nwhile (true) {\n    $numbers = make_numbers();\n\n    for ($iteration_num = 1; ; $iteration_num++) {\n        echo \"Expresion $iteration_num: \";\n\n        $entry = rtrim(fgets(STDIN));\n\n        if ($entry === '!') break;\n        if ($entry === 'q') exit;\n\n        $result = play($numbers, $entry);\n\n        if ($result === null) {\n            echo \"That's not valid\\n\";\n            continue;\n        }\n        elseif ($result != 24) {\n            echo \"Sorry, that's $result\\n\";\n            continue;\n        }\n        else {\n            echo \"That's right! 24!!\\n\";\n            exit;\n        }\n    }\n}\n\nfunction make_numbers() {\n    $numbers = array();\n\n    echo \"Your four digits: \";\n\n    for ($i = 0; $i < 4; $i++) {\n        $number = rand(1, 9);\n\n        if (!isset($numbers[$number])) {\n            $numbers[$number] = 0;\n        }\n        $numbers[$number]++;\n        print \"$number \";\n    }\n\n    print \"\\n\";\n\n    return $numbers;\n}\n\nfunction play($numbers, $expression) {\n    $operator = true;\n    for ($i = 0, $length = strlen($expression); $i < $length; $i++) {\n        $character = $expression[$i];\n\n        if (in_array($character, array('(', ')', ' ', \"\\t\"))) continue;\n\n        $operator = !$operator;\n\n        if (!$operator) {\n            if (!empty($numbers[$character])) {\n                $numbers[$character]--;\n                continue;\n            }\n            return;\n        }\n        elseif (!in_array($character, array('+', '-', '*', '/'))) {\n            return;\n        }\n    }\n\n    foreach ($numbers as $remaining) {\n        if ($remaining > 0) {\n            return;\n        }\n    }\n    \n    return eval(\"return $expression;\");\n}\n?>\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isNumeric(s string) bool {\n\ti, err := strconv.Atoi(s)\n\treturn err == nil\n}\n\n\nvar tests = []struct{ str, want int }{\n\t{\"1\", 1},\n\t{\"1.5\", 1},\n\t{\"1.33\",.3333},\n\t{\"1.5e-1\", -1 },\n\t{\"1/4\", -.25},\n\t{\"1\", 1},\n\t{\"11.\", 11},\n\t{\"111., 111.1\"},\n\t{\"115.32\", 115.32},\t\n\t{\"NaN\", NaN},\n\t{\"−∞\", -∞},\n\t{\"ǂ−∞\", −∞},\n}\n\nfunc main() {\n\tfor _, t := range tests {\n\t\tif result := isNumeric(t.str); result!= t.want {\n\t\t\tfmt.Println(\"Error: The following test is incorrect:\", t)\n\t\t\tfmt.Printf(\"   %v vs expect %d\\n\",\n\t\t\t\tresult, t.want)\n\t\t\tcontinue\n\t\t} else { fmt.Print(\"correct!\") }\n\t}\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 46,
    "input": "Translate PHP to Python:function stoogeSort(&$arr, $i, $j)\n{\n\tif($arr[$j] < $arr[$i])\n\t{\n\t\tlist($arr[$j],$arr[$i]) = array($arr[$i], $arr[$j]);\n\t}\n\tif(($j - $i) > 1)\n\t{\n\t\t$t = ($j - $i + 1) / 3;\n\t\tstoogesort($arr, $i, $j - $t);\n\t\tstoogesort($arr, $i + $t, $j);\n\t\tstoogesort($arr, $i, $j - $t);\n\t}\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def quicksort(a):\n    low = 0\n    high = len(a)-1\n\n    \n    while(low <= high):\n        listlow = low\n        listhigh = high\n        for i in range(1,len(a))-1:\n            if a[listlow]+a[listhigh]<0: \n                listlow+=1\n            elif a[listlow]+a[listhigh]>0: \n                listhigh-=1\n            else:\n                tmp=a[listlow]\n                a[listlow]=a[listhigh]\n                a[listhigh]=tmp\n                listlow=listlow+1\n                listhigh=listhigh-1\n        if listlow<=listhigh:\n            \n            low=listlow\n        else:\n            \n            high=listhigh\n        if low>=high:\n            \n            \n            break\n        \n    return a[:low]+a[low:end]\n\nprint quicksort([7, 15, 2, 10, -5, 4, 8, 13])\n\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 47,
    "input": "Translate C to C#:#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <time.h>\n\n#define MAX_N 20\n#define TIMES 1000000\n\ndouble factorial(int n) {\n\tdouble f = 1;\n\tint i;\n\tfor (i = 1; i <= n; i++) f *= i;\n\treturn f;\n}\n\ndouble expected(int n) {\n\tdouble sum = 0;\n\tint i;\n\tfor (i = 1; i <= n; i++)\n\t\tsum += factorial(n) / pow(n, i) / factorial(n - i);\n\treturn sum;\n}\n\nint randint(int n) {\n\tint r, rmax = RAND_MAX / n * n;\n\twhile ((r = rand()) >= rmax);\n\treturn r / (RAND_MAX / n);\n}\n\nint test(int n, int times) {\n\tint i, count = 0;\n\tfor (i = 0; i < times; i++) {\n\t\tint x = 1, bits = 0;\n\t\twhile (!(bits & x)) {\n\t\t\tcount++;\n\t\t\tbits |= x;\n\t\t\tx = 1 << randint(n);\n\t\t}\n\t}\n\treturn count;\n}\n\nint main(void) {\n\tsrand(time(0));\n\tputs(\" n\\tavg\\texp.\\tdiff\\n-------------------------------\");\n\n\tint n;\n\tfor (n = 1; n <= MAX_N; n++) {\n\t\tint cnt = test(n, TIMES);\n\t\tdouble avg = (double)cnt / TIMES;\n\t\tdouble theory = expected(n);\n\t\tdouble diff = (avg / theory - 1) * 100;\n\t\tprintf(\"%2d %8.4f %8.4f %6.3f%%\\n\", n, avg, theory, diff);\n\t}\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace Test {\n    class Program {\n        static void Main(string[] args) {\n            var values = new double[21] { 1., 10., 55., 254., 1655., 31750., 62245., 125925.,\n                2500575., 5625029., 1170250032., 2341824056., 47771891249., 99984077763.,\n                209590782437., 4195915660097., 8586558379009., 16912810350040L, 33824112760090L,\n                67648413930080L, 13492870780095L, 27109711840009L, 55319452970060L, 11139070320000L };\n            \n            foreach (var v in values) {\n                Console.WriteLine(\"{0:0.000} %, # of digits from 1 to 19\", v, GetDigits(v).Count());\n            }\n        \n        }\n\n        private static string GetDigits(double number) => \n            number.ToString().Split('').Select((b, i) => (\"{0}:\", i)).Aggregate(\n                \"\", (acc, cur) => acc + cur[0] + \" digit(s)\");\n\n    }\n}\n",
    "input_language": "C",
    "output_language": "C#"
  },
  {
    "id": 48,
    "input": "Translate C# to Go:using System;\n\nnamespace Rosetta\n{\n    internal interface IFun\n    {\n        double F(int index, Vector x);\n        double df(int index, int derivative, Vector x);\n        double[] weights();\n    }\n\n    class Newton\n    {                \n        internal Vector Do(int size, IFun fun, Vector start)\n        {\n            Vector X = start.Clone();\n            Vector F = new Vector(size);\n            Matrix J = new Matrix(size, size);\n            Vector D;\n            do\n            {\n                for (int i = 0; i < size; i++)\n                    F[i] = fun.F(i, X);\n                for (int i = 0; i < size; i++)\n                    for (int j = 0; j < size; j++)\n                        J[i, j] = fun.df(i, j, X);\n                J.ElimPartial(F);\n                X -= F;\n                \n            } while (F.norm(fun.weights()) > 1e-12);\n            return X;\n        }       \n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\ntype funcIntPair func(float64) float64\n\n\nfunc f(x float64) funcIntPair {\n\treturn func(y float64) float64 { return funcIntPair(x * y) * x }\n}\n\n\nvar v []float64\n\nfunc newV() []float64 {\n\tv = make([]float64, 10000)\n\tfor i := range v {\n\t\t\tv[i] = math.Pow((i + 2),.5)\n\t}\n\treturn v\n}\n\n\n\nfunc d(f funcIntPair, x float64) [][]float64 {\n\tdf := make([][][]float64, len(v))\n\tfor n, xi := range &v {\n\t\tdf[n] = make([][[float64]]{make(funcIntPair)})\n\t\tfor _, dj := range df[n] {\n\t\t\tdj[0][xi] = f(xi)\n\t\t}\n\t}\n\treturn df\n}\n\n\n\n\nfunc p(a, b funcIntPair, x float64) float64 {\n\tswitch s := a(x); {\n\tcase s == 1:\n\t\treturn x\n\tcase s == 0:\n\t\treturn 0.0\n\tdefault:\n\t\treturn (-x / (a(x)*b(s)))\n\t}\n}\n\n\n\n\n\nfunc ns(n funcIntPair, x float64) float64 {\n\tif n(3)(x) >= -1E+15 {\n\t\treturn -(n(3)(x)) / (n(3)(x)*x)\n\t} else {\n\t\tpanic(\"bad answer\")\n\t}\n}\n\nfunc main() {\n\n\tfmt.Println(\"Newton-Raphson\")\n\n\tvar xs [10]int\n\txs[0] = 50 \n\tfor i := 1; i <= 9; i++ {\n\t\txs[i] = ns(xs[:i], xs[(i-1)+1])\n\t\tfmt.Printf(\"%6.3f\\n\", xs[i])\n\t}\n\t\n\tconst maxIter = 20\n\t\n\tfmt.Print(\"\\nMaxiter=\",maxIter,\" :\\n\") \n\t\n\tf := func(x float64) float64 {return math.Pow(x, 2) * math.Pow(x/2, 2)}\n\ta := func(x float64) float64 {return 1}\n\tb := func(x float64) float64 {return x*x*x/(2*math.pow(x/2, 2))}\n\t\n\t\n\tnf := func(x float64) ([]float64){return nil}\n\tmf := func(x float64) float64 {return math.Sqrt(2*math.Asin(math.Pi*(x/2))))\n\tjm := func(x float64) [[float64]{nil}}\n\t\n\t\n\t\n\tfor iter := 0; iter < maxIter; iter++ {\n\t\t\n\t\tzr := nf(x): zr = append(zr, a(x)): zr = append(zr, b(x)):\n\t\t\n\t\t\n\t\tqr := jm(x): qr = qr + zr\n\t\t\n\t\tfor k := 0; k < len(qr)-1; qrr := qr[k:(k+1)]... \\\n\t\t\tand x = (zr[qrr[0]*2+k]+qz)/2...\n\t\t\n\t\t\n\t\t\n\t\titer++\n\t}\n\t\n\t\n\t\n\t\n\tfmt.Println(ns(newV(), 51))\n\n\tfmt.Println()\n\t\n\tfmt.Print(\"\\nGuess=50 :\\t\" )\n\tfor _, x := range xs : fmt.Println(x, \"ok\"): next_\n\tfmt.Println()\n\n\tfmt.Print(\"\\nGuess=[49,48,47,53,60] :\\t\")\n\tfor _, x := range v[4:] : fmt.Println(x, \"ok\"): next_\n\n\tfmt.Print(\"\\nGuess=(50,51,52) !\\t\")\n\tfor _, x := range xs[:] : fmt.Println(x, \"ok\"): next_  \n\t\n}\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 49,
    "input": "Translate Python to C#:from collections import namedtuple\nimport math\n\nCircle = namedtuple('Circle', 'x, y, r')\n \ndef solveApollonius(c1, c2, c3, s1, s2, s3):\n    \n    x1, y1, r1 = c1\n    x2, y2, r2 = c2\n    x3, y3, r3 = c3\n\n    v11 = 2*x2 - 2*x1\n    v12 = 2*y2 - 2*y1\n    v13 = x1*x1 - x2*x2 + y1*y1 - y2*y2 - r1*r1 + r2*r2\n    v14 = 2*s2*r2 - 2*s1*r1\n \n    v21 = 2*x3 - 2*x2\n    v22 = 2*y3 - 2*y2\n    v23 = x2*x2 - x3*x3 + y2*y2 - y3*y3 - r2*r2 + r3*r3\n    v24 = 2*s3*r3 - 2*s2*r2\n \n    w12 = v12/v11\n    w13 = v13/v11\n    w14 = v14/v11\n \n    w22 = v22/v21-w12\n    w23 = v23/v21-w13\n    w24 = v24/v21-w14\n \n    P = -w23/w22\n    Q = w24/w22\n    M = -w12*P-w13\n    N = w14 - w12*Q\n \n    a = N*N + Q*Q - 1\n    b = 2*M*N - 2*N*x1 + 2*P*Q - 2*Q*y1 + 2*s1*r1\n    c = x1*x1 + M*M - 2*M*x1 + P*P + y1*y1 - 2*P*y1 - r1*r1\n \n    \n    D = b*b-4*a*c\n    rs = (-b-math.sqrt(D))/(2*a)\n \n    xs = M+N*rs\n    ys = P+Q*rs\n \n    return Circle(xs, ys, rs)\n\nif __name__ == '__main__':\n    c1, c2, c3 = Circle(0, 0, 1), Circle(4, 0, 1), Circle(2, 4, 2)\n    print(solveApollonius(c1, c2, c3, 1, 1, 1))    \n    print(solveApollonius(c1, c2, c3, -1, -1, -1)) \n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program {\n    static void Main(string[] args) {        \n        var circles = new List<Circle> {new Circle(new Point(0, 0), 1),\n            new Circle(new Point(5, 6),.5),            \n            new Circle(new Point(-7, -4),.25)};        \n\n        foreach(var circle in circles):           \n            double[][] pow = new double[3][];   \n                pow[circle.p.x] = new double[]{circle.r};\n                \n                pow[circle.p.y] = new double[]{Math.Sqrt(pow[circle.p.x].Sum(x => x * x)), circle.r};  \n                    \n            int max = Math.Max(circle.v11.Length,\n                           Math.Max(circle.v12.Length,\n                                   circle.v13.Length));     \n            int index = circle.v11.Length > 0? 0 : 1;                 \n            Console.WriteLine(\"{0,10:F} has poles: [{1}, {2}], powers:\",               \n                    circle.name, string.Join(\", \", pow[index]));         \n\n            for (int i=0; i<max; i++)                  \n                circle.v11[i] *= pow[(i+index)%2];         \n            if(Math.Abs(circle.v12[i]) >= Math.Abs(circle.v13[i]))          \n                circle.v12[i]*=pow[(i+index)%2];\n            else\n                circle.v12[i]*=-pow[(i+index)%2];\n\n            double[] tmp = new double[3]{0.0, 0.0, 1.0};\n\n            for(int j=circle.v11.Length-1;j>=0;j--)             \n                tmp[j]+=circle.v11[j]*tmp[j+1];\n            tmp += tmp.Substring(1);\n            for(int k=circle.v12.Length-1;k>=0;k--)\n                tmp[k]*(circle.v12[k]-tmp[k+1]);\n            for(int l=circle.v13.Length-1;l>=0;l--)\n                tmp[l]*(circle.v13[l]-tmp[l+1]);\n\n            const float PI = 3.14159265358979323846f;\n\n            double radius = circle.r;\n            double x = circle.p.x, y = circle.p.y;\n            double sinA = Math.Sin(float.Angles.ToRadians(circle.a)),\n                  cosA = Math.Cos(float.Angles.ToRadians(circle.a));\n            double incX = x - radius * sinA;\n            double incY = y - radius * cosA;\n            point newPoint = new point(incX, incY);\n\n            foreach(var item in circles):                   \n                if(item!= newPoint)                     \n                    item -= newPoint;                  \n\n            foreach(var item in circles):                   \n                if(item!= newPoint)                     \n                    item /= newPoint;                \n    \n            bool foundMatch = false;\n            foreach(var item in circles):                   \n                if(item == newPoint)                     \n                    foundMatch = true;              \n                else                            \n                    item += newPoint;                  \n\n            if(foundMatch)                             \n                Console.WriteLine(\"Found matching pair of points : \" +\n                                \"{0}.{1}\", circle.name, item.ToString());  \n\n            else                                                \n                Console.WriteLine(\"No pairs match each other.\");   \n\n            break;                                         \n        }\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 50,
    "input": "Translate C to Python:#include <unistd.h>\t\n#include <stdio.h>\t\n\nint main(void)\n{\n\tputs(isatty(fileno(stdin))\n\t\t? \"stdin is tty\"\n\t\t: \"stdin is not tty\");\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from sys import stdout\nif stdout.isatty():\n    print 'The output device is a teletype. Or something like a teletype.'\nelse:\n    print 'The output device isn\\'t like a teletype.'\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 51,
    "input": "Translate C++ to Go:#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string dog = \"Benjamin\", Dog = \"Samba\", DOG = \"Bernie\";\n    \n    cout << \"The three dogs are named \" << dog << \", \" << Dog << \", and \" << DOG << endl;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Rosetta Code\")\n\tfmt.Println(`var s string\n\ts = \"Hello, world!\"`)\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 52,
    "input": "Translate Java to VB:import java.util.Vector;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Fractran{\n\n   public static void main(String []args){ \n\n       new Fractran(\"17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1\", 2);\n   }\n   final int limit = 15;\n   \n\n   Vector<Integer> num = new Vector<>(); \n   Vector<Integer> den = new Vector<>(); \n   public Fractran(String prog, Integer val){\n      compile(prog);\n      dump();\n      exec(2);\n    }\n\n\n   void compile(String prog){\n      Pattern regexp = Pattern.compile(\"\\\\s*(\\\\d*)\\\\s*\\\\/\\\\s*(\\\\d*)\\\\s*(.*)\");\n      Matcher matcher = regexp.matcher(prog);\n      while(matcher.find()){\n         num.add(Integer.parseInt(matcher.group(1)));\n         den.add(Integer.parseInt(matcher.group(2)));\n         matcher = regexp.matcher(matcher.group(3));\n      }\n   }\n\n   void exec(Integer val){\n       int n = 0;\n       while(val != null && n<limit){\n           System.out.println(n+\": \"+val);\n           val = step(val);\n           n++;\n       }\n   }\n   Integer step(int val){\n       int i=0; \n       while(i<den.size() && val%den.get(i) != 0) i++;\n       if(i<den.size())\n           return num.get(i)*val/den.get(i);\n       return null;\n   }\n\n   void dump(){\n       for(int i=0; i<den.size(); i++)\n           System.out.print(num.get(i)+\"/\"+den.get(i)+\" \");\n       System.out.println();\n   }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim Div As Long, Val1 As String, Val2 As String\n    \n    If IsValidNumber(CStr(InputBox(\"Enter first number as a string\")) ) Then\n        Val1 = CStr(InputBox(\"Enter second number as a string\"))\n    Else\n        MsgBox \"Invalid input\"\n        Exit Sub\n    End If\n  \n    If ValidDivision(NumberToLong(Val1), NumberToLong(Val2)) Then\n            \n        Div = Lcd(Val1, Val2)\n        \n        With Selection\n           .TypeText Text:=Val1 & \" / \" & Val2 & \"=\"\n           .InsertComma Comma:=True\n           .Select\n        End With\n        \n        With Selection\n           .TypeText Text:=\"The result is \": _\n                + Chr(124) & Right(StrDiv(Val1, Val2), 3) & Chr(124): _\n                + Left(StrDiv(Val1, Val2), 4)\n           .Select\n        End With\n     End If\nEnd Sub\n\nFunction StrDiv(ByVal N As Long, ByVal D AS Long) As String\nDim S As String, T As String\n    S = CStr(N / D) : T = IIf(Len(S) > 2, S, S & \",\"): StrDiv = T\nEnd Function\n \nFunction NumToLong(N As String) As Long\nDim i As Long\n    For i = LBound(N) To UBound(N)\n        NumToLong = NumToLong + CLng(Mid(N,i,1))\n    Next i\nEnd Function\n \nFunction Lcd(A As Long, B As Long) As Long\nDim Res As Long\nRes = A - Int((A - B)/B*SqrLen) * SqrtInt\nLcd = (Res + B) \\ SqrLen\nEnd Function \n \nFunction IsNumeric(sN As String) As Boolean\n\n\nIsNumeric = ((IsNum(sN)) And sN <> \"#\") And sN <> \"\"\n\n\n\nPrivate Function IsNum(sN As String) As Boolean\nDim i As Long, StAsm As String, ItIt As Integer\n    Do While True\n        ItIt = InstrRev(sN, StAsm)\n        Select Case ItIt\n            Case -1: IsNum = True\n            Case 0: StAsm = sN[ItIt+1]\n                    IsNum = (Asc(StAsm) >= Asc(\"0\") And Asc(StAsm) <= Asc(\"9\"))\n                    Leave Do While True\n        End Select\n    Loop\nEnd Function \n\n\nPrivate Function InstrRev(strSearch As String, strFind As String) As Integer\nDim k As Integer, stPos As String, enPos As String\n    stPos = strFind\n    Do Until Len(stPos) = 0\n        Set k = k + 1\n        stPos = Mid$(stPos, 1, K-1)\n        EnPos = instrrev($Left$(stPos, k-1), \"$\")\n        If EnPos > 0 Then stPos = stPos & Mid$($Right$(stPos, EnPos-EnPos)), EnPos = 0 GoTo Set k\n    Loop\n    InstrRevi = k\nSet k = 0\nEnd Function   \n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 53,
    "input": "Translate Go to VB:package main\n\nimport \"fmt\"\n\nfunc main() {\n    list := pancake{31, 41, 59, 26, 53, 58, 97, 93, 23, 84}\n    fmt.Println(\"unsorted:\", list)\n\n    list.sort()\n    fmt.Println(\"sorted!  \", list)\n}\n\ntype pancake []int\n\nfunc (a pancake) sort() {\n    for uns := len(a) - 1; uns > 0; uns-- {\n        \n        lx, lg := 0, a[0]\n        for i := 1; i <= uns; i++ {\n            if a[i] > lg {\n                lx, lg = i, a[i]\n            }\n        }\n        \n        a.flip(lx)\n        a.flip(uns)\n    }\n}\n\nfunc (a pancake) flip(r int) {\n    for l := 0; l < r; l, r = l+1, r-1 {\n        a[l], a[r] = a[r], a[l]\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Private Function Pancakes(n As Integer) As Collection\n    \n    Dim c As New Collection\n        \n    For k = 2 To n : c.Add(k, False) : Next \n    \n    \n    For i = 1 To n - 1\n        j = Int(Rnd * (n - i + 1))\n        \n        \n        temp = c(i): c.Remove(temp)\n        temp = c(j): c.Remove(temp)\n        c.Add(i \\ 2, True): c.Add(j \\ 2, True)\n    Next \n    \n    Set Pancakes = c    \nEnd Function\n",
    "input_language": "Go",
    "output_language": "VB"
  },
  {
    "id": 54,
    "input": "Translate Python to C#:from sys import stdout\nneighbours = [[-1, 0], [0, -1], [1, 0], [0, 1]]\nexists = []\nlastNumber = 0\nwid = 0\nhei = 0\n\n\ndef find_next(pa, x, y, z):\n    for i in range(4):\n        a = x + neighbours[i][0]\n        b = y + neighbours[i][1]\n        if wid > a > -1 and hei > b > -1:\n            if pa[a][b] == z:\n                return a, b\n\n    return -1, -1\n\n\ndef find_solution(pa, x, y, z):\n    if z > lastNumber:\n        return 1\n    if exists[z] == 1:\n        s = find_next(pa, x, y, z)\n        if s[0] < 0:\n            return 0\n        return find_solution(pa, s[0], s[1], z + 1)\n\n    for i in range(4):\n        a = x + neighbours[i][0]\n        b = y + neighbours[i][1]\n        if wid > a > -1 and hei > b > -1:\n            if pa[a][b] == 0:\n                pa[a][b] = z\n                r = find_solution(pa, a, b, z + 1)\n                if r == 1:\n                    return 1\n                pa[a][b] = 0\n\n    return 0\n\n\ndef solve(pz, w, h):\n    global lastNumber, wid, hei, exists\n\n    lastNumber = w * h\n    wid = w\n    hei = h\n    exists = [0 for j in range(lastNumber + 1)]\n\n    pa = [[0 for j in range(h)] for i in range(w)]\n    st = pz.split()\n    idx = 0\n    for j in range(h):\n        for i in range(w):\n            if st[idx] == \".\":\n                idx += 1\n            else:\n                pa[i][j] = int(st[idx])\n                exists[pa[i][j]] = 1\n                idx += 1\n\n    x = 0\n    y = 0\n    t = w * h + 1\n    for j in range(h):\n        for i in range(w):\n            if pa[i][j] != 0 and pa[i][j] < t:\n                t = pa[i][j]\n                x = i\n                y = j\n\n    return find_solution(pa, x, y, t + 1), pa\n\n\ndef show_result(r):\n    if r[0] == 1:\n        for j in range(hei):\n            for i in range(wid):\n                stdout.write(\" {:0{}d}\".format(r[1][i][j], 2))\n            print()\n    else:\n        stdout.write(\"No Solution!\\n\")\n\n    print()\n\n\nr = solve(\". . . . . . . . . . . 46 45 . 55 74 . . . 38 . . 43 . . 78 . . 35 . . . . . 71 . . . 33 . . . 59 . . . 17\"\n          \" . . . . . 67 . . 18 . . 11 . . 64 . . . 24 21 . 1  2 . . . . . . . . . . .\", 9, 9)\nshow_result(r)\n\nr = solve(\". . . . . . . . . . 11 12 15 18 21 62 61 . .  6 . . . . . 60 . . 33 . . . . . 57 . . 32 . . . . . 56 . . 37\"\n          \" .  1 . . . 73 . . 38 . . . . . 72 . . 43 44 47 48 51 76 77 . . . . . . . . . .\", 9, 9)\nshow_result(r)\n\nr = solve(\"17 . . . 11 . . . 59 . 15 . . 6 . . 61 . . . 3 . . .  63 . . . . . . 66 . . . . 23 24 . 68 67 78 . 54 55\"\n          \" . . . . 72 . . . . . . 35 . . . 49 . . . 29 . . 40 . . 47 . 31 . . . 39 . . . 45\", 9, 9)\nshow_result(r)\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nusing static System.Linq.Enumerable;\n\npublic class Program {\n    static void Main() {\n        var puzzleBoard =\n            \"[Puzzle Board]: A simple two-dimensional array of strings,\n                     each string is either empty (\"\"\") or contains a single \n                     alphanumeric character (\".\"). Empty cells are filled \n                     with \"\" so they don't clutter the output too much.\"\n\n        \n        Console.WriteLine(puzzleBoard);\n\n        \n        \n        var lowerBound = Enumerable.Range(0, puzzleBoard.Length);\n        var upperBound = new[] { puzzleBoard.Last().Length };\n        var gridLines = Range(lowerBound.First(), upperBound.SkipWhile(i => true).First());\n\n        \n\n        foreach(var rowIndex in gridLines) {\n\n            \n            var nextRow = RowBounds.GetNext(rowIndex); \n\n            \n            \n            bool canMoveRight = false; \n            \n            foreach(int colIndex in nextRow) {\n\n                \n                char cellCharacter = puzzleBoard[colIndex][rowIndex];          \n        \n                if(char.IsDigit(cellCharacter)) {\n\n                    \n                    int number = Convert.ToInt32(colIndex / 10);             \n\n                                       \n            \n                    char digitCharacters = Char.Parse(string.Concat(Range(number, 0)));\n                                        \n                                       \n            \n                    if(digitCharacters == \".\"){\n                        continue;\n                    }\n                    \n                    \n                    int newValue = number*10+int.Parse(digitCharacters.ToString());\n                        \n                       \n    \n                        puzzleBoard[colIndex][rowIndex]=newValue+\"\";\n                        break;\n                }else{  \n                    puzzleBoard[colIndex][rowIndex]='R';                     \n                \n                }\n\n                \n                \n                if((colIndex+puzzleBoard[rowIndex].Length)%2==0){\n                    break;\n                }\n            }\n\n\n            \n\n            \n            if(!canMoveRight && rowIndex!=gridLines.Last()){\n\n                \n\n                var newRow=Range(rowIndex,puzzleBoard.Last().Length+1);\n                foreach(int colIndex in newRow){\n\n                    if(colIndex=='R')continue;\n                    puzzleBoard[colIndex][rowIndex]=\".\";\n\n\n                }\n                break;\n            }\n        }\n\n        \n        \n        \n        var finalSolution = replaceAllWithSpaces(\n            puzzleBoard.Select(lmb =>\n               lmb.Where(clm => clm!= '.').Aggregate((acc,clm)=>acc+(char)(int)clm)).ToArray());\n\n\n        Console.WriteLine();\n        Console.WriteLine(finalSolution);\n    }\n\n    \n    private static string replaceAllWithSpaces(string str) {\n        return str.Replace(\".\", \"\").Replace(\"#\", \"\");\n    }\n\n    \n    \n    \n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 55,
    "input": "Translate PHP to Java:#!/usr/bin/env php\nThe 24 Game\n \nGiven any four digits in the range 1 to 9, which may have repetitions,\nUsing just the +, -, *, and / operators; and the possible use of\nbrackets, (), show how to make an answer of 24.\n \nAn answer of \"q\" will quit the game.\nAn answer of \"!\" will generate a new set of four digits.\nOtherwise you are repeatedly asked for an expression until it evaluates to 24\n \nNote: you cannot form multiple digit numbers from the supplied digits,\nso an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.\n\n<?php\n\nwhile (true) {\n    $numbers = make_numbers();\n\n    for ($iteration_num = 1; ; $iteration_num++) {\n        echo \"Expresion $iteration_num: \";\n\n        $entry = rtrim(fgets(STDIN));\n\n        if ($entry === '!') break;\n        if ($entry === 'q') exit;\n\n        $result = play($numbers, $entry);\n\n        if ($result === null) {\n            echo \"That's not valid\\n\";\n            continue;\n        }\n        elseif ($result != 24) {\n            echo \"Sorry, that's $result\\n\";\n            continue;\n        }\n        else {\n            echo \"That's right! 24!!\\n\";\n            exit;\n        }\n    }\n}\n\nfunction make_numbers() {\n    $numbers = array();\n\n    echo \"Your four digits: \";\n\n    for ($i = 0; $i < 4; $i++) {\n        $number = rand(1, 9);\n\n        if (!isset($numbers[$number])) {\n            $numbers[$number] = 0;\n        }\n        $numbers[$number]++;\n        print \"$number \";\n    }\n\n    print \"\\n\";\n\n    return $numbers;\n}\n\nfunction play($numbers, $expression) {\n    $operator = true;\n    for ($i = 0, $length = strlen($expression); $i < $length; $i++) {\n        $character = $expression[$i];\n\n        if (in_array($character, array('(', ')', ' ', \"\\t\"))) continue;\n\n        $operator = !$operator;\n\n        if (!$operator) {\n            if (!empty($numbers[$character])) {\n                $numbers[$character]--;\n                continue;\n            }\n            return;\n        }\n        elseif (!in_array($character, array('+', '-', '*', '/'))) {\n            return;\n        }\n    }\n\n    foreach ($numbers as $remaining) {\n        if ($remaining > 0) {\n            return;\n        }\n    }\n    \n    return eval(\"return $expression;\");\n}\n?>\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.*;\n\npublic class FourDigits {\n\n    public static void main(String[] args) {\n        int[][] testSet = {{7,8,3,1}, {5,6,2,4},\n                            {2,1,8,5}, {9,8,4,3}, {1,10,2,1}};\n\n        Map<String,Integer> divisorsMap = new HashMap<>();\n        for(int i=2;i<=Math.min(9,testSet[0].length());i++){\n            divisorsMap.merge(Integer.toString(i),1);\n        }\n\n        boolean foundDivisor = false;\n        \n        System.out.println(\"\\n\\nFirst ten solutions:\");\n        for(int count=0,i=1;i<=10;i++){            \n            String numberStr = Arrays.toString(testSet[i][0]);\n            Integer num = Integer.parseInt(numberStr);\n            if(divisorsMap.size()==num){\n                \n                for(int j=testSet[i][0]+1;j<testSet[testSet.length-1][0];j++){\n                    String secondNumStr = Arrays.toString(testSet[j][0]);\n                    Integer secondNumb = Integer.parseInt(secondNumStr);\n                    if(j==secondNumb && divisorsMap.containsKey(secondNumStr)){\n                        foundDivisor=true;\n                        break;\n                    }                    \n                }\n                \n                if(foundDivisor)return;\n                StringBuilder firstNumber=new StringBuilder(Arrays.asList(testSet)[0]));\n                StringBuilder secondNumber=new StringBuilder(Arrays.asList(testSet)[1]);\n                for(int k=2;k<= Math.min(9,testSet[0].length());k++){\n                    if(firstNumber.charAt(k-1)!=secondNumber.charAt(k-1)){                        \n                        foundDivisor=false;\n                        break;                                  \n                    }\n                }\n                \n                \n                if(foundDivisor)return;\n                for(int k=0;k<firstNumber.length();k++)\n                    firstNumber.replace(k,(k+1)<firstNumber.length()?k+1:firstNumber.length()),=\n                       secondNumber.replace(k,(k+1)<secondNumber.length()?k+1:secondNumber.length()),\n                           (k+1)<=firstNumber.length();\n                if(!Arrays.equals(firstNumber,String.format(\"%\",firstNumber.length()))||\n                  !Arrays.equals(secondNumber,String.format(\"%\",secondNumber.length()))){}else{return(count++);}\n            }\n            \n            \n            do{\n                firstNumber.append((char)(i%97+'A'));\n                secondNumber.append((char)((i+1)%97+'A'));\n                i=(int)i*10+(int)mod++;\n            }while(mod-->0);\n            \n            if(firstNumber.toString().contains(\"-\")){\n                mod=-1;\n                firstNumber.setLength(firstNumber.length());\n            }\n            if(secondNumber.toString().contains(\"-\")){   \n                secondNumber.setLength(secondNumber.length());\n            }\n            \n            if(!(firstNumber.toString().endsWith(str))||!(secondNumber.toString().endsWith(str))){\n                foundDivisor=false;\n                break;\n            }\n            foundDivisor=true;\n        }\n        \n        \n        System.out.printf(\"\\nThe smallest positive divisor of %d%s%d is %,d%n\",\n               str, str.isEmpty()?\"\":str,\"for \"\n              ).format(Math.max(divisorsMap.values()).add(1),\n                      divisorsMap.keySet(),foundDivisor?divisorsMap.get(1):0)\n              .substring(4));\n        \n\n    }\n    \n    \n    private static final String []str=null[];\n    @SafeVarargs\n    protected static fun format(n...s){ifArray(s).forEach{|x| n(x)};}\n    private static boolean inArray(arr,a){for(b in arr;b!=a;)b=isIn(a,b)?true:false:return true;}\n\n}\n",
    "input_language": "PHP",
    "output_language": "Java"
  },
  {
    "id": 56,
    "input": "Translate C++ to VB:#include <iostream>\n\nint main()\n{\n  \n  auto double1 = 2.5;\n\n  \n  auto float1 = 2.5f;\n\n  \n  auto longdouble1 = 2.5l;\n\n  \n  auto double2 = 2.5e-3;\n  auto float2 = 2.5e3f;\n\n  \n  auto double3 = 0x1p4;\n  auto float3 = 0xbeefp-8f;\n\n  std::cout << \"\\ndouble1: \" << double1;\n  std::cout << \"\\nfloat1: \" << float1;\n  std::cout << \"\\nlongdouble1: \" << longdouble1;\n  std::cout << \"\\ndouble2: \" << double2;\n  std::cout << \"\\nfloat2: \" << float2;\n  std::cout << \"\\ndouble3: \" << double3;\n  std::cout << \"\\nfloat3: \" << float3;\n  std::cout << \"\\n\";\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Sub Main()\n\n\nDim l As Long, d As Double\n\n    l = 42\n    Debug.Print l\n    d = 3.14159\n    Debug.Print d\n    s = \"π=\" & cStr(d)\n    Debug.Print s\n    \n    l = 42000\n    Debug.Print l / 1000000\n    Debug.Print l / 1E6\n    Debug.Print l \\ 1M\n    Debug.Print l \\ 1B\n  \nEnd Sub \n\nFunction cStr(x) As String \nIf IsFloatOrNull(x) Then\n   cStr = Format(x, \"@@@@\")\nElse\n     cStr = x\n End If\nEnd Function \n \nFunction IsFloatOrNull(x As Variant) As Boolean\n\n\nIsFloatOrNull = (IsNumeric(x) Or x = \"\"\n                   And Application.IsInputValid)\n\nEnd Function   \n",
    "input_language": "C++",
    "output_language": "VB"
  },
  {
    "id": 57,
    "input": "Translate C to C++:#include <stdio.h>\n\nint main() {\n  const char *extra = \"little\";\n  printf(\"Mary had a %s lamb.\\n\", extra);\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include <iostream>\nusing namespace std;\n\nvoid printVerse(string name)\n{\n    if(name == \"mary\")\n    {\n        cout << \"Mary had a little lamb.\" << endl << \"Its body was like a lake,\" << endl << \"And on its side was a door.\" << endl << \"Upside down that door I keep, \" << endl << \"And when I open it up alone\" << endl << \"Will live Mary's Lamb.\" << endl << endl;\n    }\n    else\n    {\n        cout << name << \"s lamb\" << endl << \"Is lying flat, like this:\" << endl;\n        cin >> lamb;\n    }   \n}\n\n\nstring replaceAll(string str, string from, string to)\n{\n    int start = 0;\n    while(start=str.find(from))\n    {\n        start += from.length();\n        str.replace(start, from.length(), to);\n    }\n    return str;\n}\n\nint main()\n{\n    string input1, input2, output1, output2;\n    \n    getline(cin,input1);\n    input2 = replaceAll(input1, \" mary \", \" mary \");\n    cout << \"Input : \" << input2 << \"\\n\\n\";\n\n    cout << \"(Mary) Input : (\" << mary << \") \" << input2 << endl;;\n}\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 58,
    "input": "Translate Python to C#:def perf1(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program {\n    static bool isPrime(int x) { \n       if (x < 2) return false;  \n       else if ((x & 1)!= 0 || x % 3 == 0) return false;   \n       else { int d = x / 3; int s = 4; while(s <= d && x > s * 4) {\n           x -= s *= 5;\n           if (x < s * 2) continue 2;\n           s /= 10 or else x /= 3; } return true; }\n    }\n\n    static void Main(string[] args) {\n        const int limit = 1000000;\n        Console.WriteLine(\"First 20 anti-primes:\");\n        int p = 19, c = 0;\n        while(c < 20)\n        {\n            if (isPrime(p)) ++c;\n            p++;\n        }\n        Console.WriteLine($\"There are {{0} anti-prime numbers below {limit}}.\", c);\n        Console.WriteLine(\"\\nThe first ten anti-primes:\")\n        for (int i = 1; i < 10; i++)\n        {\n            if (isPrime(i))\n                Console.Write(\"{0}\\t\",i);            \n        }\n        Console.ReadLine();\n    }    \n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 59,
    "input": "Translate C to Go:#include<stdio.h>\n#include<stdlib.h>\n\nint main(void) {\n    int list[3][9], i;\n    for(i=0;i<27;i++) list[i/9][i%9]=1+i;\n    for(i=0;i<9;i++) printf( \"%d%d%d  \", list[0][i], list[1][i], list[2][i] );\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tlist := [27][9]int{\n\t{1, 2, 3},\n\t{4, 8, 12},\n\t{7, 16, 24},\n\t{10, 20, 30},\n\t{13, 28, 42},\n\t{16, 48, 72},\n\t{19, 56, 84},\n\t{22, 64, 92},\n\t{25, 73, 100},\n\t{28, 82,112},\n\t{31, 90,120},\n\t{34,99,130},\n\t{37,108,140},\n\t{40,117,150},\n\t{43,126,162},\n\t{46,135,174},\n\t{49,144,186},\n\t{52,153,198},\n\t{55,162,210},\n\t{58,171,222},\n\t{61,180,234},\n\t{64,189,246},\n\t{67,198,258},\n\t{70,207,270},\n\t{73,216,282},\n\t{76,225,294},\n\t{79,234,306},\n\t{82,243,318},\n\t{85,252,340},\n\t{88,261,360},\n\t{91,270,382},\n}\nvar test = [6]string{\"abcf\", \"defg\", \"hij\"}\n\nfor _, v := range list {\n\tfmt.Println(test[v[0]/5],\n\t\tv[1]*v[0])\n\tfor y := 1; y < len(v); y++ {\n\t\tif (y+1)%5 == 0 {\n\t\t\tfmt.Printf(\"%c\\n\",'')\n\t\t} else if v[y-1] > v[y] {\n\t\t\tfmt.Print(\" \")\n\t\t}\n\t}\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 60,
    "input": "Translate C++ to Java:#include <string>\n#include <vector>\n#include <map>\n#include <iostream>\n#include <algorithm>\n#include <utility>\n#include <sstream>\n\nstd::string mostFreqKHashing ( const std::string & input , int k ) {\n   std::ostringstream oss ;\n   std::map<char, int> frequencies ;\n   for ( char c : input ) {\n      frequencies[ c ] = std::count ( input.begin( ) , input.end( ) , c ) ;\n   }\n   std::vector<std::pair<char , int>> letters ( frequencies.begin( ) , frequencies.end( ) ) ;\n   std::sort ( letters.begin( ) , letters.end( ) , [input] ( std::pair<char, int> a ,\n\t         std::pair<char, int> b ) { char fc = std::get<0>( a ) ; char fs = std::get<0>( b ) ; \n\t         int o = std::get<1>( a ) ; int p = std::get<1>( b ) ; if ( o != p ) { return o > p ; }\n\t         else { return input.find_first_of( fc ) < input.find_first_of ( fs ) ; } } ) ;\n   for ( int i = 0 ; i < letters.size( ) ; i++ ) {\n      oss << std::get<0>( letters[ i ] ) ;\n      oss << std::get<1>( letters[ i ] ) ;\n   }\n   std::string output ( oss.str( ).substr( 0 , 2 * k ) ) ;\n   if ( letters.size( ) >= k ) {\n      return output ;\n   }\n   else {\n      return output.append( \"NULL0\" ) ;\n   }\n}\n\nint mostFreqKSimilarity ( const std::string & first , const std::string & second ) {\n   int i = 0 ;\n   while ( i < first.length( ) - 1  ) {\n      auto found = second.find_first_of( first.substr( i , 2 ) ) ;\n      if ( found != std::string::npos ) \n\t return std::stoi ( first.substr( i , 2 )) ;\n      else \n\t i += 2 ;\n   }\n   return 0 ;\n}\n\nint mostFreqKSDF ( const std::string & firstSeq , const std::string & secondSeq , int num ) {\n   return mostFreqKSimilarity ( mostFreqKHashing( firstSeq , num ) , mostFreqKHashing( secondSeq , num ) ) ;\n}\n\nint main( ) {\n   std::string s1(\"LCLYTHIGRNIYYGSYLYSETWNTGIMLLLITMATAFMGYVLPWGQMSFWGATVITNLFSAIPYIGTNLV\" ) ;\n   std::string s2( \"EWIWGGFSVDKATLNRFFAFHFILPFTMVALAGVHLTFLHETGSNNPLGLTSDSDKIPFHPYYTIKDFLG\" ) ;\n   std::cout << \"MostFreqKHashing( s1 , 2 ) = \" << mostFreqKHashing( s1 , 2 ) << '\\n' ;\n   std::cout << \"MostFreqKHashing( s2 , 2 ) = \" << mostFreqKHashing( s2 , 2 ) << '\\n' ;\n   return 0 ;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.*;\n\npublic class KPrime {\n\n    public static void main(String[] args) {\n        System.out.println(findMaxNumOfPrimes(2017));\n    }\n\n    \n    private static final Map<String,Integer[]> primesCache = new HashMap<>();\n    private static Integer[][] cache =\n            new Integer[(int)(Math.log(10_000)+1)][5];\n\n    \n    \n    private static boolean isPrime(int n){\n        \n        if(n==0||n==1)return false;\n        for(Integer probe:cache[n-1][0]){\n            if(probe>n/4 && probe<=3*n+2)\n                return probe<n/4 || probe>n*9+6;// prime under limit or too close\n            if(probe>n*9+6&&probe>n*9+5)//prime within range but outside max in this row then return true\n                return true;  \n        }\n        return false;   \n    }\n\n    \n    \n    \n    private static String getDigits(long n,int e){       \n        StringBuilder sb = new StringBuilder();\n        long f=0,t=n,e--;\n        while(t>=1000m){\n           t/=10;t%=10;if((t&mask(e))!=0)m[]=t>>>e,(long)t<<e;\n           sb.append(((char)((f+=e+t%10)+48)));\n        }\n        while(f>=10&&(e=(e-=2)>0)){\n           e--;if (((double)f+(double)e)<->20000.0)&&sb.charAt(sb.length()-1)=='0')\n               m[e]=(m[e]==null?f:(int)f);\n           f+=(double)t<<(e+1);//add another digit again\n       }\n       return sb.toString();      \n    }\n\n\n    private static List<Integer>[] findMaxNumOfPrimes(int bound){\n        List<Integer>[] list=new ArrayList[bound];\n        for(int x=1;x<bound-x+1;x++)list[x]=new LinkedList<>();//create empty lists from 1..bound-x+1\n\n        \n        \n        for(List<Integer>xList:list){//iterate through all of them once...\n            for(Long y=0;y<(x*(x-1))/2);y++){//...and try every number between 0 and half-sum of previous sums inclusive as candidates:\n                if(isPrime(y+x)){                \n                    Long sum=xList.contains(x)?Long.MAX_VALUE:xList.get(list.size()++)\n                        + ((Long)x*y).longValue()<<16|(Long)y<<8);//sum each candidate by adding it's digits times two plus their powers squared\n                    if(sum.isProbablePrime(30)){                    \n                        list[list.size().value-1].add((Integer)sum.intValue());//found a prime! add that number to the end of the longest list\n                        break;\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n\n\n    private static String luhnCheck(String s){\n        assert(s.length()==13);//check string length is 13\n    \n        int evenSum=sumXAndEven=s.substring(0,5),\n             oddSum=sumXAndOdd=s.substring(5,13);\n\n        return (evenSum+oddSum)%10 == 0? \"\" : \"Not valid\";\n    }\n\n\n\n\n    private static long sumXAndEven,String strBoth,long maskOutSixes=null,\n          long []maskEvens=int[][11];//the last column will be masked out sixes later on;\n\n    private static long sumXAndOdd,String strOnlyOdd,long maskOutEvens=null,\n         long []maskOdds=int[][12]; //the last columns are same as before\n\n\n    private static String checkDigit(final String s,final String d)throws Exception{\n        if(!isPrime(Integer.parseInt(d))) throw new Exception();\n\n        \n        \n        \n        String both=getDigits(s),onlyOdd,getDigits(d));//both vs only odd,dvs only even\n        \n        maskEvens=[5,14],[3,13],maskOdds=[6,15],\n                 [7,17],[8,18]]; \n\n        for(int j=0;j<5;j++){\n            \n            if(strOnlyOdd.equals(both))\n                maskEvens[j]=j+1;\n            else if(getDigits(d).startsWith(maskOdds[j]))\n                \n                \n                maskEvens[j]+=1;\n            \n            \n        }\n        \n\n        for(int i=0;i<26;i++){\n            if(strOnlyOdd.startsWith(maskEvals[i])){}\n            else{strOnlyOdd=\"\"+(strOnlyOdd.indexOf(i)==-1?(i+1):i);}\n        }\n        return (\"\"+strOnlyOdd).length()%2==\"0\"? \"\"\n              :\"Digit must be even to calculate checksum!\";\n    }\n\n\n\n\n\n    private static boolean isPrime(long n){\n        switch(true){\n            case n==2:return true;\n            case!(n&(1<<31)):return true;\n            default:{\n                long test=this;\n                while(test%(n<<1)!=0&&test!=(n-1)<<1)||\n                       test==(this<<1)-1||(test==(this<<1)+1",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 61,
    "input": "Translate Python to C#:\n\ndef convertToBase(n, b):\n\tif(n < 2):\n\t\treturn [n];\n\ttemp = n;\n\tans = [];\n\twhile(temp != 0):\n\t\tans = [temp % b]+ ans;\n\t\ttemp /= b;\n\treturn ans;\n\n\n\n\ndef cipolla(n,p):\n\tn %= p\n\tif(n == 0 or n == 1):\n\t\treturn (n,-n%p)\n\tphi = p - 1\n\tif(pow(n, phi/2, p) != 1):\n\t\treturn ()\n\tif(p%4 == 3):\n\t\tans = pow(n,(p+1)/4,p)\n\t\treturn (ans,-ans%p)\n\taa = 0\n\tfor i in xrange(1,p):\n\t\ttemp = pow((i*i-n)%p,phi/2,p)\n\t\tif(temp == phi):\n\t\t\taa = i\n\t\t\tbreak;\n\texponent = convertToBase((p+1)/2,2)\n\tdef cipollaMult((a,b),(c,d),w,p):\n\t\treturn ((a*c+b*d*w)%p,(a*d+b*c)%p)\n\tx1 = (aa,1)\n\tx2 = cipollaMult(x1,x1,aa*aa-n,p)\n\tfor i in xrange(1,len(exponent)):\n\t\tif(exponent[i] == 0):\n\t\t\tx2 = cipollaMult(x2,x1,aa*aa-n,p)\n\t\t\tx1 = cipollaMult(x1,x1,aa*aa-n,p)\n\t\telse:\n\t\t\tx1 = cipollaMult(x1,x2,aa*aa-n,p)\n\t\t\tx2 = cipollaMult(x2,x2,aa*aa-n,p)\n\treturn (x1[0],-x1[0]%p)\n\nprint \"Roots of 2 mod 7: \" +str(cipolla(2,7))\nprint \"Roots of 8218 mod 10007: \" +str(cipolla(8218,10007))\nprint \"Roots of 56 mod 101: \" +str(cipolla(56,101))\nprint \"Roots of 1 mod 11: \" +str(cipolla(1,11))\nprint \"Roots of 8219 mod 10007: \" +str(cipolla(8219,10007))\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace CIPOLLA {\n    class Program {\n        static int Phi(int m) { \n            if (m < 2) return 1; \n\n            var s = 2;\n            while (true) {\n                if ((s * s > m) || (m % s!= 0)) break;\n                else s++;\n            }\n            return s - 1;\n        }\n\n        const string BASES = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n        public static void Main(string[] args) {\n            Console.WriteLine(\"Fingerprint numbers:\");\n            foreach(var fpNum in new [] { 20137, 20245, 40570 }) {\n                var fN = Convert.ToString(fpNum, 10);\n                byte[] baseO = BASES.ToCharArray();\n                Array.Sort(baseO);  \n                Array.Reverse(baseO);   \n                var binRep = BitConverter.ToString(fN).Replace('0', '.').Replace('b', '|');\n                foreach(var ch in binRep) {\n                    Console.Write(BASES.IndexOf(ch));\n                }            \n                Console.WriteLine(\"\");\n            }\n\n            Console.WriteLine(\"\\nPrime numbers:\");\n            var primes = Primes().Take(20);\n            foreach(var prime in primes) {\n                Console.WriteLine(prime.PrettyPrint());\n            }\n\n            Console.WriteLine(\"\\nPowers of two:\");\n            var powersOfTwo = PowersOfTwo(20000000).Select(PowerOfTwo => PowerOfTwo.ToString()).ToList();\n            foreach(var power in powersOfTwo) {\n                Console.WriteLine(power.Replace(\"[\", \"\").Replace(\"]\", \"\"));\n            }\n\n            Console.ReadLine(); ;\n        }\n\n        \n        private static IEnumerable<int> Primes() {\n            bool[] isPrimer = new bool[50001]; \n            yielder = true;\n            isPrimer[0] = false;\n            isPrimer[1] = false;\n            for(int i=2;i<49999;++i){\n                if(isPrimer[i]){\n                    continue;\n                }\n                for(int j=i*2;j<i+len(isPrimer);j+=i++)=false{\n                   isPrimer[j]=true;\n                };\n             }\n           yieldreturn 99999;\n         \n\n        \tprivate static IEnumerable<bool> Yielder(bool current) {\n              bool next =!current;\n              return Enumerable.Range(0, int.MaxValue).Where(i=>!next && i==current)?next : this.Yielder(next);\n          }\n\n\n        \tpublic static IEnumerable<int> PowersOfTwo(int start, int count) {\n        \t\tyielder += true;\n\t\t\t\tint stop = start + count;\n\t\t        for(int ii=start;;ii++){\n\t\t        \t    yielder &= ++ii == start? next : null ; \n\t\t\t        if(ii >= stop )break;\n\t\t        }\n\t\t    return yielder;\n\t}\n\n    \tprivate static IEnumerable<int> NextInSequence(this int sequence) {\n\t        for(;sequence>=1;)yield return(sequence);\n\t    for(++sequence;sequence<=1;sequence++)yield return(sequence);\n  \t}\n    \t\n    enum Base64EncodingType{UTF_16LE, UTF_32LE, UTF_16BE, UTF_32BE};\n    struct B64EncodeData {\n        public uint Length;\n        public char[] Data;\n        public ushort Base64Length;\n        public override string ToString(){\n            StringBuilder buffer = new StringBuilder(Base64Length);\n\n            for(int index = 0;index<Data.Length;index++)\n                switch(Data[index].Value){\n                    case 'A':buffer.Append(65);break;\n                    case 'B':buffer.Append(66);break;\n                    case 'C':buffer.Append(67);break;\n                    case 'D':buffer.Append(68);break;\n                    case 'E':buffer.Append(69);break;\n                    case 'F':buffer.Append(70);break;\n                    default:buffer.Append(Data[index]);break;\n            }\n            return buffer.ToString();\n        }\n    };\n\n    public static class Extensions {\n\n        public static T[] ToArray<T>(this T[] array) {\n            return Arrays.ToArray(array);\n        }\n\n        \n        \n        \n        \n        \n        public static IEnumerable<char[]> ToCharThis(this char[] source) {\n            using(char[] tempSource = new char[source.Length]) {\n                \n                do {\n                    \n                    foreach(char item in source)yield return(item);\n                }while(true);\n            }\n        }\n        \n\n        public static IEnumerable<IEnumerable<T>> Zip<T1,T2,...>(this IEnumerable<T1> @first, IEnumerable<T2> @second,... ) =>\n            from t1 in @first select Tuple.Create(t1,@second);\n\n        public static IEnumerable<IEnumerable<T>> Zip<T1,T2,T3,...>(this IEnumerable<T1> @first, IEnumerable<T2> @second, IEnumerable<T3> @third,...) =>\n            from t1 in @first select Tuple.Create(t1,@second,@third);\n\n        public static IEnumerable<IEnumerable<T>> Zip<T1,T2,T3,T4,...>(this IEnumerable<T1> @first, IEnumerable<T2> @second, IEnumerable<T3> @third, IEnumerable<T4>",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 62,
    "input": "Translate PHP to Python:<?php\nfor ($i = 0; $i < 10; $i++)\n    for ($j = 0; $j < 10; $j++)\n        $a[$i][$j] = rand(1, 20);\n\nforeach ($a as $row) {\n    foreach ($row as $element) {\n        echo \" $element\";\n        if ($element == 20)\n            break 2; // 2 is the number of loops we want to break out of\n    }\n    echo \"\\n\";\n}\necho \"\\n\";\n?>\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def setup():\n    \n    def go(i):\n        global ans\n        nonlocal ans\n        print(\"Thinking i=%r...\".format(i))\n        time.sleep(0.5)\n        print(\" computing...\")\n        time.sleep(.3)\n        sum_, prod_ = 0, 1\n        n = len(ans)\n        for j in range(n): sums_, products_ = (sum_(prod_), prod_*ans[j])\n        \n        ans.append(sums_)\n        print(\"{} {}\".format(sum_(sums__), prod_))\n\n        if sum_ > 100: exit()\n \n\nprint(\"\\n\\nThere are {} answers.\".format(len(ans)))\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 63,
    "input": "Translate Go to VB:package main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 1; i <= 5; i++ {\n        for j := 1; j <= i; j++ {\n            fmt.Printf(\"*\")\n        }\n        fmt.Printf(\"\\n\")\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Sub bar()\n    Dim x = 0\n    GoTo label\n    x = 5\nlabel:\n    Debug.Print x\nEnd Sub\n",
    "input_language": "Go",
    "output_language": "VB"
  },
  {
    "id": 64,
    "input": "Translate Java to Go:import java.util.*;\n\npublic class Hopido {\n\n    final static String[] board = {\n        \".00.00.\",\n        \"0000000\",\n        \"0000000\",\n        \".00000.\",\n        \"..000..\",\n        \"...0...\"};\n\n    final static int[][] moves = {{-3, 0}, {0, 3}, {3, 0}, {0, -3},\n    {2, 2}, {2, -2}, {-2, 2}, {-2, -2}};\n    static int[][] grid;\n    static int totalToFill;\n\n    public static void main(String[] args) {\n        int nRows = board.length + 6;\n        int nCols = board[0].length() + 6;\n\n        grid = new int[nRows][nCols];\n\n        for (int r = 0; r < nRows; r++) {\n            Arrays.fill(grid[r], -1);\n            for (int c = 3; c < nCols - 3; c++)\n                if (r >= 3 && r < nRows - 3) {\n                    if (board[r - 3].charAt(c - 3) == '0') {\n                        grid[r][c] = 0;\n                        totalToFill++;\n                    }\n                }\n        }\n\n        int pos = -1, r, c;\n        do {\n            do {\n                pos++;\n                r = pos / nCols;\n                c = pos % nCols;\n            } while (grid[r][c] == -1);\n\n            grid[r][c] = 1;\n            if (solve(r, c, 2))\n                break;\n            grid[r][c] = 0;\n\n        } while (pos < nRows * nCols);\n\n        printResult();\n    }\n\n    static boolean solve(int r, int c, int count) {\n        if (count > totalToFill)\n            return true;\n\n        List<int[]> nbrs = neighbors(r, c);\n\n        if (nbrs.isEmpty() && count != totalToFill)\n            return false;\n\n        Collections.sort(nbrs, (a, b) -> a[2] - b[2]);\n\n        for (int[] nb : nbrs) {\n            r = nb[0];\n            c = nb[1];\n            grid[r][c] = count;\n            if (solve(r, c, count + 1))\n                return true;\n            grid[r][c] = 0;\n        }\n\n        return false;\n    }\n\n    static List<int[]> neighbors(int r, int c) {\n        List<int[]> nbrs = new ArrayList<>();\n\n        for (int[] m : moves) {\n            int x = m[0];\n            int y = m[1];\n            if (grid[r + y][c + x] == 0) {\n                int num = countNeighbors(r + y, c + x) - 1;\n                nbrs.add(new int[]{r + y, c + x, num});\n            }\n        }\n        return nbrs;\n    }\n\n    static int countNeighbors(int r, int c) {\n        int num = 0;\n        for (int[] m : moves)\n            if (grid[r + m[1]][c + m[0]] == 0)\n                num++;\n        return num;\n    }\n\n    static void printResult() {\n        for (int[] row : grid) {\n            for (int i : row) {\n                if (i == -1)\n                    System.out.printf(\"%2s \", ' ');\n                else\n                    System.out.printf(\"%2d \", i);\n            }\n            System.out.println();\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc haversine(θ float64) float64 {\n\treturn.5 * (1 - math.Cos(θ)) *.75\n}\n\ntype coord struct{ latitude, longitude float64 }\n\n\nvar testCases = []struct{\n\tdegrees       float64\n\tcellsPerDegree bool\n}{\n\t{20., 15.},\n\t{10., true},\n\t{-45., false},\n}\n\n\nfor _, tc := range testCases {\n\tvar p [][]coord\n\tfor u := 0.; u <= tc.cellsPerDegree; u++ {\n\t\tpu := uc(u)\n\t\tv := vc(tc.degrees / pu.latitude)\n\t\tp = append(p, [2]coord{pu.longitude+v*60, pu.latitude+v*30})\n\t}\n\tfmt.Println(\"For degrees\", tc.degs, \"cells:\", len(p))\n\n\tif rc, ok := p[0].latitude.(float64);!ok {\n\t\tpanic(\"Invalid start point\")\n\t} else if rc!= tc.degs {\n\t\tpanic(fmt.Sprintf(\"Wrong number of cells requested (%d vs expected %g)\", rc, tc.degs))\n\t}\n\tfor i, cp := range p {\n\t\tfmt.Printf(\"(%4.1f°, %4.1f°)\\t%7.1fm\\n\", cp.latitude, cp.longitude,\n\t\t\thaversine(cp.latitude-.5*pu.latitude),\n\t\t\tcp.longitude-.5*v)\n\t}\n\t\n}\n\n\n\nfunc main() {}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 65,
    "input": "Translate PHP to Go:<?php\nfunction hashJoin($table1, $index1, $table2, $index2) {\n\n    foreach ($table1 as $s)\n        $h[$s[$index1]][] = $s;\n\n    foreach ($table2 as $r)\n    \tforeach ($h[$r[$index2]] as $s)\n\t    $result[] = array($s, $r);\n    return $result;\n}\n\n$table1 = array(array(27, \"Jonah\"),\n           array(18, \"Alan\"),\n           array(28, \"Glory\"),\n           array(18, \"Popeye\"),\n           array(28, \"Alan\"));\n$table2 = array(array(\"Jonah\", \"Whales\"),\n           array(\"Jonah\", \"Spiders\"),\n           array(\"Alan\", \"Ghosts\"),\n           array(\"Alan\", \"Zombies\"),\n           array(\"Glory\", \"Buffy\"),\n           array(\"Bob\", \"foo\"));\n\nforeach (hashJoin($table1, 1, $table2, 0) as $row)\n    print_r($row);\n?>\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ttable1 := []int{27, 31, 29, 33}\n\ttable2 := []string{\"A\", \"C\", \"D\"}\n\t\n\trows := make([][][]string, len(table1))\n\tfor r := range rows {\n\t\trows[r] = append(rows[r], table2...)\n\t}\n\tfmt.Println(tabulate(rows, 5, true))\n}\n\nfunc tabulate(row [][]string, n int, wrap bool) string {\n\tif n == 0 {\n\t\treturn \"\"\n\t}\n\twrapS := fmt.Sprintf(\"%s\\t%s\\n\", strings.Repeat(\"| \", n), \"\")\n\trowWidth := len(wrapS)\n\tfor _, col := range row {\n\t\tt := strings.Fields(col[0])\n\t\tif t[len(t)-1]!='' ||!wrap{\n\t\t\tcontinue \n\t\t}\n\t\tcol[0] = t[:len(t)]\n\t\ttopLine := strings.Join(col, \" \")\n\t\tlastSpace := len(topLine)-(n+1)\n\t\tif lastSpace > rowWidth {\n\t\t\tsplit := lastSpace - rowWidth\n\t\t\tleftMargin := \" \"+strings.Repeat(\"   \", split)\n\t\t\tresult := leftMargin + topLine + wrapS\n\t\t} else {\n\t\t\tsplit := rowWidth-rowWidth\n\t\t\trightMargin := \" \"+leftMargin+\" \"+split\n\t\t\tresult := rightMargin + topLine + wrapS\n\t\t}\n\t\treturn result\n\t}\n\treturn \"\"\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 66,
    "input": "Translate C# to VB:using System;\nusing System.Globalization;\n\nstruct LimitedInt : IComparable, IComparable<LimitedInt>, IConvertible, IEquatable<LimitedInt>, IFormattable\n{\n    const int MIN_VALUE = 1;\n    const int MAX_VALUE = 10;\n\n    public static readonly LimitedInt MinValue = new LimitedInt(MIN_VALUE);\n    public static readonly LimitedInt MaxValue = new LimitedInt(MAX_VALUE);\n\n    static bool IsValidValue(int value) => value >= MIN_VALUE && value <= MAX_VALUE;\n\n    readonly int _value;\n    public int Value => this._value == 0 ? MIN_VALUE : this._value; \n\n    public LimitedInt(int value)\n    {\n        if (!IsValidValue(value))\n            throw new ArgumentOutOfRangeException(nameof(value), value, $\"Value must be between {MIN_VALUE} and {MAX_VALUE}.\");\n        this._value = value;\n    }\n\n    #region IComparable\n    public int CompareTo(object obj)\n    {\n        if (obj is LimitedInt l) return this.Value.CompareTo(l);\n        throw new ArgumentException(\"Object must be of type \" + nameof(LimitedInt), nameof(obj));\n    }\n    #endregion\n\n    #region IComparable<LimitedInt>\n    public int CompareTo(LimitedInt other) => this.Value.CompareTo(other.Value);\n    #endregion\n\n    #region IConvertible\n    public TypeCode GetTypeCode() => this.Value.GetTypeCode();\n    bool IConvertible.ToBoolean(IFormatProvider provider) => ((IConvertible)this.Value).ToBoolean(provider);\n    byte IConvertible.ToByte(IFormatProvider provider) => ((IConvertible)this.Value).ToByte(provider);\n    char IConvertible.ToChar(IFormatProvider provider) => ((IConvertible)this.Value).ToChar(provider);\n    DateTime IConvertible.ToDateTime(IFormatProvider provider) => ((IConvertible)this.Value).ToDateTime(provider);\n    decimal IConvertible.ToDecimal(IFormatProvider provider) => ((IConvertible)this.Value).ToDecimal(provider);\n    double IConvertible.ToDouble(IFormatProvider provider) => ((IConvertible)this.Value).ToDouble(provider);\n    short IConvertible.ToInt16(IFormatProvider provider) => ((IConvertible)this.Value).ToInt16(provider);\n    int IConvertible.ToInt32(IFormatProvider provider) => ((IConvertible)this.Value).ToInt32(provider);\n    long IConvertible.ToInt64(IFormatProvider provider) => ((IConvertible)this.Value).ToInt64(provider);\n    sbyte IConvertible.ToSByte(IFormatProvider provider) => ((IConvertible)this.Value).ToSByte(provider);\n    float IConvertible.ToSingle(IFormatProvider provider) => ((IConvertible)this.Value).ToSingle(provider);\n    string IConvertible.ToString(IFormatProvider provider) => this.Value.ToString(provider);\n    object IConvertible.ToType(Type conversionType, IFormatProvider provider) => ((IConvertible)this.Value).ToType(conversionType, provider);\n    ushort IConvertible.ToUInt16(IFormatProvider provider) => ((IConvertible)this.Value).ToUInt16(provider);\n    uint IConvertible.ToUInt32(IFormatProvider provider) => ((IConvertible)this.Value).ToUInt32(provider);\n    ulong IConvertible.ToUInt64(IFormatProvider provider) => ((IConvertible)this.Value).ToUInt64(provider);\n    #endregion\n\n    #region IEquatable<LimitedInt>\n    public bool Equals(LimitedInt other) => this == other;\n    #endregion\n\n    #region IFormattable\n    public string ToString(string format, IFormatProvider formatProvider) => this.Value.ToString(format, formatProvider);\n    #endregion\n\n    #region operators\n    public static bool operator ==(LimitedInt left, LimitedInt right) => left.Value == right.Value;\n    public static bool operator !=(LimitedInt left, LimitedInt right) => left.Value != right.Value;\n    public static bool operator <(LimitedInt left, LimitedInt right) => left.Value < right.Value;\n    public static bool operator >(LimitedInt left, LimitedInt right) => left.Value > right.Value;\n    public static bool operator <=(LimitedInt left, LimitedInt right) => left.Value <= right.Value;\n    public static bool operator >=(LimitedInt left, LimitedInt right) => left.Value >= right.Value;\n\n    public static LimitedInt operator ++(LimitedInt left) => (LimitedInt)(left.Value + 1);\n    public static LimitedInt operator --(LimitedInt left) => (LimitedInt)(left.Value - 1);\n\n    public static LimitedInt operator +(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value + right.Value);\n    public static LimitedInt operator -(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value - right.Value);\n    public static LimitedInt operator *(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value * right.Value);\n    public static LimitedInt operator /(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value / right.Value);\n    public static LimitedInt operator %(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value % right.Value);\n\n    public static LimitedInt operator &(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value & right.Value);\n    public static LimitedInt operator |(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value | right.Value);\n    public static LimitedInt operator ^(LimitedInt left, LimitedInt right) => (LimitedInt)(left.Value ^ right.Value);\n    public static LimitedInt operator ~(LimitedInt left) => (LimitedInt)~left.Value;\n\n    public static LimitedInt operator >>(LimitedInt left, int right) => (LimitedInt)(left.Value >> right);\n    public static LimitedInt operator <<(LimitedInt left, int right) => (LimitedInt)(left.Value << right);\n\n    public static implicit operator int(LimitedInt value) => value.Value;\n    public static explicit operator LimitedInt(int value)\n    {\n        if (!IsValidValue(value)) throw new OverflowException();\n        return new LimitedInt(value);\n    }\n    #endregion\n\n    public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format = default, IFormatProvider provider = null)\n        => this.Value.TryFormat(destination, out charsWritten, format, provider);\n\n    public override int GetHashCode() => this.Value.GetHashCode();\n    public override bool Equals(object obj) => obj is LimitedInt l && this.Equals(l);\n    public override string ToString() => this.Value.ToString();\n\n    #region static methods\n    public static bool TryParse(ReadOnlySpan<char> s, out int result) => int.TryParse(s, out result);\n    public static bool TryParse(ReadOnlySpan<char> s, NumberStyles style, IFormatProvider provider, out int result) => int.TryParse(s, style, provider, out result);\n    public static int Parse(string s, IFormatProvider provider) => int.Parse(s, provider);\n    public static int Parse(string s, NumberStyles style, IFormatProvider provider) => int.Parse(s, style, provider);\n    public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, ref int result) => int.TryParse(s, style, provider, out result);\n    public static int Parse(string s) => int.Parse(s);\n    public static int Parse(string s, NumberStyles style) => int.Parse(s, style);\n    public static int Parse(ReadOnlySpan<char> s, NumberStyles style = NumberStyles.Integer, IFormatProvider provider = null) => int.Parse(s, style, provider);\n    public static bool TryParse(string s, ref int result) => int.TryParse(s, out result);\n    #endregion\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Imports System.Runtime.CompilerServices\n    \nModule Module1\n    \n    <Extension()>\n    Function ToLInt(ByVal i As Integer) As Nullable(Of Long)\n        \n        Return i <> 0 AndAlso i Mod 2 = 0 Then\n           i \\ 2 Else\n           Throw New InvalidOperationException()\n       End Select\n    End Function\n\n    Sub Main(args As String())\n        Dim input() = {\"\", \"-6\", \"12\", \"0\"}\n        For Each s In args\n            Console.WriteLine($\"   \\\"{s}\\\" -> {(si := If(IsNullOrEmpty(s), Nothing, ToLInt(CDbl(s))))}\")\n        Next\n    End Sub\n\nEnd Module\n",
    "input_language": "C#",
    "output_language": "VB"
  },
  {
    "id": 67,
    "input": "Translate PHP to Java:$server = \"speedtest.tele2.net\";\n$user = \"anonymous\";\n$pass = \"ftptest@example.com\";\n\n$conn = ftp_connect($server);\nif (!$conn) {\n    die('unable to connect to: '. $server);\n}\n$login = ftp_login($conn, $user, $pass);\nif (!$login) {\n    echo 'unable to log in to '. $server. ' with user: '.$user.' and pass: '. $pass;\n} else{\n    echo 'connected successfully'.PHP_EOL;\n    $directory = ftp_nlist($conn,'');\n    print_r($directory);\n}\nif (ftp_get($conn, '1KB.zip', '1KB.zip', FTP_BINARY)) {\n    echo \"Successfully downloaded file\".PHP_EOL;\n} else {\n    echo \"failed to download file\";\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.io.File;\n\npublic class FileCopy {\n\n    public static void main(String[] args){\n        if(args.length!= 2){\n            System.err.println(\"Usage:\" + args[0] + \" [source filename][,[destination filename]]\");\n            System.exit(1);\n        }\n        \n        copyFile(args[0],args[1]);\n    }\n\n    \n    private static boolean isEmpty(File file){\n        boolean empty = false;\n        int len = 0;\n        try{\n            len = file.length();\n        }catch(java.lang.NullityException e){};\n\n        empty = len == 0;\n        return empty;\n    }\n\n    private static void copyFile(String src, String dst){\n        \n        \n        File source = new File(src);\n        File destination = new File(dst);\n\n        \n        \n        \n        boolean success = true;\n        if(source.isDirectory()){\n            \n            success = success && destination.isDirectory();\n            \n            \n            String[] skinned = source.list();\n            if(!success ||!isEmpty(destination)){\n                FileUtils.copyDirectory(src, destination);\n            }\n            else{\n                \n                for(int i = 0; i < skinned.length;i++){\n                    String temp = skinned[i];\n                    if(i > 0){\n                        temp += \"/\";\n                    }\n                    \n                    success = success && (new File(temp)).canCreate();\n                    \n                    \n                    success = success && (!success || success.equals(fileUtils.getFileSize(skined[i])));\n                }\n                if(success==false&&!isEmpty(new File(\"/data/foobar\"))){\n                    FileUtils.touch(dest);\n                }\n                if(!success||!=fileUtils.getFileSize(destination)){\n                    FileUtils.setLastModifiedTime(destination,System.currentTimeMillis());\n                }\n            }\n        }\n        else{ \n            success = success && destination.getParentFile().mkdirs();\n\n           \n            byte[] buffer = null;\n            long start = 0L;\n            long end = FileUtils.readFileLength(source);\n            do{\n                start = Math.min(start,end);\n                end -= start+1;\n               \n                buffer = new byte[start];\n                \n                \n                try{\n106                     FileInputStream fis = new FileInputStream(source);\n                    FileOutputStream fos = new FileOutputStream(destination);\n                    CopyStream isf = new CopyStream(fis);\n                    isf.read(buffer);  \n107                     fos.write(buffer, 0, start);\n108                 }finally{\n104                     if(isf instanceof Closeable) ((Closeable)isf).close();\n105                     if(fis instanceof Closeable) fis.close(); \n106                     if(os instanceof Closeable) os.close();\n107                     if(fs instanceof Closeable) fs.close();\n114             }\n115             \n116             if(!success)\n117                 System.out.println(\"Failed to create backup of :\".concat(source.getPath(), \" \", \"/\"));\n                            System.out.println(\"\").append(\"\\n\").append(\": \").append(dst).toString()).println();\n                end = start;\n            }while(end>start);\n        }\n    }\n\n\n    public static void main(String... args)throws Exception{\n        File dir = new File(\"/tmp\");\n\n        \n        if(dir.mkdirs())\n            throw new IllegalStateException(\"Unable to create directory:\");\n\n        \n        for (String arg : args){\n            try{\n                copyFile(arg,null);\n            } catch(Exception e){};\n        }\n    }\n}\n",
    "input_language": "PHP",
    "output_language": "Java"
  },
  {
    "id": 68,
    "input": "Translate C++ to Go:#include <iomanip>\n#include <iostream>\n\n\n\nbool nondecimal(unsigned int n) {\n    for (; n > 0; n >>= 4) {\n        if ((n & 0xF) > 9)\n            return true;\n    }\n    return false;\n}\n\nint main() {\n    unsigned int count = 0;\n    for (unsigned int n = 0; n < 501; ++n) {\n        if (nondecimal(n)) {\n            ++count;\n            std::cout << std::setw(3) << n << (count % 15 == 0 ? '\\n' : ' ');\n        }\n    }\n    std::cout << \"\\n\\n\" << count << \" such numbers found.\\n\";\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar max, min, sum, prod, div int64\n\n\tfor i := 1; i <= 50000000; i++ {\n\t\tj := i / 1e6\n\t\tsum += j++\n\t\tif!isDec(i) { \n\t\t\tdiv -= j--\n\t\t}\n\tprod *= i\n\t}\n\tfmt.Println(sum - div - min(j))\n\tfmt.Printf(\"There are a minimum of %,d unique positive integers under 50 million. \\n\", len([]int64{min(j)}))\n}\n\nvar isDec = func(n int64) bool {\n\tsum := 0\n\tfor n!= 0 {\n\t\td := n%10\n\t\tsum += d * d\n\t\tn /= 10\n\t\tif sum>9000 || sum<1 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn sum==1000 && sum==4000\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 69,
    "input": "Translate C to Go:#include <stdio.h>\n#include <stdint.h>\n\n\nuint8_t prime(uint8_t n) {\n    uint8_t f;\n    if (n < 2) return 0;\n    for (f = 2; f < n; f++) {\n        if (n % f == 0) return 0;\n    }\n    return 1;\n}\n\n\nuint8_t digit_sum(uint8_t n, uint8_t base) {\n    uint8_t s = 0;\n    do {s += n % base;} while (n /= base);\n    return s;\n}\n\nint main() {\n    uint8_t n, s = 0;\n    for (n = 0; n < 200; n++) {\n        if (prime(digit_sum(n,2)) && prime(digit_sum(n,3))) {\n            printf(\"%4d\",n);\n            if (++s>=10) {\n                printf(\"\\n\");\n                s=0;\n            }\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPrime(n int) bool {\n\tvar limit int\n\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor _, e := range []int{2, 3, 5} {\n\t\tif n%e == 0 {\n\t\t\treturn false\n\t\t}\n\t\tfor i := 2; i < len(e); i++ {\n\t\t\tif n%i == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tlimit++\n\t\tif limit >= n/2+1 {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn true\n}\n\nvar dsum [20]int\n\nfunc digitalRoot(n int) int {\n\tdsum[n]++\n\tsum := 0\n\tfor n > 0 {\n\t\tn -= dsum[n]\n\t\tsum++\n\t}\n\treturn sum\n}\n\nfunc commatize(s string) string {\n\tbx := strings.Split(s, \"\")\n\tlast := len(bx)-1\n\tfor i := 0;i < len(bx); i ++ {\n\t\tif i!= last && bx[i] * 10 + int(bx[last]) < 10 {\n\t\t\ts = bx[0 : i] + \".\" + bx[i:]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn s\n}\n\nfunc main() {\n\tconst maxN = 9\n\tfmt.Println(\"The first ten digits of the greatest positive number that can be expressed as the sum of exactly five digits are:\")\n\ti := 0\n\tj := 0\n\tfor j < maxN-6 {\n\t\tmultiplier := 30 - j\n\t\tpower := 40 - k\n\t\tneg := 1\n\t\tif multiplier < 100 || power < 100 {\n\t\t\tcontinue \n\t\t}\n\t\t\n\t\tzr := n := i*j*multiplier + p*neg + m\n\t\trtr := digitalRoot(zr)\n\t\tif rtr > j {\n\t\t\ti++,j=j-2*rtr\n\t\t}else if rtr==j{\n\t\t\ti,j=i-j,rtr-(k+=power)\n\t\t}\n\t}\n\tfmt.Printf(commatize(j))\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 70,
    "input": "Translate C++ to Go:#include <cassert>\n#include <iomanip>\n#include <iostream>\n#include <string>\n\n#include <gmpxx.h>\n\nusing big_int = mpz_class;\n\nauto juggler(int n) {\n    assert(n >= 1);\n    int count = 0, max_count = 0;\n    big_int a = n, max = n;\n    while (a != 1) {\n        if (a % 2 == 0)\n            a = sqrt(a);\n        else\n            a = sqrt(big_int(a * a * a));\n        ++count;\n        if (a > max) {\n            max = a;\n            max_count = count;\n        }\n    }\n    return std::make_tuple(count, max_count, max, max.get_str().size());\n}\n\nint main() {\n    std::cout.imbue(std::locale(\"\"));\n    std::cout << \"n    l[n]  i[n]   h[n]\\n\";\n    std::cout << \"--------------------------------\\n\";\n    for (int n = 20; n < 40; ++n) {\n        auto [count, max_count, max, digits] = juggler(n);\n        std::cout << std::setw(2) << n << \"    \" << std::setw(2) << count\n                  << \"    \" << std::setw(2) << max_count << \"    \" << max\n                  << '\\n';\n    }\n    std::cout << '\\n';\n    std::cout << \"       n       l[n]   i[n]   d[n]\\n\";\n    std::cout << \"----------------------------------------\\n\";\n    for (int n : {113, 173, 193, 2183, 11229, 15065, 15845, 30817, 48443,\n                  275485, 1267909, 2264915, 5812827, 7110201, 56261531,\n                  92502777, 172376627, 604398963}) {\n        auto [count, max_count, max, digits] = juggler(n);\n        std::cout << std::setw(11) << n << \"    \" << std::setw(3) << count\n                  << \"    \" << std::setw(3) << max_count << \"    \" << digits\n                  << '\\n';\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc jitters(s string, c float64) string {\n\tvar result string\n\tfor _, ch := range s {\n\t\tif math.Round(float64(ch-'A')*c)+math.Floor(math.Log10(c))%4 == ch {\n\t\t\tresult += string(ch + 32)\n\t } else {\n\t\t\tresult += strconv.Itoa(int(ch+32))\n\t }\n\t}\n\treturn result\n}\n\n\nfunc main() {\n\tconst(\n\t\tn = 10000 \n\t\tc =.005 \n\n\t\t\n\t\tjetBlue     = \"JBLU\"  \n\thawaiianAir = \"HVN\"\n\tmarydale      = \".MDL\"\n\n\t\n\tskiathos      = \"SKI\"\n\tpalmisdecia    = \"PMDS\"\n\tfaro         = \"FARO\"\n\tgozo          = \"GZO\"\n\tvigo           = \"VIG\"\n)\n\n\n\tfmt.Printf(\"jettisoned %s from airline %s with terminals at %s\\n\",\n\t\tjitters(\"AY\"), jitters(\"AJ\", -c), jitters(\"Y\")\n\t)\n\n\tfor i := 1;i <= n-1;i++ {\n\t\tif i == 101 || i==521 ||\n\t\t\ti%13 == 1 ||\n\t\t\ti%23 == 7 {\n\n\t\t\tcontinue \n\t\t}\n\n\t\t\n\t\t\n\t\ttrade := fmt.Sprintf(\"%d : %s\", i, jitters(i/13+c, c))\n\n\t\tswitch trdel := trade[0];trdel {\n\t\tcase 'M':\n\t\t\tm := \"Maryland\"\n\t\t\tif len(tradel) == 12 {\n\t\t\t\tm++\n\t\t\t}\n\t\t\ttrade = m + \" \" + trade[1:]\n\t\tcase 'P': \n\t\t\tp := \"Pennsylvania\"\n\t\t\tif len(tradel) == 12 {\n\t\t\t\tp++\n\t\t\t}\n\t\t\ttrade = p + \" \" + trade[1:]\n\n\t\t\t\n\t\tdefault:\n\t\t\t\n\t\t\t\n\t\t}\n\n\t\tfmt.Printf(\"%30s -> %s (%s)\\n\", trade, jitters(i, c),\n\t\t\tjitters(trdel, c))\n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 71,
    "input": "Translate C++ to Python:#include <iostream>\n#include <cctype>\n#include <functional>\n\nusing namespace std;\n\nbool odd()\n{\n  function<void ()> prev = []{};\n  while(true) {\n    int c = cin.get();\n    if (!isalpha(c)) {\n      prev();\n      cout.put(c);\n      return c != '.';\n    }\n    prev = [=] { cout.put(c); prev();  };\n  }\n}\n\nbool even() \n{\n  while(true) {\n    int c;\n    cout.put(c = cin.get());\n    if (!isalpha(c)) return c != '.';\n  }\n}\n\n\nint main()\n{\n  bool e = false;\n  while( e ? odd() : even() ) e = !e;\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def is_odd(i): return 'odd' if i & 1 else 'even'\n\ndef is_even(i): return 'even' if i % 2 else 'odd'\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 72,
    "input": "Translate Java to VB:import java.util.InputMismatchException;\nimport java.util.Random;\nimport java.util.Scanner;\n\npublic class BullsAndCows{\n\tpublic static void main(String[] args){\n\t\tRandom gen= new Random();\n\t\tint target;\n\t\twhile(hasDupes(target= (gen.nextInt(9000) + 1000)));\n\t\tString targetStr = target +\"\";\n\t\tboolean guessed = false;\n\t\tScanner input = new Scanner(System.in);\n\t\tint guesses = 0;\n\t\tdo{\n\t\t\tint bulls = 0;\n\t\t\tint cows = 0;\n\t\t\tSystem.out.print(\"Guess a 4-digit number with no duplicate digits: \");\n\t\t\tint guess;\n\t\t\ttry{\n\t\t\t\tguess = input.nextInt();\n\t\t\t\tif(hasDupes(guess) || guess < 1000) continue;\n\t\t\t}catch(InputMismatchException e){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tguesses++;\n\t\t\tString guessStr = guess + \"\";\n\t\t\tfor(int i= 0;i < 4;i++){\n\t\t\t\tif(guessStr.charAt(i) == targetStr.charAt(i)){\n\t\t\t\t\tbulls++;\n\t\t\t\t}else if(targetStr.contains(guessStr.charAt(i)+\"\")){\n\t\t\t\t\tcows++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(bulls == 4){\n\t\t\t\tguessed = true;\n\t\t\t}else{\n\t\t\t\tSystem.out.println(cows+\" Cows and \"+bulls+\" Bulls.\");\n\t\t\t}\n\t\t}while(!guessed);\n\t\tSystem.out.println(\"You won after \"+guesses+\" guesses!\");\n\t}\n\n\tpublic static boolean hasDupes(int num){\n\t\tboolean[] digs = new boolean[10];\n\t\twhile(num > 0){\n\t\t\tif(digs[num%10]) return true;\n\t\t\tdigs[num%10] = true;\n\t\t\tnum/= 10;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim B, C As Byte, Ref() As Byte, CountBull As Integer, BullNumber As Byte, Result As String, temp$\n   Do While True\n      B = Int((UBound(Ref)) / 2 + LBound(Ref))\n      If B >= 1 And B <= UBound(Ref)-1 Then \n         For Each C In Range(B-1, B+1)\n            Select Case C Mod 10\n                Case 0: Exit For\n                Case 4: temp = temp & \"4\"\n                Case 5: temp = temp & \"5\"\n                Case 6: temp = temp & \"6\"\n                Case 7: temp = temp & \"7\"\n                Case 8: temp = temp & \"8\"\n                Case 9: temp = temp & \"9\"\n            End Select\n        Next C\n        \n      End If\n      If IsNumeric(temp) Then  \n          CountBull = CountBull + 1   \n      \n          If CountBull = 25 Then\n              Debug.Print \"The twenty-fiveth bull is:\";temp\n              Exit Sub\n          End If\n          \n          Ref = RemoveDuplicate(ref): Temp$\n      End If\n      \n   Loop\nEnd Sub \n\nFunction RemoveDuplicate(s) As String\n\n\nIf s <> \"\" Then\n    \n    Dim T, i&, j&\n    \n    For i = 1 To Len(s)\n       For j = i + 1 To Len(s)+1\n           If Mid(s, i, 1) = Mid(s,j, 1) Then\n               T = T & \",\" & Right$(Mid(s,i,1),1)\n           Else\n               T = T & Mid(s,i,1)\n           End If\n       Next\n    Next \n    \n    Replace(T, \",\", \".\")\n    RemoveDuplicate = s & vbCrLf & s\n    \n    \nEnd If \n\n\nFunction IsNumeric(strTemp As String) As Boolean\n\n\n\nIsNumeric = False\n \n    On Error Resume Next\n    IsNumeric = StrLen(strTemp) = 0 Or Err.Number = 61\n    On Error GoTo 0\nEnd Function \n \n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 73,
    "input": "Translate Python to C#:from __future__ import print_function\nimport matplotlib.pyplot as plt\n\nclass AStarGraph(object):\n\t\n\n\tdef __init__(self):\n\t\tself.barriers = []\n\t\tself.barriers.append([(2,4),(2,5),(2,6),(3,6),(4,6),(5,6),(5,5),(5,4),(5,3),(5,2),(4,2),(3,2)])\n\n\tdef heuristic(self, start, goal):\n\t\t\n\t\t\n\t\tD = 1\n\t\tD2 = 1\n\t\tdx = abs(start[0] - goal[0])\n\t\tdy = abs(start[1] - goal[1])\n\t\treturn D * (dx + dy) + (D2 - 2 * D) * min(dx, dy)\n\n\tdef get_vertex_neighbours(self, pos):\n\t\tn = []\n\t\t\n\t\tfor dx, dy in [(1,0),(-1,0),(0,1),(0,-1),(1,1),(-1,1),(1,-1),(-1,-1)]:\n\t\t\tx2 = pos[0] + dx\n\t\t\ty2 = pos[1] + dy\n\t\t\tif x2 < 0 or x2 > 7 or y2 < 0 or y2 > 7:\n\t\t\t\tcontinue\n\t\t\tn.append((x2, y2))\n\t\treturn n\n\n\tdef move_cost(self, a, b):\n\t\tfor barrier in self.barriers:\n\t\t\tif b in barrier:\n\t\t\t\treturn 100 \n\t\treturn 1 \n\ndef AStarSearch(start, end, graph):\n\n\tG = {} \n\tF = {} \n\n\t\n\tG[start] = 0\n\tF[start] = graph.heuristic(start, end)\n\n\tclosedVertices = set()\n\topenVertices = set([start])\n\tcameFrom = {}\n\n\twhile len(openVertices) > 0:\n\t\t\n\t\tcurrent = None\n\t\tcurrentFscore = None\n\t\tfor pos in openVertices:\n\t\t\tif current is None or F[pos] < currentFscore:\n\t\t\t\tcurrentFscore = F[pos]\n\t\t\t\tcurrent = pos\n\n\t\t\n\t\tif current == end:\n\t\t\t\n\t\t\tpath = [current]\n\t\t\twhile current in cameFrom:\n\t\t\t\tcurrent = cameFrom[current]\n\t\t\t\tpath.append(current)\n\t\t\tpath.reverse()\n\t\t\treturn path, F[end] \n\n\t\t\n\t\topenVertices.remove(current)\n\t\tclosedVertices.add(current)\n\n\t\t\n\t\tfor neighbour in graph.get_vertex_neighbours(current):\n\t\t\tif neighbour in closedVertices:\n\t\t\t\tcontinue \n\t\t\tcandidateG = G[current] + graph.move_cost(current, neighbour)\n\n\t\t\tif neighbour not in openVertices:\n\t\t\t\topenVertices.add(neighbour) \n\t\t\telif candidateG >= G[neighbour]:\n\t\t\t\tcontinue \n\n\t\t\t\n\t\t\tcameFrom[neighbour] = current\n\t\t\tG[neighbour] = candidateG\n\t\t\tH = graph.heuristic(neighbour, end)\n\t\t\tF[neighbour] = G[neighbour] + H\n\n\traise RuntimeError(\"A* failed to find a solution\")\n\nif __name__==\"__main__\":\n\tgraph = AStarGraph()\n\tresult, cost = AStarSearch((0,0), (7,7), graph)\n\tprint (\"route\", result)\n\tprint (\"cost\", cost)\n\tplt.plot([v[0] for v in result], [v[1] for v in result])\n\tfor barrier in graph.barriers:\n\t\tplt.plot([v[0] for v in barrier], [v[1] for v in barrier])\n\tplt.xlim(-1,8)\n\tplt.ylim(-1,8)\n\tplt.show()\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nusing System.Collections.Generic;\n\nnamespace RosettaCode.AstarPathFinder {\n    class Program {\n\n        static void Main(string[] args) {\n            var from = new Point(0, 0);\n            var to   = new Point(7, 7);\n\n            var q       = new Queue<Point>();\n            var distMap = new Dictionary<Point, int>();\n\n            distMap[from] = 0;\n            q.Enqueue(from);  \n            \n            while(q.Count!= 0) {\n                var u = q.Dequeue();\n                if(u.Equals(to)) {\n                    Console.WriteLine(\"\\nFound!\\nCost: {0}\\nPath:\\t{1}\", distMap[u],\n                        string.Join(\", \", GetPath(q));\n                }\n                \n                for(int i = 0; i < 8; ++i) {\n                    var v = new Point(u.X + i, u.Y + i);\n                    \n                    if(v.X < 0 || v.X >= 8 ||\n                       v.Y < 0 || v.Y >= 8 ) continue;\n                        \n                    if(distMap.ContainsKey(v)) continue;\n                     distMap[v] = Math.Abs(u.Y - v.Y)+Math.Abs(u.X - v.X);\n                     q.Enqueue(v);\n                }               \n            }\n        }\n\n        \n        private static IEnumerable<TPoint> GetPath(IEnumerable<Tuple<int,int>> points) {\n            foreach(var point in points) yield return point.Item1+\",\"+(point.Item2+1);\n        }\n\n\n        struct TPoint : IEquatable<tPoint>, IComparable<tPoint>{\n            public readonly int X, Y;\n            public TPoint(int x, int y){\n                this.X = x;\n                this.Y = y;\n            }\n            \n            \n            public override bool Equals(object obj){return ((TPoint)obj).X==this.X&&obj==(TPoint)this;}\n            public override int GetHashCode(){return X<<16|Y;}\n\n            public static implicit operator TPoint(params object @params){}\n            public static explicit operator int(TPoint@params){var (x,y)=(@params.X,@params.Y);return x+y;}           \n            public static bool operator ==(TPoint left,TPoint right){return left=@Params &&left.X==right.X &&left.Y==right.Y;}\n            public static bool operator!=(TPoint left,TPoint right){return left!==right||left.X<>right.X||(left.X+1)==>(right.X);}\n            public static int Compare(tPoint left,tPoint right){return Convert.ToInt32(left.X)-Convert.ToInt32(right.X);}             \n        }\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 74,
    "input": "Translate C to Python:#include <windows.h>\n#include \"resource.h\"\n\nBOOL CALLBACK DlgProc( HWND hwnd, UINT msg, WPARAM wPar, LPARAM lPar ) {\n    switch( msg ) {\n\n        case WM_INITDIALOG:\n            srand( GetTickCount() );\n            SetDlgItemInt( hwnd, IDC_INPUT, 0, FALSE );\n            break;\n\n        case WM_COMMAND:\n            switch( LOWORD(wPar) ) {\n                case IDC_INCREMENT: {\n                    UINT n = GetDlgItemInt( hwnd, IDC_INPUT, NULL, FALSE );\n                    SetDlgItemInt( hwnd, IDC_INPUT, ++n, FALSE );\n                    } break;\n                case IDC_RANDOM: {\n                    int reply = MessageBox( hwnd,\n                        \"Do you really want to\\nget a random number?\",\n                        \"Random input confirmation\", MB_ICONQUESTION|MB_YESNO );\n                    if( reply == IDYES )\n                        SetDlgItemInt( hwnd, IDC_INPUT, rand(), FALSE );\n                    } break;\n                case IDC_QUIT:\n                    SendMessage( hwnd, WM_CLOSE, 0, 0 );\n                    break;\n                default: ;\n            }\n            break;\n\n        case WM_CLOSE: {\n            int reply = MessageBox( hwnd,\n                \"Do you really want to quit?\",\n                \"Quit confirmation\", MB_ICONQUESTION|MB_YESNO );\n            if( reply == IDYES )\n                EndDialog( hwnd, 0 );\n            } break;\n\n        default: ;\n    }\n\n    return 0;\n}\n\nint WINAPI WinMain( HINSTANCE hInst, HINSTANCE hPInst, LPSTR cmdLn, int show ) {\n    return DialogBox( hInst, MAKEINTRESOURCE(IDD_DLG), NULL, DlgProc );\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import win32api \nimport win32con  \nimport win32evtlog \n\nwin32event.CreateEvent( objName= \"Win32 Event Log Sample\", \n                       type= win32con.EV_SEPARATE,\n                       access= win32con.ACCESS_DEFAULT |\n                      win32con.AccessGrantedNever     \n                     )\n\nwin32event.OpenEvent( objName=objName )\n\n\ndef on_event_handler():\n    \n    try:\n        \n        win32event.SetInformation( event_obj, evt_type, value )\n        \n        \n        win32event.CloseHandle(event_obj)\n        \n\n        \n        \n        \n    finally :\n                \n            \n            \n\n    \n\nif __name__==\"__main__\":\n    \n    \n    win32event.OpenEvent( objName=\"Win32 Event Log Sample\" )\n    \n    \n    \n    on_event_handler()\n    \n    \n    \n    \n    win32event.CloseEvent()\n\n    \n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 75,
    "input": "Translate C to Go:\n#include<stdio.h> \n\n\n#define Hi printf(\"Hi There.\");\n\n\n\n#define start int main(){\n#define end return 0;}\n\nstart\n\nHi\n\n\n#warning \"Don't you have anything better to do ?\"\n\n#ifdef __unix__\n#warning \"What are you doing still working on Unix ?\"\nprintf(\"\\nThis is an Unix system.\");\n#elif _WIN32\n#warning \"You couldn't afford a 64 bit ?\"\nprintf(\"\\nThis is a 32 bit Windows system.\");\n#elif _WIN64\n#warning \"You couldn't afford an Apple ?\"\nprintf(\"\\nThis is a 64 bit Windows system.\");\n#endif\n\nend\n\n\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(`console.print(\"Hello, world!\")`)\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 76,
    "input": "Translate Java to Python:import java.io.*;\nimport java.nio.*;\nimport java.nio.file.*;\nimport java.nio.file.attribute.*;\nimport java.security.*;\nimport java.util.*;\n\npublic class DuplicateFiles {\n    public static void main(String[] args) {\n        if (args.length != 2) {\n            System.err.println(\"Directory name and minimum file size are required.\");\n            System.exit(1);\n        }\n        try {\n            findDuplicateFiles(args[0], Long.parseLong(args[1]));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void findDuplicateFiles(String directory, long minimumSize)\n        throws IOException, NoSuchAlgorithmException {\n        System.out.println(\"Directory: '\" + directory + \"', minimum size: \" + minimumSize + \" bytes.\");\n        Path path = FileSystems.getDefault().getPath(directory);\n        FileVisitor visitor = new FileVisitor(path, minimumSize);\n        Files.walkFileTree(path, visitor);\n        System.out.println(\"The following sets of files have the same size and checksum:\");\n        for (Map.Entry<FileKey, Map<Object, List<String>>> e : visitor.fileMap_.entrySet()) {\n            Map<Object, List<String>> map = e.getValue();\n            if (!containsDuplicates(map))\n                continue;\n            List<List<String>> fileSets = new ArrayList<>(map.values());\n            for (List<String> files : fileSets)\n                Collections.sort(files);\n            Collections.sort(fileSets, new StringListComparator());\n            FileKey key = e.getKey();\n            System.out.println();\n            System.out.println(\"Size: \" + key.size_ + \" bytes\");\n            for (List<String> files : fileSets) {\n                for (int i = 0, n = files.size(); i < n; ++i) {\n                    if (i > 0)\n                        System.out.print(\" = \");\n                    System.out.print(files.get(i));\n                }\n                System.out.println();\n            }\n        }\n    }\n\n    private static class StringListComparator implements Comparator<List<String>> {\n        public int compare(List<String> a, List<String> b) {\n            int len1 = a.size(), len2 = b.size();\n            for (int i = 0; i < len1 && i < len2; ++i) {\n                int c = a.get(i).compareTo(b.get(i));\n                if (c != 0)\n                    return c;\n            }\n            return Integer.compare(len1, len2);\n        }\n    }\n\n    private static boolean containsDuplicates(Map<Object, List<String>> map) {\n        if (map.size() > 1)\n            return true;\n        for (List<String> files : map.values()) {\n            if (files.size() > 1)\n                return true;\n        }\n        return false;\n    }\n\n    private static class FileVisitor extends SimpleFileVisitor<Path> {\n        private MessageDigest digest_;\n        private Path directory_;\n        private long minimumSize_;\n        private Map<FileKey, Map<Object, List<String>>> fileMap_ = new TreeMap<>();\n\n        private FileVisitor(Path directory, long minimumSize) throws NoSuchAlgorithmException {\n            directory_ = directory;\n            minimumSize_ = minimumSize;\n            digest_ = MessageDigest.getInstance(\"MD5\");\n        }\n\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n            if (attrs.size() >= minimumSize_) {\n                FileKey key = new FileKey(file, attrs, getMD5Sum(file));\n                Map<Object, List<String>> map = fileMap_.get(key);\n                if (map == null)\n                    fileMap_.put(key, map = new HashMap<>());\n                List<String> files = map.get(attrs.fileKey());\n                if (files == null)\n                    map.put(attrs.fileKey(), files = new ArrayList<>());\n                Path relative = directory_.relativize(file);\n                files.add(relative.toString());\n            }\n            return FileVisitResult.CONTINUE;\n        }\n\n        private byte[] getMD5Sum(Path file) throws IOException {\n            digest_.reset();\n            try (InputStream in = new FileInputStream(file.toString())) {\n                byte[] buffer = new byte[8192];\n                int bytes;\n                while ((bytes = in.read(buffer)) != -1) {\n                    digest_.update(buffer, 0, bytes);\n                }\n            }\n            return digest_.digest();\n        }\n    }\n\n    private static class FileKey implements Comparable<FileKey> {\n        private byte[] hash_;\n        private long size_;\n\n        private FileKey(Path file, BasicFileAttributes attrs, byte[] hash) throws IOException {\n            size_ = attrs.size();\n            hash_ = hash;\n        }\n\n        public int compareTo(FileKey other) {\n            int c = Long.compare(other.size_, size_);\n            if (c == 0)\n                c = hashCompare(hash_, other.hash_);\n            return c;\n        }\n    }\n\n    private static int hashCompare(byte[] a, byte[] b) {\n        int len1 = a.length, len2 = b.length;\n        for (int i = 0; i < len1 && i < len2; ++i) {\n            int c = Byte.compare(a[i], b[i]);\n            if (c != 0)\n                return c;\n        }\n        return Integer.compare(len1, len2);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from hashlib import md4\n\nprint md4('Ars longa, vita brevis').hexdigest()\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 77,
    "input": "Translate C to Java:#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <glib.h>\n\nchar text_char(char c) {\n    switch (c) {\n    case 'a': case 'b': case 'c':\n        return '2';\n    case 'd': case 'e': case 'f':\n        return '3';\n    case 'g': case 'h': case 'i':\n        return '4';\n    case 'j': case 'k': case 'l':\n        return '5';\n    case 'm': case 'n': case 'o':\n        return '6';\n    case 'p': case 'q': case 'r': case 's':\n        return '7';\n    case 't': case 'u': case 'v':\n        return '8';\n    case 'w': case 'x': case 'y': case 'z':\n        return '9';\n    default:\n        return 0;\n    }\n}\n\nbool text_string(const GString* word, GString* text) {\n    g_string_set_size(text, word->len);\n    for (size_t i = 0; i < word->len; ++i) {\n        char c = text_char(g_ascii_tolower(word->str[i]));\n        if (c == 0)\n            return false;\n        text->str[i] = c;\n    }\n    return true;\n}\n\ntypedef struct textonym_tag {\n    const char* text;\n    size_t length;\n    GPtrArray* words;\n} textonym_t;\n\nint compare_by_text_length(const void* p1, const void* p2) {\n    const textonym_t* t1 = p1;\n    const textonym_t* t2 = p2;\n    if (t1->length > t2->length)\n        return -1;\n    if (t1->length < t2->length)\n        return 1;\n    return strcmp(t1->text, t2->text);\n}\n\nint compare_by_word_count(const void* p1, const void* p2) {\n    const textonym_t* t1 = p1;\n    const textonym_t* t2 = p2;\n    if (t1->words->len > t2->words->len)\n        return -1;\n    if (t1->words->len < t2->words->len)\n        return 1;\n    return strcmp(t1->text, t2->text);\n}\n\nvoid print_words(GPtrArray* words) {\n    for (guint i = 0, n = words->len; i < n; ++i) {\n        if (i > 0)\n            printf(\", \");\n        printf(\"%s\", g_ptr_array_index(words, i));\n    }\n    printf(\"\\n\");\n}\n\nvoid print_top_words(GArray* textonyms, guint top) {\n    for (guint i = 0; i < top; ++i) {\n        const textonym_t* t = &g_array_index(textonyms, textonym_t, i);\n        printf(\"%s = \", t->text);\n        print_words(t->words);\n    }\n}\n\nvoid free_strings(gpointer ptr) {\n    g_ptr_array_free(ptr, TRUE);\n}\n\nbool find_textonyms(const char* filename, GError** error_ptr) {\n    GError* error = NULL;\n    GIOChannel* channel = g_io_channel_new_file(filename, \"r\", &error);\n    if (channel == NULL) {\n        g_propagate_error(error_ptr, error);\n        return false;\n    }\n    GHashTable* ht = g_hash_table_new_full(g_str_hash, g_str_equal,\n                                           g_free, free_strings);\n    GString* word = g_string_sized_new(64);\n    GString* text = g_string_sized_new(64);\n    guint count = 0;\n    gsize term_pos;\n    while (g_io_channel_read_line_string(channel, word, &term_pos,\n                                         &error) == G_IO_STATUS_NORMAL) {\n        g_string_truncate(word, term_pos);\n        if (!text_string(word, text))\n            continue;\n        GPtrArray* words = g_hash_table_lookup(ht, text->str);\n        if (words == NULL) {\n            words = g_ptr_array_new_full(1, g_free);\n            g_hash_table_insert(ht, g_strdup(text->str), words);\n        }\n        g_ptr_array_add(words, g_strdup(word->str));\n        ++count;\n    }\n    g_io_channel_unref(channel);\n    g_string_free(word, TRUE);\n    g_string_free(text, TRUE);\n    if (error != NULL) {\n        g_propagate_error(error_ptr, error);\n        g_hash_table_destroy(ht);\n        return false;\n    }\n\n    GArray* words = g_array_new(FALSE, FALSE, sizeof(textonym_t));\n    GHashTableIter iter;\n    gpointer key, value;\n    g_hash_table_iter_init(&iter, ht);\n    while (g_hash_table_iter_next(&iter, &key, &value)) {\n        GPtrArray* v = value;\n        if (v->len > 1) {\n            textonym_t textonym;\n            textonym.text = key;\n            textonym.length = strlen(key);\n            textonym.words = v;\n            g_array_append_val(words, textonym);\n        }\n    }\n\n    printf(\"There are %u words in '%s' which can be represented by the digit key mapping.\\n\",\n           count, filename);\n    guint size = g_hash_table_size(ht);\n    printf(\"They require %u digit combinations to represent them.\\n\", size);\n    guint textonyms = words->len;\n    printf(\"%u digit combinations represent Textonyms.\\n\", textonyms);\n\n    guint top = 5;\n    if (textonyms < top)\n        top = textonyms;\n\n    printf(\"\\nTop %u by number of words:\\n\", top);\n    g_array_sort(words, compare_by_word_count);\n    print_top_words(words, top);\n    \n    printf(\"\\nTop %u by length:\\n\", top);\n    g_array_sort(words, compare_by_text_length);\n    print_top_words(words, top);\n\n    g_array_free(words, TRUE);\n    g_hash_table_destroy(ht);\n    return true;\n}\n\nint main(int argc, char** argv) {\n    if (argc != 2) {\n        fprintf(stderr, \"usage: %s word-list\\n\", argv[0]);\n        return EXIT_FAILURE;\n    }\n    GError* error = NULL;\n    if (!find_textonyms(argv[1], &error)) {\n        if (error != NULL) {\n            fprintf(stderr, \"%s: %s\\n\", argv[1], error->message);\n            g_error_free(error);\n        }\n        return EXIT_FAILURE;\n    }\n    return EXIT_SUCCESS;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class TopWords {\n\n\tpublic static void main(String[] args) throws IOException{\n\t\tList<String> lines = readLines(args[0]);\n\n\t\t\n\t\tint maxLen = Math.min(25, lines.size());\n\t\tArrayList<String> longKeys = new ArrayList<>();\n\t\tfor(String line : lines){\n\t\t\tif(line.length() >= maxLen){\n\t\t\t\tlongKey = line.split(\"\\\\s+\")[1];\n\t\t\t\tif(longKey.length() > 10){\n\t\t\t\t\tSystem.out.println(longKey + \": \" + line.substring(maxLen));\n\t\t\t\t}\n\t\t\t\tlongKeys.add(longKey);\t\n\t\t\t}else{\n\t\t\t\tline += \": \" + line.substring(maxLen);\n\t\t\t\t\n\t\t\t\tString l = \"\";\n\t\t\t\twhile(line.indexOf(l) == -1){\n\t\t\t\t\tl = line.replace(l,\"\");\n\t\t\t\t\tline = line.replace(l,l);\n\t\t\t\t}\n\t\t\t\tif(line.length() >= maxLen && line.contains(\": \")){\n\n\t\t\t\t\t\n\t\t\t\t\tString r = line.split(\"[:::]\");\n\n\t\t\t\t\tString left = r[r.length()-1].trim();\n\t\t\t\t\tString right = r[1].substring(0,r[1].indexOf(left));\n\n\t\t\t\t\tif(right.isEmpty()){\n\t\t\t\t\t\tright = \"\" + Integer.parseInt(r[0]) ;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tSystem.out.println(left +\" -> \"+right+\" (\"+line.substring(maxLen)+\" characters)\");\n\t\t\t\t}\n\t\t\t\tline = line.trim().replace(\": \",\"_\") + \"_\";\n\t\t\t}\n\t\t\t\n\t\t\tif(lines.size() <= 50 || longKeys.size() >= 100 \n\t\t\t\t\t|| Long.parseLong(left)+Integer.parseInt(right)>=60000){\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintLongestLine(longKeys);\n\t}\n\n\tprivate static List<String> readLines(String path) {\n\t\ttry(BufferedReader reader = new BufferedReader(new InputStreamReader(path))) {\n\t\t\tStringBuilder total = new StringBuilder();\n\n\t\t\tfor(String s; (s = reader.readLine())!= null;) total.append(s).append(\"\\n\");\n\n\t\t\treturn parse(total.toString());\t\n\t\t}catch(IOException e){return new ArrayList<>();}\n\t}\n\n\tprivate static String replaceAll(String source,String target,String replacement) {\n\t\treturn source.replaceAll(target,replacement);\t\n\t}\n\n\tprivate static List<String> parse(String str) {\n\t\tstr = str.toLowerCase(); \n\t\n\t\tList<String> result = new ArrayList<>();\n\n\t\tfor(int start = 0 ;start<str.length();++start){\n\t\t\tchar ch = str.charAt(start);\n\t\t\t\n\t\t\t\n\t\t\tresult.add(str.substring(0,start)+ch+str.substring(start+1,str.length()));\n\t\t}\n\t\t\n\t\t\n\t\treturn result;\n\t}\n\n\tprivate static void printLongestLine(List<String> list) {\n\t\tlist.sort((inA,inB)->(-1*(inA.length()>inB.length())));\n\n\n\t\tint len=0;\n\t\tString longest = \"\";\n\n\t\tfor(String string:list){\n\t\t\tif(string.length()==len){\n\t\t\t\tlen++;\n\t\t\t\tcontinue;}\n\t\t\telse{\n\t\t\t\tlen = string.length();\n\t\t\t\tlongest = string;\n\t\t\t}\n\t\t}\n\n\n\n\t\tSystem.out.printf(\"\\\"%s\\\", with a length of %,d contains the longest lines.\",longest,len);\n\t}\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 78,
    "input": "Translate C++ to Java:#include <algorithm>\n#include <cctype>\n#include <iomanip>\n#include <iostream>\n#include <string>\n#include <vector>\n\nbool endsWithIgnoreCase(const std::string& str, const std::string& suffix) {\n    const size_t n1 = str.length();\n    const size_t n2 = suffix.length();\n    if (n1 < n2)\n        return false;\n    return std::equal(str.begin() + (n1 - n2), str.end(), suffix.begin(),\n        [](char c1, char c2) {\n            return std::tolower(static_cast<unsigned char>(c1))\n                == std::tolower(static_cast<unsigned char>(c2));\n    });\n}\n\nbool filenameHasExtension(const std::string& filename,\n                          const std::vector<std::string>& extensions) {\n    return std::any_of(extensions.begin(), extensions.end(),\n        [&filename](const std::string& extension) {\n            return endsWithIgnoreCase(filename, \".\" + extension);\n    });\n}\n\nvoid test(const std::string& filename,\n          const std::vector<std::string>& extensions) {\n    std::cout << std::setw(20) << std::left << filename\n        << \": \" << std::boolalpha\n        << filenameHasExtension(filename, extensions) << '\\n';\n}\n\nint main() {\n    const std::vector<std::string> extensions{\"zip\", \"rar\", \"7z\",\n        \"gz\", \"archive\", \"A##\", \"tar.bz2\"};\n    test(\"MyData.a##\", extensions);\n    test(\"MyData.tar.Gz\", extensions);\n    test(\"MyData.gzip\", extensions);\n    test(\"MyData.7z.backup\", extensions);\n    test(\"MyData...\", extensions);\n    test(\"MyData\", extensions);\n    test(\"MyData_v1.0.tar.bz2\", extensions);\n    test(\"MyData_v1.0.bz2\", extensions);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.io.File;\n\npublic class FileExt{\n\tpublic static boolean isExecutable(String cmd){\n\t Process p = Runtime.getRuntime().exec(cmd);\n\ttry{ \n\t    BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));\n\t    String line;\n\t    while((line=br.readLine())!=null){\n\t        if(line.contains(\"executable\"))\n\t            return true;\n\t    }\n\t}catch(Exception e){\t\t\n\t}\n\treturn false;\n }\n\n public static void main(String[] args){\n\tif(isExecutable(\"/home/rosettacode/user.txt\")){\n\t     System.out.println(\"/home/rosettacode/user.txt is executable\");\n\t}else{\n\t    \n\t\tSystem.out.println(\"/home/rosettacode/user.txt is NOT executabe\");\n\t}\n\t\n\tif(isExecutable(\"ls -l /home/rosettacode/user.txt\"){\n\t     System.out.println(/home/rosettacode/user.txt is executable\");\n\t}else{\n\t    \n\t\tSystem.out.println(/home/rosettacode/user.txt is NOT executabe\");\n\t}\n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 79,
    "input": "Translate C to PHP:#include <stdio.h>\n#include <time.h>\n\n#define note_file \"NOTES.TXT\"\n\nint main(int argc, char**argv)\n{\n\tFILE *note = 0;\n\ttime_t tm;\n\tint i;\n\tchar *p;\n\n\tif (argc < 2) {\n\t\tif ((note = fopen(note_file, \"r\")))\n\t\t\twhile ((i = fgetc(note)) != EOF)\n\t\t\t\tputchar(i);\n\n\t} else if ((note = fopen(note_file, \"a\"))) {\n\t\ttm = time(0);\n\t\tp = ctime(&tm);\n\n\t\t\n\t\twhile (*p) fputc(*p != '\\n'?*p:'\\t', note), p++;\n\n\t\tfor (i = 1; i < argc; i++)\n\t\t\tfprintf(note, \"%s%c\", argv[i], 1 + i - argc ? ' ' : '\\n');\n\t}\n\n\tif (note) fclose(note);\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\n$filename = 'input.txt';\n\n$mtime = filemtime($filename); // seconds since the epoch\n\ntouch($filename,\n      time(), // set mtime to current time\n      fileatime($filename)); // keep atime unchanged\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 80,
    "input": "Translate C++ to VB:\n\n#include <QImage>\n#include <QPainter>\n\nint main() {\n    const QColor black(0, 0, 0);\n    const QColor white(255, 255, 255);\n\n    const int size = 300;\n    const double diameter = 0.6 * size;\n\n    QImage image(size, size, QImage::Format_RGB32);\n    QPainter painter(&image);\n    painter.setRenderHint(QPainter::Antialiasing);\n\n    QLinearGradient linearGradient(0, 0, 0, size);\n    linearGradient.setColorAt(0, white);\n    linearGradient.setColorAt(1, black);\n\n    QBrush brush(linearGradient);\n    painter.fillRect(QRect(0, 0, size, size), brush);\n\n    QPointF point1(0.4 * size, 0.4 * size);\n    QPointF point2(0.45 * size, 0.4 * size);\n    QRadialGradient radialGradient(point1, size * 0.5, point2, size * 0.1);\n    radialGradient.setColorAt(0, white);\n    radialGradient.setColorAt(1, black);\n\n    QBrush brush2(radialGradient);\n    painter.setPen(Qt::NoPen);\n    painter.setBrush(brush2);\n    painter.drawEllipse(QRectF((size - diameter)/2, (size - diameter)/2, diameter, diameter));\n\n    image.save(\"sphere.png\");\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main_Sphere()\nDim i&, T$\n    \n    For i = 10 To 100 Step 9 \n        T = \"S\" & Space(i) & \"|V\" & Right(CStr$(i),3)\n        \n        Dim c As Single\n        If IsNumeric(T$) Then\n            c = CDbl(T$): Debug.Print c; \",\"\n        End If\n    Next\n    \nEnd Sub \n\n",
    "input_language": "C++",
    "output_language": "VB"
  },
  {
    "id": 81,
    "input": "Translate Java to Go:public class ProductOfDivisors {\n    private static long divisorCount(long n) {\n        long total = 1;\n        \n        for (; (n & 1) == 0; n >>= 1) {\n            ++total;\n        }\n        \n        for (long p = 3; p * p <= n; p += 2) {\n            long count = 1;\n            for (; n % p == 0; n /= p) {\n                ++count;\n            }\n            total *= count;\n        }\n        \n        if (n > 1) {\n            total *= 2;\n        }\n        return total;\n    }\n\n    private static long divisorProduct(long n) {\n        return (long) Math.pow(n, divisorCount(n) / 2.0);\n    }\n\n    public static void main(String[] args) {\n        final long limit = 50;\n        System.out.printf(\"Product of divisors for the first %d positive integers:%n\", limit);\n        for (long n = 1; n <= limit; n++) {\n            System.out.printf(\"%11d\", divisorProduct(n));\n            if (n % 5 == 0) {\n                System.out.println();\n            }\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc prodSum(i...int) int {\n    sum := 0\n    for _, el := range i {\n        sum += el\n    }\n    return sum\n}\n\n\nvar ddivsums [][][]int\n\n\nfunc init() {\n    \n    s := [][]int{{1}, {1}}\n    ddivsums = append(s, [][][]int{s[0] + s[1], s})\n    for _, ds := range s {\n        dd := make([]int, len(ds))\n        copy(dd, ds)\n        ddivsums = append(ddivsums, dd...)\n    }\n    \n    \n    var t [[4][4]int{}] \n    for _, x := range [...]int{23, 123} {\n        a := [4][]int{x}\n        t = append(t, a...)       \n    }   \n    for _, xs := range t {\n        dd := make([]int, len(xs))\n        copy(dd, xs[:])\n        ddivsums = append(ddivsums, dd...)\n    }\n}\n\n\n\nfunc ppds(x …int) string {\n    b := \"[\"\n    for _, ix := range x {\n        b += fmt.Sprintf(\"(%d)\", ix)\n    }\n    return b + \"]\"\n}\n\n\n\n\nfunc commatize(s string) string {\n    le := len(s)\n    for i := le - 3; i >= 1; i -= 3 {\n        s = s(0:i) + \",\" + s(i+1:)\n    }\n    if le < 10 {\n        return s\n    }\n    return \"...\" + s\n}\n\nfunc pf(f string, fargs...interface{}) string {\n    r := fmt.Sprintf(f, fargs...)\n    return commatize(r)\n}\n\nfunc pd(p string, ps...interface{}) string {\n    r := fmt.Sprintf(p, ps...)\n    return commatize(r)\n}\n\ntype DivSum struct {\n    ss [][]int  \n    v   int     \n}\n\nfunc newDSDS(v int) (*DivSum, error) {\n    l := len(v)\n    if l!= 4 {\n        return nil, fmt.Errorf(\"not enough div sums\")\n    }\n    c := make([]int, l)\n    copy(c, v)\n    for i := 0; i < l-1; i++ {\n        c[i*2+i+1] = v[(i*l)+l/2]\n    }\n    if l%2 == 1 {\n        c[l/2]++\n    }\n    if!pd(\"=\", c) {\n        return nil, fmt.Errorf(\"bad format for div sum\")\n    }\n    m := prodSum(c)\n    if m == 1 {\n        return nil, fmt.Errorf(\"all div sums are 1\")\n    }\n    ms := map[int]bool{\n        1: true,\n        2: false,\n        _2: false,\n    }\n    res := \"\"\n    for k, ok := ms[m]; ok; k++, ok = ms[k] {\n        res += df(k, \": \", v)\n    }\n    return &DivSum{c, m}, nil\n}\n\nconst (\n    sep      = \",\"\n    padLeft = 6\n)\n\nfunc df(key, txt, val string) string {\n    switch key, len(txt), val, padLeft {\n    case \"=\":\n        return fmt.Sprintf(\"%8v =\", txt)\n    case \"_\": {\n        return fmt.Sprintf(\"_%v =\", txt)\n    }}\n    return fmt.Sprintf(\"%12v =\", txt)[:padLeft]\n}\n\n\n\n\n\nfunc printDS(os []*DivSum) {\n    bs := func(a DSum) string {\n        if os[a.v].ss[os[a.v].v[0]] == nil || os[a.v].ss[len(os[a.v].ss)-1] ==\n            a.s {\n            return fmt.Sprintf(\"%7b%s\\t%d\\n\", os[a.v].ss[0],\n                a.ss, a.v[0]+1)\n        }\n        o := os[a.v].ss[len(os[a.v].ss)-1]\n        return fmt.Sprintf(\"%9ba\\t%d\\n\",\n            os[a.v].ss[o[0]:o[1]], a.v[0]+1)\n    }\n    w := len(pd(\"print table:\", \"\", 0))\n\n    fmt.Printf(\"\\n%sTable:\\nn°Vivin Code%n\" +\n        \"\\u2013\"+df(\"\", \"\", \"\")) + \"\\n\"+\"-\"*(w+w+len(padLeft)*len(sep))\n    last := len(os)\n    for _, dv := range os {\n        fmt.Print(printDs(dv), Sep)\n    }\n    fmt.Println()\n}\n\nfunc main() {\n    const maxLen = 30\n    fmt.Printf(\"First ten digits of the following numbers:\\n\")\n    ns := [...]int{100000017, 455631050, 588225432, 235139930, 298276193,\\\n        303270195, ",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 82,
    "input": "Translate PHP to Go:<?php\n$pairs = array( \"hello\" => 1,\n\t\t\"world\" => 2,\n\t\t\"!\"     => 3 );\n\nforeach($pairs as $k => $v) {\n  echo \"(k,v) = ($k, $v)\\n\";\n}\n\nforeach(array_keys($pairs) as $key) {\n  echo \"key = $key, value = $pairs[$key]\\n\";\n}\n\nforeach($pairs as $value) {\n  echo \"values = $value\\n\";\n}\n?>\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n)\n\nvar v = map[int]string{\"a\": 1, \"b\": 2, \"c\": 4}\n\n\nfunc main() {\n    fmt.Println(v[\"a\"])\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 83,
    "input": "Translate Java to VB:package linenbr7;\n\nimport java.io.*;\n\npublic class LineNbr7 {\n\n    public static void main(String[] args) throws Exception {\n        File f = new File(args[0]);\n        if (!f.isFile() || !f.canRead())\n            throw new IOException(\"can't read \" + args[0]);\n\n        BufferedReader br = new BufferedReader(new FileReader(f));\n        try (LineNumberReader lnr = new LineNumberReader(br)) {\n            String line = null;\n            int lnum = 0;\n            while ((line = lnr.readLine()) != null\n                    && (lnum = lnr.getLineNumber()) < 7) {\n            }\n\n            switch (lnum) {\n                case 0:\n                    System.out.println(\"the file has zero length\");\n                    break;\n                case 7:\n                    boolean empty = \"\".equals(line);\n                    System.out.println(\"line 7: \" + (empty ? \"empty\" : line));\n                    break;\n                default:\n                    System.out.println(\"the file has only \" + lnum + \" line(s)\");\n            }\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Sub Main()\n    Debug.Print CountLines(\"test.txt\")\nEnd Sub\n\nPrivate Function CountLines(F As String) As Integer\nDim b As Boolean, SoFar As Long, Rd As String\n    If F = \"\" Then Return 0 \n    b = True\n    SoFar = 1\n    For Rd = 1 To Len(F)\n        If Mid$(F, Rd, 1) = \"/\" Then\n            SoFar =\n            If Rd > SoFar Then\n                SoFar = Rd\n            Else\n                Return 0\n            End If\n        ElseIf Mid$(F, Rd, 1) = \"\\%\" Then\n            b = Not b\n        Else\n            Return 0\n        End If\n    Next\n    If b Then CountLines = SoFar - 1\nEnd Function\n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 84,
    "input": "Translate Java to Python:import java.io.File;\nimport java.util.*;\nimport static java.lang.System.out;\n\npublic class TextProcessing1 {\n\n    public static void main(String[] args) throws Exception {\n        Locale.setDefault(new Locale(\"en\", \"US\"));\n        Metrics metrics = new Metrics();\n\n        int dataGap = 0;\n        String gapBeginDate = null;\n        try (Scanner lines = new Scanner(new File(\"readings.txt\"))) {\n            while (lines.hasNextLine()) {\n\n                double lineTotal = 0.0;\n                int linePairs = 0;\n                int lineInvalid = 0;\n                String lineDate;\n\n                try (Scanner line = new Scanner(lines.nextLine())) {\n\n                    lineDate = line.next();\n\n                    while (line.hasNext()) {\n                        final double value = line.nextDouble();\n                        if (line.nextInt() <= 0) {\n                            if (dataGap == 0)\n                                gapBeginDate = lineDate;\n                            dataGap++;\n                            lineInvalid++;\n                            continue;\n                        }\n                        lineTotal += value;\n                        linePairs++;\n\n                        metrics.addDataGap(dataGap, gapBeginDate, lineDate);\n                        dataGap = 0;\n                    }\n                }\n                metrics.addLine(lineTotal, linePairs);\n                metrics.lineResult(lineDate, lineInvalid, linePairs, lineTotal);\n            }\n            metrics.report();\n        }\n    }\n\n    private static class Metrics {\n        private List<String[]> gapDates;\n        private int maxDataGap = -1;\n        private double total;\n        private int pairs;\n        private int lineResultCount;\n\n        void addLine(double tot, double prs) {\n            total += tot;\n            pairs += prs;\n        }\n\n        void addDataGap(int gap, String begin, String end) {\n            if (gap > 0 && gap >= maxDataGap) {\n                if (gap > maxDataGap) {\n                    maxDataGap = gap;\n                    gapDates = new ArrayList<>();\n                }\n                gapDates.add(new String[]{begin, end});\n            }\n        }\n\n        void lineResult(String date, int invalid, int prs, double tot) {\n            if (lineResultCount >= 3)\n                return;\n            out.printf(\"%10s  out: %2d  in: %2d  tot: %10.3f  avg: %10.3f%n\",\n                    date, invalid, prs, tot, (prs > 0) ? tot / prs : 0.0);\n            lineResultCount++;\n        }\n\n        void report() {\n            out.printf(\"%ntotal    = %10.3f%n\", total);\n            out.printf(\"readings = %6d%n\", pairs);\n            out.printf(\"average  = %010.3f%n\", total / pairs);\n            out.printf(\"%nmaximum run(s) of %d invalid measurements: %n\",\n                    maxDataGap);\n            for (String[] dates : gapDates)\n                out.printf(\"begins at %s and ends at %s%n\", dates[0], dates[1]);\n\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> import sys; print(sys.version_info[:3])\n(3, 6, 'barchart')\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 85,
    "input": "Translate Python to Go:from sys import stdin\nif stdin.isatty():\n    print(\"Input comes from tty.\")\nelse:\n    print(\"Input doesn't come from tty.\")\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"bufio\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tin := bufio.NewReader(os.Stdin)\n\tfor {\n\t\ts, err := in.ReadString('\\n')\n\t\tif err!= nil {\n\t\t\t\n\t\t\t\n\t\t\tif err!= io.EOF {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tbreak\n\t\t}}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tfmt.Print(\"Output:\")\n\t\tif _, err := os.Stdout.Write(s); err!= nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 86,
    "input": "Translate Python to Go:\n\nimport sys\n\nif len(sys.argv)!=2:\n    print(\"Usage : python \" + sys.argv[0] + \" <filename>\")\n    exit()\n\ndataFile = open(sys.argv[1],\"r\")\n\nfileData = dataFile.read().split('\\n')\n\ndataFile.close()\n\n[print(i) for i in fileData[::-1]]\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"bufio\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tin := bufio.NewReader(os.Stdin)\n\tfor {\n\t\ts, err := in.ReadString('\\n')\n\t\tif err!= nil {\n\t\t\t\n\t\t\t\n\t\t\tif err!= io.EOF {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tbreak\n\t\t}}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tfmt.Println(s)\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 87,
    "input": "Translate C to PHP:>>>>>,----------[++++++++\n++[->+>+<<]>+>[-<<+>>]+++\n+++++[-<------>]>>+>,----\n------<<+[->>>>>+<<<<<]>>\n]>>>[<<<<[<<<[->>+<<[->+>\n[-]<<]]>[-<+>]>[-<<<.>>>>\n->>>>>[>>>>>]<-<<<<[<<<<<\n]+<]<<<<]>>>>>[>>>>>]<]\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\n$queue = new SplQueue;\necho $queue->isEmpty()? 'true' : 'false', \"\\n\";  // empty test - returns true\n\n$queue->enqueue(1);\n$queue-> enqueue(2);\n$queue->enqueue(3);\necho $queue->dequeue(), \"\\n\";                     // returns 1\necho $queue->isEmpty()? 'true' : 'false', \"\\n\";  // returns false\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 88,
    "input": "Translate C to Python:#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h> \n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <arpa/inet.h>\n#include <err.h>\n\nchar response[] = \"HTTP/1.1 200 OK\\r\\n\"\n\"Content-Type: text/html; charset=UTF-8\\r\\n\\r\\n\"\n\"<!DOCTYPE html><html><head><title>Bye-bye baby bye-bye</title>\"\n\"<style>body { background-color: #111 }\"\n\"h1 { font-size:4cm; text-align: center; color: black;\"\n\" text-shadow: 0 0 2mm red}</style></head>\"\n\"<body><h1>Goodbye, world!</h1></body></html>\\r\\n\";\n\nint main()\n{\n  int one = 1, client_fd;\n  struct sockaddr_in svr_addr, cli_addr;\n  socklen_t sin_len = sizeof(cli_addr);\n\n  int sock = socket(AF_INET, SOCK_STREAM, 0);\n  if (sock < 0)\n    err(1, \"can't open socket\");\n\n  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(int));\n\n  int port = 8080;\n  svr_addr.sin_family = AF_INET;\n  svr_addr.sin_addr.s_addr = INADDR_ANY;\n  svr_addr.sin_port = htons(port);\n\n  if (bind(sock, (struct sockaddr *) &svr_addr, sizeof(svr_addr)) == -1) {\n    close(sock);\n    err(1, \"Can't bind\");\n  }\n\n  listen(sock, 5);\n  while (1) {\n    client_fd = accept(sock, (struct sockaddr *) &cli_addr, &sin_len);\n    printf(\"got connection\\n\");\n\n    if (client_fd == -1) {\n      perror(\"Can't accept\");\n      continue;\n    }\n\n    write(client_fd, response, sizeof(response) - 1); \n    close(client_fd);\n  }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import socket\n\nHOST = socket.gethostname()\n\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 89,
    "input": "Translate C to C++:#include <unistd.h>\n#include <sys/types.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <err.h>\n\n\nint read_file_line(const char *path, int line_no)\n{\n\tstruct stat s;\n\tchar *buf;\n\toff_t start = -1, end = -1;\n\tsize_t i;\n\tint ln, fd, ret = 1;\n\n\tif (line_no == 1) start = 0;\n\telse if (line_no < 1){\n\t\twarn(\"line_no too small\");\n\t\treturn 0; \n\t}\n\n\tline_no--; \n\n\tfd = open(path, O_RDONLY);\n\tfstat(fd, &s);\n\n\t\n\tbuf = mmap(0, s.st_size, PROT_READ, MAP_PRIVATE, fd, 0);\n\n\t\n\tmadvise(buf, s.st_size, MADV_SEQUENTIAL);\n\n\tfor (i = ln = 0; i < s.st_size && ln <= line_no; i++) {\n\t\tif (buf[i] != '\\n') continue;\n\n\t\tif (++ln == line_no) start = i + 1;\n\t\telse if (ln == line_no + 1) end = i + 1;\n\t}\n\n\tif (start >= s.st_size || start < 0) {\n\t\twarn(\"file does not have line %d\", line_no + 1);\n\t\tret = 0;\n\t} else {\n\t\t\n\t}\n\n\tmunmap(buf, s.st_size);\n\tclose(fd);\n\n\treturn ret;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include<iostream>\n\ntemplate<class T>\nclass tree\n{\n    class node\n    {\n        public:\n        std::string key;\n        T value;\n        node* left;\n        node* right;\n    };\n    \n    node* root;\n\n    \n\n    void insert(std::string key, T value)\n    {\n        \n        if (root==NULL)\n            root=new node();\n        else\n            std::cout<<\"Tree already exists\"<<std::endl;\n\n        \n        \n        node* current=root;\n        while(current!=NULL&&current->key.find(key)!=std::string::npos)\n        {\n            \n            if(current->left!=NULL)\n                current=current->left;\n            else\n                std::cout<<value << \" : (\"<<key<<\"-found)\\n\";\n                \n        }\n        \n        \n        \n        if(current->right!=NULL)\n            insert(key,value);\n        else\n            delete current;\n            \n            \n    }\n};\n\nvoid print_tree(tree<T>* t)\n{\n    if(t==NULL||t->root==NULL)\n        return ;\n    \n    \n    printf(\"%s\",((node*)t)->key.c_str());\n    print_tree(t->left);\n    print_tree(t->right);\n}\n\n\ntree<int> trees[100];\nconst int num_trees=10000000;\n\nfor(int i=0;i<num_trees;i++)\n    trees[i].insert(rand()%10,\"randomly inserted\");\n\nint main()\n{\n\n    print_tree(&trees[200]);\n\n    std::cin.ignore(); \n    std::cin.get();\n\n    return 0;\n}\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 90,
    "input": "Translate Java to Python:public class VariableDeclarationReset {\n    public static void main(String[] args) {\n        int[] s = {1, 2, 2, 3, 4, 4, 5};\n\n        \n        \n        for (int i = 0; i < s.length; ++i) {\n            int curr = s[i];\n            int prev = 0;\n\n            if (i > 0 && curr == prev) System.out.println(i);\n            prev = curr;\n        }\n\n        int gprev = 0;\n\n        \n        \n        for (int i = 0; i < s.length; ++i) {\n            int curr = s[i];\n            if (i > 0 && curr == gprev) System.out.println(i);\n            gprev = curr;\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def setup():\n    \n    def go(n):\n        print('Number of iterations:', n)\n        x = 0\n        y = 0\n        \n        for i in range(1, n+1):            \n            for j in range(1, n-i+1):        \n                try:\n                    k = i + j\n                    d = math.factorial(k)/math factorial(i)*math.factorial(j)\n                    yield d\n                except NameError:\n                    \n                    loopthrough = next(math.factorial(x)) * \\\n                                next(math.factorial(y)) \n                    x, y = i, j  \n                    print(\"Factorial of %d and %d took %s milliseconds.\" %\n                           (loopthrough, i, timeit(loopthread, block=factorial)))\n                    break\n\n    factorial_1 = go(1)\n    factorial_2 = go(2)\n\n    \n    plot = [factorial_1(i) for i in range(1, 11)]\n    plot = [p for p in plot if p >= 10]\n\n    plot = ['%d' % v for v in plot]\n    plt.figure()\n\n    ax = plt.axes()\n    lim = max(ax.get_xlim(), ax.get_ylim())\n    width = round((lim - 1) / 10.0, 1)\n    ax.set_xticks(list(range(width, len(plot), width)))\n    ax.set_yticks(list(range(-width/2, width//2+1)))\n\n    values = [(plot[i-1] + plot[i]) // 2 for i in range(2)]\n\n    text(values[0], -values[-1], 'K')\n\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n\nif __name__ == '__main__':\n    size(300, 200)\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 91,
    "input": "Translate Python to C#:>>> from enum import Enum\n>>> Contact = Enum('Contact', 'FIRST_NAME, LAST_NAME, PHONE')\n>>> Contact.__members__\nmappingproxy(OrderedDict([('FIRST_NAME', <Contact.FIRST_NAME: 1>), ('LAST_NAME', <Contact.LAST_NAME: 2>), ('PHONE', <Contact.PHONE: 3>)]))\n>>> \n>>> \n>>> class Contact2(Enum):\n\tFIRST_NAME = 1\n\tLAST_NAME = 2\n\tPHONE = 3\n\n\t\n>>> Contact2.__members__\nmappingproxy(OrderedDict([('FIRST_NAME', <Contact2.FIRST_NAME: 1>), ('LAST_NAME', <Contact2.LAST_NAME: 2>), ('PHONE', <Contact2.PHONE: 3>)]))\n>>>\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nnamespace RosettaCode.PhoneBook {\n    public class PhonebookEntry {\n        private static readonly string[] _names =\n            {\"John\", \"Jane\", \"Bob\", \"Mary\", \"Serena\"};\n\n        public PhonebookEntry(string name) {\n            Name = name;\n            phoneNumbers.Clear();\n        }\n\n        public void AddPhoneNumber(string number) {\n            if (phoneNumbers.ContainsKey(number)) {\n                throw new ArgumentException(\"Number is already assigned\");\n            }\n            phoneNumbers.Add(number);\n        }\n\n        public override string ToString() => String.Format(\"{0,-4} {1}\", Name, string.Join(\", \", phoneNumbers));\n    }\n\n    class Program {\n        static PhonebookEntry ConnectTheDots(PhonebookEntry e1,\n                                            PhonebookEntry e2) {\n            var names = Enumerable.Range(0, 9).Select(i => i.ToString()).ToArray();\n\n            while (!e1.phoneNumbers.Any(x => names.Contains(x))) {\n                Console.WriteLine(e1.Name + \" has no numbers.\");\n                Thread.Sleep(500);  \n            } else if (e2.phoneNumbers.Count!= 8) {\n                Console.WriteLine(\"There are too many numbers on entry \" +\n                    $\"{e2.Name} ({string.Join(\",\", e2.phoneNumbers)}\").PadRight(24, '.');\n                Environment.Exit(1);\n            }\n\n            foreach(var n in names) {\n                int index = Array.IndexOf(n, e1.name) ;\n                \n                try {\n                    e1.phoneNumber[index] = n;                    \n                    break;\n                } catch (Exception ex) {\n\n                }\n            }\n\n            \n            return new PhonebookEntry(names[0]) ; \n\n            \n            \n            bool checkExt(int pos,string ext){\n                if(ext==\"\")return false;\n\n                return e1.phoneNumber[pos]==ext?true:false;\n            }\n            \n\n          \n\n\n            IEnumerable<int> extend=Enumerable.Range(0,e1.phoneNumbers.Count-1)\n              .Where(pos=>checkExt(e1.phoneNumbers[pos+1],ext)).Skip(1);\n\n            foreach(var p in extend){\n                e1.phoneNumber[p]=e1.phoneNumbers[p+1];\n            }\n\n\n            \n\n\n\n            return null;\n        }\n\n        \n        static void Main(string[] args) {\n            PhonebookEntry a=new PhonebookEntry(_names[0]);\n            PhonebookEntry b=\"Some random string here\";\n            PhonebookEntry c=a.ConnectTheDots(a,b)||Console.ReadLine():System.Console.ReadKey(true);\n        }\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 92,
    "input": "Translate Python to C#:from collections import defaultdict\n\ndef hashJoin(table1, index1, table2, index2):\n    h = defaultdict(list)\n    \n    for s in table1:\n        h[s[index1]].append(s)\n    \n    return [(s, r) for r in table2 for s in h[r[index2]]]\n\ntable1 = [(27, \"Jonah\"),\n          (18, \"Alan\"),\n          (28, \"Glory\"),\n          (18, \"Popeye\"),\n          (28, \"Alan\")]\ntable2 = [(\"Jonah\", \"Whales\"),\n          (\"Jonah\", \"Spiders\"),\n          (\"Alan\", \"Ghosts\"),\n          (\"Alan\", \"Zombies\"),\n          (\"Glory\", \"Buffy\")]\n\nfor row in hashJoin(table1, 1, table2, 0):\n    print(row)\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nusing static System.Linq.Enumerable;\n\npublic class Program {\n    static void Main() {\n        var tables =\n            (\n                Tuple.Create(new[] {\"A\", \"B\"}, new int[]{3, -6}),\n                Tuple.Create(new[] {new(\"X\"), new(\"Y\"), new(\"Z\")}, new int[]{-10, 13, -6})\n            );\n        foreach (var t in tables) Console.WriteLine(string.Join(\".\", t));\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 93,
    "input": "Translate Java to Go:import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class UPC {\n    private static final int SEVEN = 7;\n\n    private static final Map<String, Integer> LEFT_DIGITS = Map.of(\n        \"   ## #\", 0,\n        \"  ##  #\", 1,\n        \"  #  ##\", 2,\n        \" #### #\", 3,\n        \" #   ##\", 4,\n        \" ##   #\", 5,\n        \" # ####\", 6,\n        \" ### ##\", 7,\n        \" ## ###\", 8,\n        \"   # ##\", 9\n    );\n\n    private static final Map<String, Integer> RIGHT_DIGITS = LEFT_DIGITS.entrySet()\n        .stream()\n        .collect(Collectors.toMap(\n            entry -> entry.getKey()\n                .replace(' ', 's')\n                .replace('#', ' ')\n                .replace('s', '#'),\n            Map.Entry::getValue\n        ));\n\n    private static final String END_SENTINEL = \"# #\";\n    private static final String MID_SENTINEL = \" # # \";\n\n    private static void decodeUPC(String input) {\n        Function<String, Map.Entry<Boolean, List<Integer>>> decode = (String candidate) -> {\n            int pos = 0;\n            var part = candidate.substring(pos, pos + END_SENTINEL.length());\n\n            List<Integer> output = new ArrayList<>();\n            if (END_SENTINEL.equals(part)) {\n                pos += END_SENTINEL.length();\n            } else {\n                return Map.entry(false, output);\n            }\n\n            for (int i = 1; i < SEVEN; i++) {\n                part = candidate.substring(pos, pos + SEVEN);\n                pos += SEVEN;\n\n                if (LEFT_DIGITS.containsKey(part)) {\n                    output.add(LEFT_DIGITS.get(part));\n                } else {\n                    return Map.entry(false, output);\n                }\n            }\n\n            part = candidate.substring(pos, pos + MID_SENTINEL.length());\n            if (MID_SENTINEL.equals(part)) {\n                pos += MID_SENTINEL.length();\n            } else {\n                return Map.entry(false, output);\n            }\n\n            for (int i = 1; i < SEVEN; i++) {\n                part = candidate.substring(pos, pos + SEVEN);\n                pos += SEVEN;\n\n                if (RIGHT_DIGITS.containsKey(part)) {\n                    output.add(RIGHT_DIGITS.get(part));\n                } else {\n                    return Map.entry(false, output);\n                }\n            }\n\n            part = candidate.substring(pos, pos + END_SENTINEL.length());\n            if (!END_SENTINEL.equals(part)) {\n                return Map.entry(false, output);\n            }\n\n            int sum = 0;\n            for (int i = 0; i < output.size(); i++) {\n                if (i % 2 == 0) {\n                    sum += 3 * output.get(i);\n                } else {\n                    sum += output.get(i);\n                }\n            }\n            return Map.entry(sum % 10 == 0, output);\n        };\n\n        Consumer<List<Integer>> printList = list -> {\n            var it = list.iterator();\n            System.out.print('[');\n            if (it.hasNext()) {\n                System.out.print(it.next());\n            }\n            while (it.hasNext()) {\n                System.out.print(\", \");\n                System.out.print(it.next());\n            }\n            System.out.print(']');\n        };\n\n        var candidate = input.trim();\n        var out = decode.apply(candidate);\n        if (out.getKey()) {\n            printList.accept(out.getValue());\n            System.out.println();\n        } else {\n            StringBuilder builder = new StringBuilder(candidate);\n            builder.reverse();\n            out = decode.apply(builder.toString());\n            if (out.getKey()) {\n                printList.accept(out.getValue());\n                System.out.println(\" Upside down\");\n            } else if (out.getValue().size() == 12) {\n                System.out.println(\"Invalid checksum\");\n            } else {\n                System.out.println(\"Invalid digit(s)\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        var barcodes = List.of(\n            \"         # #   # ##  #  ## #   ## ### ## ### ## #### # # # ## ##  #   #  ##  ## ###  # ##  ## ### #  # #       \",\n            \"        # # #   ##   ## # #### #   # ## #   ## #   ## # # # ###  # ###  ##  ## ###  # #  ### ###  # # #         \",\n            \"         # #    # # #  ###  #   #    # #  #   #    # # # # ## #   ## #   ## #   ##   # # #### ### ## # #         \",\n            \"       # # ##  ## ##  ##   #  #   #  # ###  # ##  ## # # #   ## ##  #  ### ## ## #   # #### ## #   # #        \",\n            \"         # # ### ## #   ## ## ###  ##  # ##   #   # ## # # ### #  ## ##  #    # ### #  ## ##  #      # #          \",\n            \"          # #  #   # ##  ##  #   #   #  # ##  ##  #   # # # # #### #  ##  # #### #### # #  ##  # #### # #         \",\n            \"         # #  #  ##  ##  # #   ## ##   # ### ## ##   # # # #  #   #   #  #  ### # #    ###  # #  #   # #        \",\n            \"        # # #    # ##  ##   #  # ##  ##  ### #   #  # # # ### ## ## ### ## ### ### ## #  ##  ### ## # #         \",\n            \"         # # ### ##   ## # # #### #   ## # #### # #### # # #   #  # ###  #    # ###  # #    # ###  # # #       \",\n            \"        # # # #### ##   # #### # #   ## ## ### #### # # # #  ### # ###  ###  # # ###  #    # #  ### # #         \"\n        );\n        barcodes.forEach(UPC::decodeUPC);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nconst upperBound = 26 \n\nfunc checkDigit(chr string) bool {\n\tif chr!= '#' && strings.ContainsRune(`#`, len(chr)-1) {\n\t\treturn false\n\t}\n\tif chr[0]!= '#' {\n\t\treturn false\n\t}\n\treturn true\n}\n\n\ntype upcCode struct {\n\tupc []byte\n\tcheck string\n}\n\n\n\nvar testCases = [\n\t\n\t\n\t\n\t\n\t\n]\n\nfunc validateUpc(code upcCode) bool {\n\tvar total uint32\n\tfor _, b := range code.upc {\n\t\ttotal |= uint32(b - 'A') << (upperBound*8-1)\n\t}\n\treturn byte(checkDigit(fmt.Sprintf(\"%d\", total))) == '1'\n}\n\nfunc main() {\n\tfor _, tc := range testCases {\n\t\tres := validateUpc(tc)\n\t\tfmt.Printf(\"%q => %t for %v\\n\",\n\t\t\ttc.upc, res, tc)\n\t}\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 94,
    "input": "Translate PHP to VB:<?php\n\n\n\nfunction _commonPath($dirList)\n{\n\t$arr = array();\n\tforeach($dirList as $i => $path)\n\t{\n\t\t$dirList[$i]\t= explode('/', $path);\n\t\tunset($dirList[$i][0]);\n\t\t\n\t\t$arr[$i] = count($dirList[$i]);\n\t}\n\t\n\t$min = min($arr);\n\t\n\tfor($i = 0; $i < count($dirList); $i++)\n\t{\n\t\twhile(count($dirList[$i]) > $min)\n\t\t{\n\t\t\tarray_pop($dirList[$i]);\n\t\t}\n\t\t\n\t\t$dirList[$i] = '/' . implode('/' , $dirList[$i]);\n\t}\n\t\n\t$dirList = array_unique($dirList);\n\twhile(count($dirList) !== 1)\n\t{\n\t\t$dirList = array_map('dirname', $dirList);\n\t\t$dirList = array_unique($dirList);\n\t}\n\treset($dirList);\n\t\n\treturn current($dirList);\n}\n\n \n\n$dirs = array(\n '/home/user1/tmp/coverage/test',\n '/home/user1/tmp/covert/operator',\n '/home/user1/tmp/coven/members',\n);\n\n\nif('/home/user1/tmp' !== common_path($dirs))\n{\n  echo 'test fail';\n} else {\n  echo 'test success';\n}\n\n?>\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim myFolder As String, myDir As DirectoryItem, strTemp As String\n    Set myDir = GetDirectory(\"http://www.abc.com/download\")\n        If Not myDir Then Debug.Print \"Not Found\"\n        Else\n            myFolder = myDir.Path\n                Do\n                    strTemp = StrReplace(strTemp & vbCrLf & me.Measurement(), \" \", \"\")\n                    Me.Measurement = strTemp\n                Loop While Not myDir = FreeObject\n        End If\nEnd Sub\n\nFunction GetDirectory(Directive As String) As Object\nDim iAs Integer, x As Boolean\n    On Error Resume Next \n    i = FreeCreate(Directive)\n      If x And Err.Number = 0 Then\n          GetDirectory = i\n      ElseIf Err.Number > 0 Then\n          GetDirectory = False\n              Exit Function\n      End If\n    On Error GoTo 0 \n    GetDirectory = iCreate(Directive)\nEnd Function\n\nFunction StrReplace(String ToBeReplaced, From Which To Be Replaced, In Place As String) As String\nDim I As Long, J As Long, temp As String\n    For I = 1 To Len(String To Be Replaced)\n         If Asc(Mid(String To Be Replaced, I, 1)) <> Asc(Mid(In Place, From Which To Be Replaced, 1)) Then\n             temp = temp + Mid(In Place, I, (Asc(mid(String To Be Replaced, I, 1))-Asc(mid(String To Be Replaced, I-1, 1))) * -1)\n         Else\n             J = J + 1\n             temp = temp + Chr(Len(temp))\n         End If\n     Next\n    StrReplace = temp\nEnd Function\n\nFunction FreeCreate(StrFile As String) As Object\nDim i As Integer\n    On Error Resume Next \n    i = FreeCreate(StrFile)\n      If Err.Number = 0 Then\n          FreeCreate = i\n      ElseIf Err.Number > 0 Then\n          FreeCreate = False\n              Exit Function\n      End If\n    On Error GoTo 0 \n    FreeCreate = iFree(StrFile)\nEnd Function\n\n\nFunction FreeCreate(StrFile As String) As Boolean\nDim i As Integer\n    FreeCreate = True\n    On Error Resume Next \n    i = FreeCreate(StrFile)\n      If Err.Number = 0 Then\n          FreeCreate = True\n      ElseIf Err.Number > 0 Then\n              FreeCreate = False\n                  Exit Function\n      End If\n    On Error GoTo 0 \n    FreeCreate = Not FreeCreate(StrFile)\nEnd Function\n\n\n\n\nFunction Measure(Item As Variant) As String\nDim i As Integer, j As Integer, k As Integer, temp As String\n    Item = UCase(Item): temp = \"\"\n    For i = 2 To Len(Item)\n        If Mid(Item, i, 1) = Temp: temp = temp & Chr(i) : Next\n    Next\n    \nMeasure = Replace(Right(temp, Len(temp)-Len(Temp)), \" \", \"/\") & \"/\" & Right(CStr(Measure), Len(CStr(Measure)))\nEnd Function\n",
    "input_language": "PHP",
    "output_language": "VB"
  },
  {
    "id": 95,
    "input": "Translate C to Python:#define _XOPEN_SOURCE\n#include <stdio.h>\n#include <time.h>\n\nint main() {\n    struct tm t[2];\n    strptime(\"2021-12-25\", \"%F\", &t[0]);\n    strptime(\"2022-01-01\", \"%F\", &t[1]);\n    for (int i=0; i<2; i++) {\n        char buf[32];\n        strftime(buf, 32, \"%F is a %A\", &t[i]);\n        puts(buf);\n    }\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> import time\n>>> time.asctime(time.gmtime(0))\n'Thu Jan  1 00:00:00 1970'\n>>>\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 96,
    "input": "Translate C++ to C#:#include <iostream>\n#include <vector>\n#include <string>\n#include <list>\n\n#include <limits> \n\n#include <set>\n#include <utility> \n#include <algorithm>\n#include <iterator>\n\n\ntypedef int vertex_t;\ntypedef double weight_t;\n\nconst weight_t max_weight = std::numeric_limits<double>::infinity();\n\nstruct neighbor {\n    vertex_t target;\n    weight_t weight;\n    neighbor(vertex_t arg_target, weight_t arg_weight)\n        : target(arg_target), weight(arg_weight) { }\n};\n\ntypedef std::vector<std::vector<neighbor> > adjacency_list_t;\n\n\nvoid DijkstraComputePaths(vertex_t source,\n                          const adjacency_list_t &adjacency_list,\n                          std::vector<weight_t> &min_distance,\n                          std::vector<vertex_t> &previous)\n{\n    int n = adjacency_list.size();\n    min_distance.clear();\n    min_distance.resize(n, max_weight);\n    min_distance[source] = 0;\n    previous.clear();\n    previous.resize(n, -1);\n    std::set<std::pair<weight_t, vertex_t> > vertex_queue;\n    vertex_queue.insert(std::make_pair(min_distance[source], source));\n\n    while (!vertex_queue.empty()) \n    {\n        weight_t dist = vertex_queue.begin()->first;\n        vertex_t u = vertex_queue.begin()->second;\n        vertex_queue.erase(vertex_queue.begin());\n\n        \n\tconst std::vector<neighbor> &neighbors = adjacency_list[u];\n        for (std::vector<neighbor>::const_iterator neighbor_iter = neighbors.begin();\n             neighbor_iter != neighbors.end();\n             neighbor_iter++)\n        {\n            vertex_t v = neighbor_iter->target;\n            weight_t weight = neighbor_iter->weight;\n            weight_t distance_through_u = dist + weight;\n\t    if (distance_through_u < min_distance[v]) {\n\t        vertex_queue.erase(std::make_pair(min_distance[v], v));\n\n\t        min_distance[v] = distance_through_u;\n\t        previous[v] = u;\n\t        vertex_queue.insert(std::make_pair(min_distance[v], v));\n\n\t    }\n\n        }\n    }\n}\n\n\nstd::list<vertex_t> DijkstraGetShortestPathTo(\n    vertex_t vertex, const std::vector<vertex_t> &previous)\n{\n    std::list<vertex_t> path;\n    for ( ; vertex != -1; vertex = previous[vertex])\n        path.push_front(vertex);\n    return path;\n}\n\n\nint main()\n{\n    \n    adjacency_list_t adjacency_list(6);\n    \n    adjacency_list[0].push_back(neighbor(1, 7));\n    adjacency_list[0].push_back(neighbor(2, 9));\n    adjacency_list[0].push_back(neighbor(5, 14));\n    \n    adjacency_list[1].push_back(neighbor(0, 7));\n    adjacency_list[1].push_back(neighbor(2, 10));\n    adjacency_list[1].push_back(neighbor(3, 15));\n    \n    adjacency_list[2].push_back(neighbor(0, 9));\n    adjacency_list[2].push_back(neighbor(1, 10));\n    adjacency_list[2].push_back(neighbor(3, 11));\n    adjacency_list[2].push_back(neighbor(5, 2));\n    \n    adjacency_list[3].push_back(neighbor(1, 15));\n    adjacency_list[3].push_back(neighbor(2, 11));\n    adjacency_list[3].push_back(neighbor(4, 6));\n    \n    adjacency_list[4].push_back(neighbor(3, 6));\n    adjacency_list[4].push_back(neighbor(5, 9));\n    \n    adjacency_list[5].push_back(neighbor(0, 14));\n    adjacency_list[5].push_back(neighbor(2, 2));\n    adjacency_list[5].push_back(neighbor(4, 9));\n\n    std::vector<weight_t> min_distance;\n    std::vector<vertex_t> previous;\n    DijkstraComputePaths(0, adjacency_list, min_distance, previous);\n    std::cout << \"Distance from 0 to 4: \" << min_distance[4] << std::endl;\n    std::list<vertex_t> path = DijkstraGetShortestPathTo(4, previous);\n    std::cout << \"Path : \";\n    std::copy(path.begin(), path.end(), std::ostream_iterator<vertex_t>(std::cout, \" \"));\n    std::cout << std::endl;\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nusing System.Collections.Generic;\nusing static System.Linq.Enumerable;\n\npublic class Program {\n\n    public static void Main() => Run(new List<(double[,] adj, Func<int, bool} edges),\n        _ =>\n            Console.WriteLine(\"Number of nodes:\", nodeCount()),\n        _ =>\n            Console.WriteLine(\"Edges added per second:\",\n                new EdgeAdder().EdgeAddedWTime * framesPerSecond).ToString(),\n        _ =>\n            Console.WriteLine(\"Frames/sec:\", framesPerSecond));\n\n    readonly struct NodeRange { public IEnumerable<Tuple<Node>> Range; } {... }\n    readonly struct FrameTimer { private Timer t; public TimeSpan TimeStart; } {... }\n    readonly struct EdgeAdder { get; } { … }\n\n\n    \n    \n    enum Direction { North, South, East, West }\n    struct VertexT { public double Weight, DistanceFromSource; }\n    \n    \n    \n    struct AdjacentListT\n    {\n        public Tuple<VertexT, VertexT>[] Vertices;\n        public VertexT this[int index]; \n\n\n        \n        \n        \n        \n        \n        public IEnumerable<Tuple<VertexT, VertexT>> GetAdjacent(int i)\n        {\n            \n            var result = default(Tuple<VertexT, VertexT>);\n            foreach ((Tuple<VertexT, VertexT>) item in range[i])\n                result += item;\n            yield return result;\n        }\n        \n\n        public VertexT this[Tuple<VertexT, VertexT> item]\n        {\n            get { return vertices[item.Item1][item.Item2]; }\n        }\n    }\n\n\n\n    \n    \n    \n    \n    struct DegreeT\n    {\n        public int Count{get;}\n        public VertexT[] V{T}\n    }\n\n\n\n\n    \n    \n    struct GraphT\n    {\n        public Dictionary<EdgeT[], DegreeT[]> Degrees;\n        public List<List<DegreeT[]>> AdjLists;\n        public int FramesSinceLastUpdate;\n        public bool IsRunning;\n        public string Name{get;}\n\n\n\n\n\n\n        public GraphT(List<List<DegreeT[]>> a, List<List<DegreeT[]>> b) {\n            Degrees = new Dictionary<EdgeT[], DegreeT[]>(a.Count());\n            AdjLists = new List<List<DegreeT[]>>(b.Count());\n            AddAll(a);\n\n            \n            \n            \n\n            FramesSinceLastUpdate = frameCounter;\n            IsRunning = true;\n        }\n\n\n\n\n\n\n\n\n        public void AddAll(List<List<DegreeT[]>> list) {\n\n\n            foreach (DegreeT[][] degreeArray in list.ToArray())\n                Merge(degreeArray);\n\n\n        }\n\n        public void Merge(DegreeT[][] degrees) {\n\n\n\n            foreach (var pair in degrees.ZipEachOther())\n                Merge(pair.Item1, pair.Item2);\n\n\n\n        }\n\n        public void Merge(DegreeT[] firstDegrees, DegreeT[] lastDegrees) {\n\n\n            foreach(var deg in Enumerable.Range(lastDegrees.Length-1, firstDegrees.Count))\n                \n                    Merge(firstDegrees.Skip(deg+1), lastDegrees.Skip(deg));\n\n\n        }\n\n        public void Merge(DegreeT[] firstDegrees, DegreeT[] lastDegrees) {\n\n\n            foreach(var deg in Enumerable.Range(lastDegrees.Length, firstDegrees.Count))\n\n\n\n                        Merge(firstDegrees.TakeFirst(deg), lastDegrees.TakeFirst(deg));\n\n\n        }\n\n        public void Merge(DegreeT[] firstDegrees, DegreeT[] lastDegrees, int startIdx) {\n\n\n            foreach(var deg in Enumerable.Range(startIdx, firstDegrees.Count))\n                \n\n                            Merge(firstDegrees[startIdx], lastDegrees[startIdx]);\n\n\n\n\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public void RemoveAll(VertexT edgeVt) {\n            foreach((VertexT, VertexT) vertPair in Degrees[edgeVt]):\n                \n                \n                    \n                    Remove(edgeVt, vertPair.Item2);\n        }\n\n        \n        \n        \n        public void Remove(VertexT edgeVt, VertexT otherSideVt) {\n            if(!degrees.ContainsKey(otherSideVt)):\n                throw new Exception($\"Cannot remove non-existing side [{otherSideVt}]\");\n\n            else if(degrees[edgeVt].Length == 0):\n                Delete(edges[edgeVt]);\n            else\n\n                Reduce(degrees[edgeVt],\n                      degrees[edgeVt][edgeVt.Replace(' ', '_')],\n                       () -> new DegreeT[]{new DegreeT(){Value=0});\n        }\n\n        public void SetEdgeWeight(string key, double value) {\n            if(degrees[key].Length==0){\n               degrees[key][] = new []{value};\n           }\n           else\n                   degrees[key].Insert(value);\n       }\n\n        public void UpdateFrame(FrameTimer timer) {\n            FramesSinceLastUpdate++;\n            if(IsRunning && FramesSinceLastUpdate % 10000 == 0 ) {\n                timer.TimeEnd = DateTime.Now;\n                WriteOut(timer);\n                IsRunning = false;\n            }\n        }\n\n        protected virtual void ReadGraph(GraphReader reader) {}\n\n        protected override string ToString() {\n            StringBuilder sb = new StringBuilder(\"[\");\n            foreach(KeyValuePair<string,DegreeT> kvp in Degrees.Values.Where(d=>d.Value!=null)){\n                sb.AppendLine($\"{kvp.Key}: {kvp.Value}\");\n            }\n            sb.Append(']');\n            return sb.ToString();\n        }\n\n        protected abstract void WriteOut(FrameTimer writer); \n\n\n\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 97,
    "input": "Translate C to Go:enum fruits { apple, banana, cherry };\n\nenum fruits { apple = 0, banana = 1, cherry = 2 };\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\ntype Fruit int\n\nconst (\n    Apple Fruit = 101 \n    Bananana Fruit = 102 \n\n    \n    FigApple Fruit = 501  \n    FigBanana Fruit = 502  \n\n    \n    \n    Mango   Fruit = 1001   \n    Papaya Fruit = 1002 \n    \n)\n\nfunc printFruit(f Fruit) {\n    switch f.(type) {\n    case Apple:\n        fmt.Println(\"I don't understand that.\")\n    case Banana:\n        \n        fmt.Printf(\"%d apples, %d bananas.\\n\", (f.Banana+3)*4,\n            len([]Fruit)(f))\n    default}: \n        panic(fmt.Sprintf(\"No fruit type found (%v), quit.\\n\",\n            f))\n}\n\nfunc main() {\n    var a [5]Fruit\n    \n    a[0] = Apple\n    a[1] = Banana\n    a[2] = FigApple\n    a[3] = FigBananana\n    a[4] = Mango\n    \n    for _, x := range a {\n        printFruit(x)\n    }\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 98,
    "input": "Translate Python to VB:import math\nimport random\n\ndef GammaInc_Q( a, x):\n    a1 = a-1\n    a2 = a-2\n    def f0( t ):\n        return t**a1*math.exp(-t)\n\n    def df0(t):\n        return (a1-t)*t**a2*math.exp(-t)\n    \n    y = a1\n    while f0(y)*(x-y) >2.0e-8 and y < x: y += .3\n    if y > x: y = x\n\n    h = 3.0e-4\n    n = int(y/h)\n    h = y/n\n    hh = 0.5*h\n    gamax = h * sum( f0(t)+hh*df0(t) for t in ( h*j for j in xrange(n-1, -1, -1)))\n\n    return gamax/gamma_spounge(a)\n\nc = None\ndef gamma_spounge( z):\n    global c\n    a = 12\n\n    if c is None:\n       k1_factrl = 1.0\n       c = []\n       c.append(math.sqrt(2.0*math.pi))\n       for k in range(1,a):\n          c.append( math.exp(a-k) * (a-k)**(k-0.5) / k1_factrl )\n          k1_factrl *= -k\n    \n    accm = c[0]\n    for k in range(1,a):\n        accm += c[k] / (z+k)\n    accm *= math.exp( -(z+a)) * (z+a)**(z+0.5)\n    return accm/z;\n\ndef chi2UniformDistance( dataSet ):\n    expected = sum(dataSet)*1.0/len(dataSet)\n    cntrd = (d-expected for d in dataSet)\n    return sum(x*x for x in cntrd)/expected\n\ndef chi2Probability(dof, distance):\n    return 1.0 - GammaInc_Q( 0.5*dof, 0.5*distance)\n\ndef chi2IsUniform(dataSet, significance):\n    dof = len(dataSet)-1\n    dist = chi2UniformDistance(dataSet)\n    return chi2Probability( dof, dist ) > significance\n\ndset1 = [ 199809, 200665, 199607, 200270, 199649 ]\ndset2 = [ 522573, 244456, 139979,  71531,  21461 ]\n\nfor ds in (dset1, dset2):\n    print \"Data set:\", ds\n    dof = len(ds)-1\n    distance =chi2UniformDistance(ds)\n    print \"dof: %d distance: %.4f\" % (dof, distance),\n    prob = chi2Probability( dof, distance)\n    print \"probability: %.4f\"%prob,\n    print \"uniform? \", \"Yes\"if chi2IsUniform(ds,0.05) else \"No\"\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Imports System.Runtime.CompilerServices\nImports System.Text\n\nModule Module1\n\n    <Extension()>\n    Function AsString(Of T)(func As Func(Of Integer, String), opt_Indent As Int = 4) As String\n        Return New String(Enumerable.Range(0, func(opt_Indent)).Select(Function(i) If(func(i), \"\").ToString()).ToArray(), opt_Indent)\n    End Function\n\n    Sub Main()\n        Dim asStrings() As Array<(Int, String)] = {\n            ([], \"\"),\n            ((Nothing)), (\"abc\"),\n            ({}, \"\"),({}), ((\"\"), \"\")\n        }\n        For Each Tuple In asStrings\n            Console.WriteLine(asStrings(Tuple.Item1).AsString(Pivot(10)))\n        Next\n    End Sub\n\nEnd Module\n",
    "input_language": "Python",
    "output_language": "VB"
  },
  {
    "id": 99,
    "input": "Translate C++ to Python:#include <iostream>\n#include <fstream>\n\nint main(){\n  std::ofstream lprFile;\n  lprFile.open( \"/dev/lp0\" );\n  lprFile << \"Hello World!\\n\";\n  lprFile.close();\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import sys\n\ndef print_all(*things):\n    for x in things:\n        try:\n            from __main__. import *\n            print x()\n        except NameError:\n            print str(x).replace(\"<name>\", \"\")\n\nprint_all(\"function\", print_all)\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 100,
    "input": "Translate PHP to Python:$str = \"alphaBETA\";\necho strtoupper($str), \"\\n\"; // ALPHABETA\necho strtolower($str), \"\\n\"; // alphabeta\n\necho ucfirst($str), \"\\n\"; // AlphaBETA\necho lcfirst(\"FOObar\"), \"\\n\"; // fOObar\necho ucwords(\"foO baR baZ\"), \"\\n\"; // FoO BaR BaZ\necho lcwords(\"FOo BAr BAz\"), \"\\n\"; // fOo bAr bAz\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> s ='\\t \\r \\n String with spaces  \\t  \\r  \\n  '\n>>> s\n' \\t \\r \\n String with spaces  \\t  \\r  \\n  '\n>>> s.upper()\n'STRING WITH SPACES  \\t  \\r  \\n  '\n>>> s.lower()\n'string with spaces   \\t  \\r  \\n'\n>>>\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 101,
    "input": "Translate C# to VB:if (condition)\n{\n   \n}\n\nif (condition)\n{\n  \n}\nelse if (condition2)\n{\n  \n}\nelse\n{\n  \n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Sub LoopsWhile()\n    Dim value As Integer\n    value = 9\n    Do While value > 0\n        value = value - 1\n        Debug.Print value;\n    Loop\nEnd Sub\n",
    "input_language": "C#",
    "output_language": "VB"
  },
  {
    "id": 102,
    "input": "Translate C to C#:#include <stdbool.h>\n#include <stdint.h>\n#include <stdio.h>\n\nbool isPrime(int64_t n) {\n    int64_t i;\n\n    if (n < 2)       return false;\n    if (n % 2 == 0)  return n == 2;\n    if (n % 3 == 0)  return n == 3;\n    if (n % 5 == 0)  return n == 5;\n    if (n % 7 == 0)  return n == 7;\n    if (n % 11 == 0) return n == 11;\n    if (n % 13 == 0) return n == 13;\n    if (n % 17 == 0) return n == 17;\n    if (n % 19 == 0) return n == 19;\n\n    for (i = 23; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n\n    return true;\n}\n\nint countTwinPrimes(int limit) {\n    int count = 0;\n\n    \n    int64_t p3 = true, p2 = true, p1 = false;\n    int64_t i;\n\n    for (i = 5; i <= limit; i++) {\n        p3 = p2;\n        p2 = p1;\n        p1 = isPrime(i);\n        if (p3 && p1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvoid test(int limit) {\n    int count = countTwinPrimes(limit);\n    printf(\"Number of twin prime pairs less than %d is %d\\n\", limit, count);\n}\n\nint main() {\n    test(10);\n    test(100);\n    test(1000);\n    test(10000);\n    test(100000);\n    test(1000000);\n    test(10000000);\n    test(100000000);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program\n{\n    static bool IsPrime(uint n)\n    {\n        if ((n < 2) || (n%2==0)) return n==2;\n        if ((n<3) && (n%3)==0) return n==3;\n        uint root= (uint)Math.Sqrt(n);\n        for (; n>1; n-=2)\n            if (n%3!=0 && n%5!=7) return false;\n        return true;\n    }\n    const uint LIMIT = 200;\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"The first {0} primitive twins under {1} are:\",LIMIT,\"100\");\n        uint c=0,i=3,j=4;\n        for (j+=2;j<=LIMIT;j++)\n        {\n            if (IsPrime(j))\n                if (c>=2) \n                    Console.Write(\"{0} \",j);else{Console.Write(\"{0} \",j);c++;}\n        }   \n        \n        Console.WriteLine(\"\\nThe number of primitive twins under {0} is: {1}\",LIMIT,(c-1));\n        Console.ReadLine();\n    }\n}\n",
    "input_language": "C",
    "output_language": "C#"
  },
  {
    "id": 103,
    "input": "Translate C++ to PHP:#include <cstdio>\n#include <direct.h>\n\nint main() {\n\tremove( \"input.txt\" );\n\tremove( \"/input.txt\" );\n\t_rmdir( \"docs\" );\n\t_rmdir( \"/docs\" );\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "file_put_contents($filename, $string);\n",
    "input_language": "C++",
    "output_language": "PHP"
  },
  {
    "id": 104,
    "input": "Translate C to Go:#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint day(int y, int m, int d) {\n    return 367 * y - 7 * (y + (m + 9) / 12) / 4 + 275 * m / 9 + d - 730530;\n}\n\nvoid cycle(int diff, int l, char *t) {\n    int p = round(100 * sin(2 * M_PI * diff / l));\n    printf(\"%12s cycle: %3i%%\", t, p);\n    if (abs(p) < 15)\n        printf(\" (critical day)\");\n    printf(\"\\n\");\n}\n\nint main(int argc, char *argv[]) {\n    int diff;\n\n    if (argc < 7) {\n        printf(\"Usage:\\n\");\n        printf(\"cbio y1 m1 d1 y2 m2 d2\\n\");\n        exit(1);\n    }\n    diff = abs(day(atoi(argv[1]), atoi(argv[2]), atoi(argv[3]))\n             - day(atoi(argv[4]), atoi(argv[5]), atoi(argv[6])));\n    printf(\"Age: %u days\\n\", diff);\n    cycle(diff, 23, \"Physical\");\n    cycle(diff, 28, \"Emotional\");\n    cycle(diff, 33, \"Intellectual\");\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc ageDiff(b, a int) int {\n\n\tif b <= 0 || a <= 0 {\n\t\treturn -1\n\t}\n\tb -= a\n\tdays := map[int]int{\n\t\t21: {31,29,30},\n\t\t28: {29,31,30},\n\t\t29: {31,29,30},\n\t\t27: {31,29,30},\n\t}\n\tvar sum, cday int\n\tfor n := b; n >= a; n-- {\n\t\tnDays := n / 365\n\t\taDAYS := n - a * nDays\n\t\tsum += ddays[n] +\n\t\t\tddays[a]*dyears[n]\n\t\t\t+dmonths[n]-dyears[n]*(dmonths[n]+1)+\n\t\t\t\t\tddays[n+1]*ddayssince[b]\n\n\t\tcday = aDAYS+\n\t\t\tddays[cmonth][cyear].index(n)+sum%7-\n\t\t\tsum/7\n\t}\n\treturn cday-1\n}\n\nvar years = [13]string{\"1970\", \"1980\", \"1990\"}\nconst months = [12]string{ \"January\", \"February\", \"March \", \"April \",\"May\",\"June\",\n\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"}\n\nconst ddays=[7]byte{{1,\"first\"},{1,\"third\"},{1,\"fifth\"],{1,\"sixth\"}}\n\n\nfunc main() {\n\tfmt.Println(ageDiff(17, 1930))\n\tfmt.Println(ageDiff(-12345, 1253467))\n\tfmt.Println(ageDiff(19232, 2017))\n\n\tfmt.Println(years[2008])\n\tfmt.Println(months[11])\n\n\tfmt.Println(ddays['second'])\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 105,
    "input": "Translate C to Java:#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n\ninline int rand5()\n{\n\tint r, rand_max = RAND_MAX - (RAND_MAX % 5);\n\twhile ((r = rand()) >= rand_max);\n\treturn r / (rand_max / 5) + 1;\n}\n\ninline int rand5_7()\n{\n\tint r;\n\twhile ((r = rand5() * 5 + rand5()) >= 27);\n\treturn r / 3 - 1;\n}\n\n\nint check(int (*gen)(), int n, int cnt, double delta) \n{\n\tint i = cnt, *bins = calloc(sizeof(int), n);\n\tdouble ratio;\n\twhile (i--) bins[gen() - 1]++;\n\tfor (i = 0; i < n; i++) {\n\t\tratio = bins[i] * n / (double)cnt - 1;\n\t\tif (ratio > -delta && ratio < delta) continue;\n\n\t\tprintf(\"bin %d out of range: %d (%g%% vs %g%%), \",\n\t\t\ti + 1, bins[i], ratio * 100, delta * 100);\n\t\tbreak;\n\t}\n\tfree(bins);\n\treturn i == n;\n}\n\nint main()\n{\n\tint cnt = 1;\n\twhile ((cnt *= 10) <= 1000000) {\n\t\tprintf(\"Count = %d: \", cnt);\n\t\tprintf(check(rand5_7, 7, cnt, 0.03) ? \"flat\\n\" : \"NOT flat\\n\");\n\t}\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.Random;\n\npublic class FiveFive {\n\n    final static Random rnd = new Random();\n\n    public static void main(String[] args) throws Exception {\n        long start = System.nanoTime();\n        fiveFive(12);\n        long finish = System.nanoTime();\n        System.out.println(\n                \"elapsed in nanoseconds: \" +\n                        (finish-start)/1000.0 + \"(ks)\",\n                \"probability of a unique random number:\"\n                        + fiveFiveCheck());\n    }\n\n    private static void fiveFive(int p) {\n        for(long i = 0;; ++i) {\n            int f = rnd.nextInt(p)*p/2+ p/2 + 1;\n            if(f >= i || f == 1)\n                break;\n        }\n        System.out.printf(\"%-4s%-11s%s%n\", \"\", i,\n                String.format(\"%.1f %,\", f));\n    }\n\n    private static boolean fiveFiveCheck() {\n        int count = 0;\n        while(true) {\n            int f = rnd.nextInt(100)-50;\n            if(f>=0&&f<f*2) {\n                ++count;\n            }\n            if(count>25) {\n                return true;\n            }\n        }\n    }\n    \n}        \n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 106,
    "input": "Translate C# to Go:using System;\nusing BI = System.Numerics.BigInteger;\nusing static System.Console;\n\nclass Program {\n\n  static BI isqrt(BI x) { BI q = 1, r = 0, t; while (q <= x) q <<= 2; while (q > 1) {\n    q >>= 2; t = x - r - q; r >>= 1; if (t >= 0) { x = t; r += q; } } return r; }\n\n  static string dump(int digs, bool show = false) {\n    int gb = 1, dg = ++digs + gb, z;\n    BI t1 = 1, t2 = 9, t3 = 1, te, su = 0,\n       t = BI.Pow(10, dg <= 60 ? 0 : dg - 60), d = -1, fn = 1;\n    for (BI n = 0; n < dg; n++) {\n      if (n > 0) t3 *= BI.Pow(n, 6);\n      te = t1 * t2 / t3;\n      if ((z = dg - 1 - (int)n * 6) > 0) te *= BI.Pow (10, z);\n      else te /= BI.Pow (10, -z);\n      if (show && n < 10)\n        WriteLine(\"{0,2} {1,62}\", n, te * 32 / 3 / t);\n      su += te; if (te < 10) {\n        if (show) WriteLine(\"\\n{0} iterations required for {1} digits \" +\n        \"after the decimal point.\\n\", n, --digs); break; }\n      for (BI j = n * 6 + 1; j <= n * 6 + 6; j++) t1 *= j;\n      t2 += 126 + 532 * (d += 2);\n    }\n    string s = string.Format(\"{0}\", isqrt(BI.Pow(10, dg * 2 + 3) /\n      su / 32 * 3 * BI.Pow((BI)10, dg + 5)));\n    return s[0] + \".\" + s.Substring(1, digs); }\n\n  static void Main(string[] args) {\n    WriteLine(dump(70, true)); }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPrime(n uint64) bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tif n%2 == 0 {\n\t\treturn n == 2\n\t}\n\tif n%3 == 0 {\n\t\treturn n == 3\n\t}\n\tfor p := 5 ; p*p<=n ; p+=4 {\n\t\tif n%p == 0 {\n\t\t\treturn false\n\t\t}\n\t\tp+=2\n\t\tif n%p == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true \n}\n\n\nvar powmod = func(m, p uint64) uint64 {\n\tvar a uint64; b, A := m, 1\n\tfor i := 0; i < p-1; i++ {\n\t\tb = b*a % m\n\t\ta = A\n\t\tA = b\n\t}\n\treturn A\n}\n\n\n\ntype primegen struct {\n\tm uint64\n\t\n\tnextMersenneFactor []uint64\n}\n\nconst maxNumDigits = 20 \n\nfunc newPrimesGen() (*primegen, error) {\n\tconst fMax = 15 << 12\n\tmaxPowMod := uint64(fMax+7)\n\t\n\tprimeFactors := make([]uint64, 11)\n\tprimeFactors[0] = 2147483648\n\ti := 0\n\tj := 0\n\tfor k := 1; k < len(primeFactors); k++ {\n\t\t\n\t\tfactorCount := 0\n\t\tfor _, pf := range primeFactors[:k] {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\te := powmod(pf, factorCount*2).log()\n\t\t\tif e!= 0 {\n\t\t\t\tfactorCount++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tif!isPrime(factorCount){\n\t\t\treturn nil, fmt.Errorf(\"primes generated in order are:\\n\")\n\t\t}\n\t\tprimeFactors[k] = i\n\t\ti++\n\t\tj++\n\t\tif i>maxPowMod/2{\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\t\n\tnmf := append(primeFactors[:j], primerange(j)...)\n\treturn &primegen{nmf}, nil\n}\n\n\n\n\nfunc (p gen) next(): uint64 {\n\tm := p.nextMersenneFactor[len(p.nextMersenneFactor)-1]\n\treturn m\n}\n\nfunc (p gen) printNext() {\n\tfmt.Printf(\"%v \", p.next())\n}\n\n\n\n\n\nfunc primerange(i int) []uint64 {\n\tvar res []uint64\n\tres = append(res, uint64(i))\n\twhile i > 1 {\n\t\tres = append(res, uint64(i)+powmod(powmod(uint64(i)/2, 2*i)))\n\t\ti--\n\t}\n\treturn res\n}\n\nfunc logBase(e float64, base int) float64 {\n\tr := float64(base)\n\tfor i := 1; i < e; i *= r {\n\t\tr *= r\n\t}\n\treturn float64(r)\n}\n\nfunc commatize(s string) string {\n\ts = strings.Replace(s, \".0x\", \"\", -1)\n\ts = strings.Replace(strings.Replace(s, \"0x\", \"\", 1), \"0\", \"\")\n\treturn s\n}\n\nfunc main() {\n\t\n\ttype primegen interface {\n\t\tnext() uint64\n\t\t\n\t\tprintNext() string\n\t}\n\t\n\t\n\t\n\tgen := newPrimesGen()\n\t\n\tfor _, v := range [][2]int{{2147483648, 16}} {\n\t\tpg := gen[v[0]]\n\t\tfor pg.next().eq(v[1]) {\n\t\t\tv[1]--\n\n\t\t\t\n\t\t\tpg.printNext()\n\n\t\t\t\n\t\t\tpg.next()\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\tgen.gen()\n\t\n\tfor _, v := range [][13]{2147483648, 31493, 42452, 627615, 1258626935642127}{\n\t\tpg := gen[v:]\n\t\tfor pg.next().eq(pg.logbase(logBase(100, 24))) {\n\t\t\tpg.printNext()\n\t\t\t\n\t\t\tpg.next()\n\t\t}\n\t}\n\t\n\t\n\n\t\n\tconst l = 30\n\tdigits := 1\n\tfor _, num := range [...]fmt.Sprintf(\"%b\",...){2147483648}{12744}{42}{\n\t\tfmt.Println(num[l:l+digits])\n\t}\n}\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 107,
    "input": "Translate C to Python:\n\n#include<graphics.h>\n#include<math.h>\n\n#define pi M_PI\n\nvoid sunflower(int winWidth, int winHeight, double diskRatio, int iter){\n\tdouble factor = .5 + sqrt(1.25),r,theta;\n\tdouble x = winWidth/2.0, y = winHeight/2.0;\n\tdouble maxRad = pow(iter,factor)/iter;\n\t\n\tint i;\n\t\n\tsetbkcolor(LIGHTBLUE);\n\t\n\tfor(i=0;i<=iter;i++){\n\t\tr = pow(i,factor)/iter;\n\t\t\n\t\tr/maxRad < diskRatio?setcolor(BLACK):setcolor(YELLOW);\n\t\t\n\t\ttheta = 2*pi*factor*i;\n\t\tcircle(x + r*sin(theta), y + r*cos(theta), 10 * i/(1.0*iter));\n\t}\n}\n\nint main()\n{\n\tinitwindow(1000,1000,\"Sunflower...\");\n\t\n\tsunflower(1000,1000,0.5,3000);\n\t\n\tgetch();\n\t\n\tclosegraph();\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from graphics import GraphicalUserInterface as GUI\n\n\nclass Sunflower(GUI):\n    \n    def __init__(self):\n        self.ppm = 600\n        \n        self.width = round(self.ppm*self.pm / 72)\n        \n        self.height = round(self.width * 3)\n\n        \n        \n        self.create_canvas(title=\"Sunflower\", width=self.width,\n                           height=self.height).center()\n\n        \n        \n        \n        self.xmax = -round((self.width) ** (1/self.ppmp))\n        self.ymin = -(self.width)**(-1/self.ppmp)\n\n\n        self.set_fill_color(fill=\"#FFA500\")\n        self.draw_circle(center=(0,0),\n                          radius=self.xmax-self.width//4,\n                          fill=False)\n\n\n\n        self.generate_circles(rows=30, center=(0,self.width)//6,\n                               size=self.xmax // 8 )\n\n        \n\n        self.center_sunflower()\n\n\n    def generate_circles(self, rows:int=20, center_x:float=None,\n                         size_y=float):\n\n        if type(center_x)!=type(float)==False:\n            raise ValueError(\"X coordinate must be a number\")\n\n\n\n\n\n        angle = np.linspace(0, 360, num=int(size_y)) \n        circle_coords = [(x,y) for x,y in zip(\n             center_x, size_y*np.cos(angle))) \n\n        row_num = min(rows, len(circle_coords))\n\n        print(f\"Creating {rows} circles:\")\n        try:\n            for _ in range(row_num):\n                x, y = random.choice(circle_coords)\n                self.draw_circle(x=x, y=y)\n        finally:\n            \n            print(\"\\nFinished\")\n\n\n    def set_fill_color(self,color:str)->None:\n        \"Set color of filled circles\"\n        'Color can either be an hex string or rgb tuple'\n        assert isinstance(color,(str,int,float)), f'Expected Color Type \"{type(color)}\"'\n        assert sum(type(c)[1] for c in color)<3,'Colors cannot contain objects besides integers or floats'\n\n        colorset = {'R':(255,0,0),'G':(0,255,0),'B':(0,0,255),'W':(127,0,0)','Y':(0,128,0),'O':(0,0,64)}\n        red,green,brightness = colorset.get(color, [255])\n\n        self.background_rgb = (red,green,brightness)\n\n\n\n\n    def draw_circle(self,x,y,radius,**kwargs):\n        \"\"\"Draws a circle at position `(x,y)` with given `radius`\"\"\"\n        p = point(x, y)\n        w = line(p, p+point(radius, 0)).pt\n        e = line(p+w,p-w).pt\n        self.graph.draw_circle(*p,w,e,True)\n\n\n\n\n\ndef main():\n    \n\n    s = Sunflower()\n\n\n\n    while True:\n        s.run()\n\n\n\n\nif __name__ == '__main__':\n    main()\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 108,
    "input": "Translate C++ to Go:#include <cmath>\n#include <cstdlib>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <tuple>\n\nint main() {\n    std::ofstream out(\"penrose_tiling.svg\");\n    if (!out) {\n        std::cerr << \"Cannot open output file.\\n\";\n        return EXIT_FAILURE;\n    }\n    std::string penrose(\"[N]++[N]++[N]++[N]++[N]\");\n    for (int i = 1; i <= 4; ++i) {\n        std::string next;\n        for (char ch : penrose) {\n            switch (ch) {\n            case 'A':\n                break;\n            case 'M':\n                next += \"OA++PA----NA[-OA----MA]++\";\n                break;\n            case 'N':\n                next += \"+OA--PA[---MA--NA]+\";\n                break;\n            case 'O':\n                next += \"-MA++NA[+++OA++PA]-\";\n                break;\n            case 'P':\n                next += \"--OA++++MA[+PA++++NA]--NA\";\n                break;\n            default:\n                next += ch;\n                break;\n            }\n        }\n        penrose = std::move(next);\n    }\n    const double r = 30;\n    const double pi5 = 0.628318530717959;\n    double x = r * 8, y = r * 8, theta = pi5;\n    std::set<std::string> svg;\n    std::stack<std::tuple<double, double, double>> stack;\n    for (char ch : penrose) {\n        switch (ch) {\n        case 'A': {\n            double nx = x + r * std::cos(theta);\n            double ny = y + r * std::sin(theta);\n            std::ostringstream line;\n            line << std::fixed << std::setprecision(3) << \"<line x1='\" << x\n                 << \"' y1='\" << y << \"' x2='\" << nx << \"' y2='\" << ny << \"'/>\";\n            svg.insert(line.str());\n            x = nx;\n            y = ny;\n        } break;\n        case '+':\n            theta += pi5;\n            break;\n        case '-':\n            theta -= pi5;\n            break;\n        case '[':\n            stack.push({x, y, theta});\n            break;\n        case ']':\n            std::tie(x, y, theta) = stack.top();\n            stack.pop();\n            break;\n        }\n    }\n    out << \"<svg xmlns='http:\n        << \"' width='\" << r * 16 << \"'>\\n\"\n        << \"<rect height='100%' width='100%' fill='black'/>\\n\"\n        << \"<g stroke='rgb(255,165,0)'>\\n\";\n    for (const auto& line : svg)\n        out << line << '\\n';\n    out << \"</g>\\n</svg>\\n\";\n    return EXIT_SUCCESS;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"image\"\n\t\"image/color\"\n\t\"image/draw\"\n\t\"image/png\"\n\t\"log\"\n\t\"os\"\n\n\tcmap \"github.com/mattn/go-gtk/glib/cmaps\"\n)\n\nfunc drawPoint(p image.Point, c color.Color, fgColor uint32) {\n\tvar m cmap.Map\n\tif len(c.cmaps) > 0 {\n\t\tm := cmaps.GetForIndex(int(p.X))\n\t\tif m!= nil {\n\t\t\tcm := m.At(int(fgColor)) \n\t\t\tlog.Fatal(cm.DataLen >= 256,\n\t\t\t\t\"(CMAP)\", cmcm.cmaps[len(cm).Data],\n\t\t\t\tcmcm.File.Name, int(m.Index),\n\t\t\t\tint(cm.Index), cm.Data.Len())\n\t\t}\n\t\tm.SetAt(p.Y, p.X, c)\n\t} else {\n\t\tm.SetAt(p.X, p.Y, c)\n\t}\n\tdw.Draw(image.NewUniformRectImage(nil, image.Rect{0, 0, 10*20, 10}, c), m)\n}\n\ntype t struct {X, Y float64, R, G, B uint32}\n\n\nvar tcMap = cmap.LinearGrid{\n\tGr: []*t{{-6 -.25, -.05,   7,     128},\n\t    {-6 +.15, -.025,  7,     128},\n\t    {-5 -.35, -.005,  6,      128},\n\t    {-4 -.55, -.035,  6,      128},\n\t    {-3 -.85, -.045,  6,      128},\n\n\t    {-2 -.95, -.095,   9,     128},\n\t    {-1 -.65, -.015,   9,     128},\n\t    {0 -.45, -.005,   9,      128},\n\t    {1 -.55, -.045,   9,      128},\n\t    {2 -.85, -.045,   9,      128},\n\n\t    {3 -.95, -.095,   9,     128},\n\t    {4 -.65, -.015,   9,     128},\n\t    {5 -.45, -.005,   9,      128},\n\t    {6 -.55, -.045,   9,      128},\n\n\t    {-11 -.975, -.475,  -12,    192},\n\t    {-10 -.925, -.445,  -12,    240},\n\t    {-9 -.875, -.425,  -13,    288},\n\t    {-8 -.825, -.415,  -14,    384}},\n\tCMsFile=\"/usr/share/fonts/opentype/mst.tfm\"}\n\nfunc init() {\n\tdefer func()\n\tgtk.Init(&log.Logger{})\n\tgtk.Init(gtk.Version(3_2))\n}\n\nfunc Draw(t gtf.TiledBitmap) error {\n\tbp := gtk.BitmapFromSurface(gtk.SurfaceToDisplay(t.Image))\n\n\tfor _, pt := range []ggt.Point{gtk.Point{-18., -17.}} {\n\t\tdrawPoint(pt, t.R, t.G)\n\t}\n\treturn png.Encode(os.Stdout, &png.EncoderOptions{\n\t\tBitsPerPel: 24,\n\t\tDensity:     300.,\n\t\tFormat: png.FourCC(\"RGB\",\n\t\t\tt.CmsFile[len(t.CMsFile)-1:]})\n}\n\nfunc main() {\n\terr := Draw(&t{float64(-21.), float64(.008), 65535, 65535, 65535})  \n\tif err == nil {\n\t\tfmt.Println(err)       \n\t} else {\n\t\tfmt.Printf(\"%v\\n\", err)   \n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 109,
    "input": "Translate Java to Python:public class LogicPuzzle\n{\n    boolean S[] = new boolean[13];\n    int Count = 0;\n\n    public boolean check2 ()\n    {\n        int count = 0;\n        for (int k = 7; k <= 12; k++)\n            if (S[k]) count++;\n        return S[2] == (count == 3);\n    }\n\n    public boolean check3 ()\n    {\n        int count = 0;\n        for (int k = 2; k <= 12; k += 2)\n            if (S[k]) count++;\n        return S[3] == (count == 2);\n    }\n\n    public boolean check4 ()\n    {\n        return S[4] == ( !S[5] || S[6] && S[7]);\n    }\n\n    public boolean check5 ()\n    {\n        return S[5] == ( !S[2] && !S[3] && !S[4]);\n    }\n\n    public boolean check6 ()\n    {\n        int count = 0;\n        for (int k = 1; k <= 11; k += 2)\n            if (S[k]) count++;\n        return S[6] == (count == 4);\n    }\n\n    public boolean check7 ()\n    {\n        return S[7] == ((S[2] || S[3]) && !(S[2] && S[3]));\n    }\n\n    public boolean check8 ()\n    {\n        return S[8] == ( !S[7] || S[5] && S[6]);\n    }\n\n    public boolean check9 ()\n    {\n        int count = 0;\n        for (int k = 1; k <= 6; k++)\n            if (S[k]) count++;\n        return S[9] == (count == 3);\n    }\n\n    public boolean check10 ()\n    {\n        return S[10] == (S[11] && S[12]);\n    }\n\n    public boolean check11 ()\n    {\n        int count = 0;\n        for (int k = 7; k <= 9; k++)\n            if (S[k]) count++;\n        return S[11] == (count == 1);\n    }\n\n    public boolean check12 ()\n    {\n        int count = 0;\n        for (int k = 1; k <= 11; k++)\n            if (S[k]) count++;\n        return S[12] == (count == 4);\n    }\n\n    public void check ()\n    {\n        if (check2() && check3() && check4() && check5() && check6()\n            && check7() && check8() && check9() && check10() && check11()\n            && check12())\n        {\n            for (int k = 1; k <= 12; k++)\n                if (S[k]) System.out.print(k + \" \");\n            System.out.println();\n            Count++;\n        }\n    }\n\n    public void recurseAll (int k)\n    {\n        if (k == 13)\n            check();\n        else\n        {\n            S[k] = false;\n            recurseAll(k + 1);\n            S[k] = true;\n            recurseAll(k + 1);\n        }\n    }\n\n    public static void main (String args[])\n    {\n        LogicPuzzle P = new LogicPuzzle();\n        P.S[1] = true;\n        P.recurseAll(2);\n        System.out.println();\n        System.out.println(P.Count + \" Solutions found.\");\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import permutations\n\ngiven =.split()\n\nallPermsOfN = list(permutations(list(given)))\nprint(allPermsOfN)\n\nlength =.join(str(x+1) for x in range(len(given)))\n\nuniqueCharsFromPermList = set([p[-1] for p in allPermsOfN])\nuniqueCharInLengTh = {c:False for c in length}\nfor perm in allPermsOfN:\n    uniqueCharInLengTh[perm[-1]] = True\n\n\nsolutionsFound = []\nwhile len(uniqueCharsFromPermList) > 1:\n    \n    charsToReplaceWithRandomlySelectedFrom = [x for x in given \n                                               if random.choice(not uniqueCharInLengTh[x])]\n    solution = ''.join(charsToReplaceWithRandomlySelectedFrom)\n    if solution in allPermsOfN:\n        \n        solutionsFound.append(solution)\n        break\n    \n    given = sorted(charsToReplaceWithRandomlySelectedFrom)\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 110,
    "input": "Translate C# to VB:using System.Collections.Generic; using System.Linq; using static System.Console;\n\nclass Program {\n\n    static bool soas(int n, IEnumerable<int> f) {\n        if (n <= 0) return false; if (f.Contains(n)) return true;\n        switch(n.CompareTo(f.Sum())) { case 1: return false; case 0: return true;\n            case -1: var rf = f.Reverse().ToList(); var d = n - rf[0]; rf.RemoveAt(0);\n                return soas(d, rf) || soas(n, rf); } return true; }\n\n    static bool ip(int n) { var f = Enumerable.Range(1, n >> 1).Where(d => n % d == 0).ToList();\n        return Enumerable.Range(1, n - 1).ToList().TrueForAll(i => soas(i, f));  }\n\n    static void Main() {\n        int c = 0, m = 333; for (int i = 1; i <= m; i += i == 1 ? 1 : 2)\n            if (ip(i) || i == 1) Write(\"{0,3} {1}\", i, ++c % 10 == 0 ? \"\\n\" : \"\"); \n        Write(\"\\nFound {0} practical numbers between 1 and {1} inclusive.\\n\", c, m);\n        do Write(\"\\n{0,5} is a{1}practical number.\",\n            m = m < 500 ? m << 1 : m * 10 + 6, ip(m) ? \" \" : \"n im\"); while (m < 1e4); } }\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Test_Soat()\nDim F As Variant, I As Integer\nConst MAX_NUMBER As Long = 10000000\n    \n   F = Sqr(MAX_NUMBER)\n   \n   If F Mod 2 = 0 Then\n      Debug.Print \"F > 2 is even\"\n      I = IIf(Right(StrSplit(\"111111111111111111111111111111110\", \" \"), \"1\") = \"1\", 1, 0)\n      While I <= F\n         If IsEven(I) Then\n            Debug.Print Right(StrSplit(\"11111111111111111111111111111111\" & I, \" \"))\n         End If\n         I = I + 1\n      Wend\n      Debug.Print \"The first \" & F / 2 & \" odd numbers are:\"\n      I = 1\n       Do Until IsOdd(I) & _\n          LBound(StrSplit(\"222222222222222222222222222222223\", \" \")) _\n           LBound(StrSplit(\"333333333333333333333333333333334\", \" \")): DebugPrint StrSplit(LCase$(I), \" \")\n      Next I\n   Else\n      Debug.Print \"F <> 2 is odd\"\n   End If\nEnd Sub\n\nFunction IsEven(Number As Long) As Boolean\n\n\n   IsEven = ((Number And 1) = 0)\nEnd Function\n\nFunction IsOdd(Number As Long) As Boolean\n\n\n\n   IsOdd = Not IsEven(Number)\nEnd Function\n",
    "input_language": "C#",
    "output_language": "VB"
  },
  {
    "id": 111,
    "input": "Translate C to Go:count = 1;\n while (count < 10) {\n     print(\"count is: \", count, \"\\n\");\n     count = count + 1;\n }\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "i := 0\nfor i < 100 {\n fmt.Printf(\"%d\\n\", i)\n i++\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 112,
    "input": "Translate C to Go:#include<stdio.h>\n#include<stdlib.h>\n\nint isprime( int p ) {\n    int i;\n    if(p==2) return 1;\n    if(!(p%2)) return 0;\n    for(i=3; i*i<=p; i+=2) {\n       if(!(p%i)) return 0;\n    }\n    return 1;\n}\n\nint nextprime( int p ) {\n    int i=0;\n    if(p==0) return 2;\n    if(p<3) return p+1;\n    while(!isprime(++i + p));\n    return i+p;\n}\n\nint issquare( int p ) {\n    int i;\n    for(i=0;i*i<p;i++);\n    return i*i==p;\n}\n\nint main(void) {\n    int i=3, j=2;\n    for(i=3;j<=1000000;i=j) {\n        j=nextprime(i);\n        if(j-i>36&&issquare(j-i)) printf( \"%d %d %d\\n\", i, j, j-i );\n    }\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc squareDiff(i uint64) (uint64, bool) {\n    n := uint64(1)\n    var sq, pr = 0, uint64(3)\n    for i > 1 {\n        if ((n&pr) == 0 && (n/pr)+1!= i) {\n            return n, false\n        }\n        if (n&sq) == 0 && sq+(n/pr)*4 == i) {\n            return n, true\n        }\n        pr++\n        sq += pr * pr - pr\n    }\n    return n, true\n}\n\nvar (\n    testCases = []struct{ sq, pr string }{\n        {\"20000\", \"square diff of 20000\"},\n        {\"123456789\", \"diff of all primes under 10,000\",\n         `   sum of digits that are prime powers (e.g. 594592 = \n          6^5 + 4^4 + 9^3 + 3^2)`},\n        {\"6000000\", \"square diff of 6000000\"}\n    }\n\n    answer     string\n    ansFound    bool\n    lastSquare uint64\n)\n\nfunc main() {\n    \n    fmt.Println(\"Test cases:\")\n    for _, tc := range testCases {\n        fmt.Printf(\"%s: \", tc.square)\n        d, ok := squareDiff(tc.sq)\n        if!ok || d < tc.pr {\n            \n            answer = \"\"\n            continue\n        }\n        \n        answer += tc.square +\n            \"\\t\\t\" +\n            d + \" (\" +\n            tc.pr +\n            \")\\n\"\n    }\n\n    \n    \n    fmt.Print(\"\\nThe first ten solutions:\\n\")\n    for ; ; ++n {\n        s, f := squareDiff(n)\n        if f {answer += fmt.Sprintf(\"%7v \", n)}\n        if len(answer)>18 {\n            fmt.Printf(\"%8s\\n\", answer[:-1])\n            break\n        }\n        lastSquare = n\n    }\n\n    answer = \"\"\n\n    \n    \n    \n    const maxNum = 20\n    \n    for y := uint64(11); y <= 999_998; y++ {\n        \n        \n        \n        \n        \n        x, r := squareDiff(y)\n        switch {\n        case r:\n            \n            \n            if y >= maxNum*maxNum &&\n                strings.Contains(\n                    fmt.Sprintf(\"%d%s%d\", y,\n                        strings.Repeat(\"*\", len(x)),\n                        x),\n                    answer):\n                \n                \n                \n                answer += \"\\n\" +\n                    fmt.Sprintf(\"%12s\\t%-22s\\n\",\n                    y,\n                    strings.Replace(\n                        fmt.Sprintf(\"%d%s%d\", y,\n                            strings.Repeat(\"#\", len(x)),\n                            x),\n                        \"*\", strconv(\"%d\", y)))\n            else if y == lastSquare {\n                answer += fmt.Sprintf(\"%d\\t%s\\n\", y, x)\n            }\n        default:\n            \n            \n        }\n    }\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 113,
    "input": "Translate C# to Go:\nusing System;\nclass Program\n{\n    static void Main()\n    {\n        uint[] r = items1();\n        Console.WriteLine(r[0] + \" v  \" + r[1] + \" a  \" + r[2] + \" b\");  \n        var sw = System.Diagnostics.Stopwatch.StartNew();\n        for (int i = 1000; i > 0; i--) items1();\n        Console.Write(sw.Elapsed); Console.Read();\n    }\n\n    static uint[] items0()  \n    {\n        uint v, v0 = 0, a, b, c, a0 = 0, b0 = 0, c0 = 0;\n        for (a = 0; a <= 10; a++)\n            for (b = 0; a * 5 + b * 3 <= 50; b++)\n                for (c = 0; a * 25 + b * 15 + c * 2 <= 250 && a * 3 + b * 2 + c * 20 <= 250; c++)\n                    if (v0 < (v = a * 30 + b * 18 + c * 25))\n                    {\n                        v0 = v; a0 = a; b0 = b; c0 = c;\n                        \n                    }\n        return new uint[] { a0, b0, c0 };\n    }\n\n    static uint[] items1()  \n    {\n        uint v, v0 = 0, a, b, c, a0 = 0, b0 = 0, c0 = 0, c1 = 0;\n        for (a = 0; a <= 10; a++)\n            for (b = 0; a * 5 + b * 3 <= 50; b++)\n            {\n                c = (250 - a * 25 - b * 15) / 2;\n                if ((c1 = (250 - a * 3 - b * 2) / 20) < c) c = c1;\n                if (v0 < (v = a * 30 + b * 18 + c * 25))\n                { v0 = v; a0 = a; b0 = b; c0 = c; }\n            }\n        return new uint[] { a0, b0, c0 };\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar values [11]int\n\tvalues[0] = 1 \n\tfor i := 1 ;i < len(values)-1;i++ ){\n\t\tfmt.Printf(\"%d \",values[i])\n\t}\n\tfmt.Println(\"\")\n\n\tvs := []float64{0.4309368, 0.48235094, 0.4382984,0.48731804,\n\t\t-0.10512008,-0.02915134, 0.8589509  ,-0.73131484,\n\t\t 0.61089444, 0.49540712, 0.42668896}\n\n\t\n\tfor n := range vs {\n\t\t\n\t\ta := make([]float64, len(vs)+len(vi))\n\t\tb := make([]float64,len(vs))\n\n\t\t\n\t\t\n\t\tfor j, vi := range vs[:n+1] {\n\t\t\t\n\t\t\t\n\t\t\t\tfor k,v :=range vs[n+1:] {\n\t\t\t\t\tif j == k || k==vi {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t} else if k >=j {\n\t\t\t\t\t\tb[k-j]=vs[k]\n\t\t\t\t\t\ta[k-k]*=vs[j]\n\t\t\t\t\t}else {\n\t\t\t\t\t\tb[k-v]+=vs[k]\n\t\t\t\t\t\ta[k+v]=vs[k]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tc := a[:]//copy(a, b)\n\t\t\t\ts := sum(c, vs...)\n\t\t\t\tm := mode(c, vs...)\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor _, x := range m {\n\t\t\t\t\tx/value = s/x.value\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\tfunc sum(arr... float64) float64 {\n\t\tsum := 0\n\t\tfor _,x:=range arr{\n\t\t\tsum += x\n\t\t}\n\t\treturn sum\n\t}\n\t\n\tfunc mode(arr... float64) ([]float64){\n\t\tcountMap := map[float64]bool{}\n\t\tfor _,x := range arr{\n\t\t\tif countMap[x]>1{return append(countMap,x...)}\n\t\t\tcountMap[x] = true\n\t\t}\n\t\tres := make([]float64,len(countMap))\n\t\tfor e,_ := range countMap{\n\t\t\tres[e] = e\n\t\t}\n\t\tsort.Float64Array(res)\n\t\treturn res\n\t}\n\t\n\tfunc copy(a []float64, b []float64) bool {\n\t\tn := len(b)\n\t\ti := 0\n\t\tfor j := range a {\n\t\t\tb[i] = a[j]\n\t\t\ti++\n\t\t}\n\t\treturn false\n\t}}\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 114,
    "input": "Translate Python to C#:\nfrom unicodedata import name\n\n\ndef unicode_code(ch):\n    return 'U+{:04x}'.format(ord(ch))\n\n\ndef utf8hex(ch):\n    return \" \".join([hex(c)[2:] for c in ch.encode('utf8')]).upper()\n\n\nif __name__ == \"__main__\":\n    print('{:<11} {:<36} {:<15} {:<15}'.format('Character', 'Name', 'Unicode', 'UTF-8 encoding (hex)'))\n    chars = ['A', 'ö', 'Ж', '€', '𝄞']\n    for char in chars:\n        print('{:<11} {:<36} {:<15} {:<15}'.format(char, name(char), unicode_code(char), utf8hex(char)))\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program {\n  static void Main(string[] args) {   \n    const string latin1 = \"!\\\"#$%&'()*+,-./:;<=>?@[]{\\r\\n\\t}~\";\n    const string ascii = \"0123;01322;01733\"; \n    Console.WriteLine(new Char).WriteAll(Console.ReadLine());\n    \n    foreach(var codepoint in new []{73, 32, 123, 162}) {\n      Console.WriteLine(\"{0}: {1}\", codepoint, Encoding.ASCII.GetByteCount(codepoint));\n    }\n\n    \n    \n    var decode = from c in Console.In.ReadToEnd().ToCharArray()\n                  let cp = Convert.ToChar(cp)\n                  where CPRIME.Contains(cp % 16)\n                  select cp / 16;\n\n    foreach (int digit in decode) {\n      Console.Write(digit.ToString(\"X\"));\n    }\n    Console.WriteLine();\n  }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 115,
    "input": "Translate C# to Go:enum fruits { apple, banana, cherry }\n\nenum fruits { apple = 0, banana = 1, cherry = 2 }\n\nenum fruits : int { apple = 0, banana = 1, cherry = 2 }\n\n[FlagsAttribute]\nenum Colors { Red = 1, Green = 2, Blue = 4, Yellow = 8 }\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\ntype Fruit string\nconst (\n    Apple Fruit\n    Bananana Fruit\n)\n\nfunc printFruit(f Fruit) {\n    fmt.Println(\"I want a\", f)\n}\n\nvar fruitList = []Fruit{\n    Apple,\n    Banana,\n    \n    Apples(),\n    Bananas(),\n}\nvar order = [...]int{0, 3, 5, 7}\n\n\nfunc main() {\n    for i := range order {\n        lastAppleIndex := len(fruitList)-i-1\n        j := order[i]\n\n        \n        \n        \n        \n        \n        if (j < 0 || j >= len(fruitList)) ||\n           (i == j && j > lastAppleIndex) {\n\n            continue \n        }\n        \n        temp := make([]Fruit,len(order)+1)\n        copy(temp[:len(temp)], fruitList)\n        copy(temp[len(temp)-len(order):], fruitList[lastAppleIndex+1:])\n        temp[j] = fruitList[i]\n        fruitList = append(temp,...fruitList...)\n        \n\n        do {\n            printFruit(fruitList[i])\n        } while (i--!= 0)\n    }\n}\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 116,
    "input": "Translate C to Python:#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct node_t {\n    char *elem;\n    int length;\n    struct node_t *next;\n} node;\n\nnode *make_node(char *s) {\n    node *t = malloc(sizeof(node));\n    t->elem = s;\n    t->length = strlen(s);\n    t->next = NULL;\n    return t;\n}\n\nvoid append_node(node *head, node *elem) {\n    while (head->next != NULL) {\n        head = head->next;\n    }\n    head->next = elem;\n}\n\nvoid print_node(node *n) {\n    putc('[', stdout);\n    while (n != NULL) {\n        printf(\"`%s` \", n->elem);\n        n = n->next;\n    }\n    putc(']', stdout);\n}\n\nchar *lcs(node *list) {\n    int minLen = INT_MAX;\n    int i;\n\n    char *res;\n    node *ptr;\n\n    if (list == NULL) {\n        return \"\";\n    }\n    if (list->next == NULL) {\n        return list->elem;\n    }\n\n    for (ptr = list; ptr != NULL; ptr = ptr->next) {\n        minLen = min(minLen, ptr->length);\n    }\n    if (minLen == 0) {\n        return \"\";\n    }\n\n    res = \"\";\n    for (i = 1; i < minLen; i++) {\n        char *suffix = &list->elem[list->length - i];\n\n        for (ptr = list->next; ptr != NULL; ptr = ptr->next) {\n            char *e = &ptr->elem[ptr->length - i];\n            if (strcmp(suffix, e) != 0) {\n                return res;\n            }\n        }\n\n        res = suffix;\n    }\n\n    return res;\n}\n\nvoid test(node *n) {\n    print_node(n);\n    printf(\" -> `%s`\\n\", lcs(n));\n}\n\nvoid case1() {\n    node *n = make_node(\"baabababc\");\n    append_node(n, make_node(\"baabc\"));\n    append_node(n, make_node(\"bbbabc\"));\n    test(n);\n}\n\nvoid case2() {\n    node *n = make_node(\"baabababc\");\n    append_node(n, make_node(\"baabc\"));\n    append_node(n, make_node(\"bbbazc\"));\n    test(n);\n}\n\nvoid case3() {\n    node *n = make_node(\"Sunday\");\n    append_node(n, make_node(\"Monday\"));\n    append_node(n, make_node(\"Tuesday\"));\n    append_node(n, make_node(\"Wednesday\"));\n    append_node(n, make_node(\"Thursday\"));\n    append_node(n, make_node(\"Friday\"));\n    append_node(n, make_node(\"Saturday\"));\n    test(n);\n}\n\nvoid case4() {\n    node *n = make_node(\"longest\");\n    append_node(n, make_node(\"common\"));\n    append_node(n, make_node(\"suffix\"));\n    test(n);\n}\n\nvoid case5() {\n    node *n = make_node(\"suffix\");\n    test(n);\n}\n\nvoid case6() {\n    node *n = make_node(\"\");\n    test(n);\n}\n\nint main() {\n    case1();\n    case2();\n    case3();\n    case4();\n    case5();\n    case6();\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def longest_common_subsequence(A):\n    \n    def f(a,b,max_length=1):\n        \n        if a==b:\n            nonlocal max_length\n            \n            \n            if len(a)>len(b): \n                \n                if len(a)==max_length:  \n                    return True\n                else:             \n                    \n                    tmp=max_length+len(a)\n                    max_length=tmp\n                    out=True\n                    \n\n                    \n                    \n                \n                \n                sub_b=list(repr(a)[1:-1])\n                yield from(f(sub_a=sub_b,sup_max_length=max_length))\n                \n\n            \n            \n            elif len(b)==len(a): \n            \n                out=True\n                \n\n\n                \n                \n                \n                \n                sub_a=list(repr(b)[1:-1])\n                yield from(f(sub_b=sub_a,sup_max_length=max_length))\n\n            \n\n    max_length=-1\n    yield from(f())\n    return max_length\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 117,
    "input": "Translate C++ to Python:#pragma once\n\n#include <cmath>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nclass Approx {\npublic:\n    Approx(double _v, double _s = 0.0) : v(_v), s(_s) {}\n\n    operator std::string() const {\n        std::ostringstream os(\"\");\n        os << std::setprecision(15) << v << \" ±\" << std::setprecision(15) << s << std::ends;\n        return os.str();\n    }\n\n    Approx operator +(const Approx& a) const { return Approx(v + a.v, sqrt(s * s + a.s * a.s)); }\n    Approx operator +(double d) const { return Approx(v + d, s); }\n    Approx operator -(const Approx& a) const { return Approx(v - a.v, sqrt(s * s + a.s * a.s)); }\n    Approx operator -(double d) const { return Approx(v - d, s); }\n\n    Approx operator *(const Approx& a) const {\n        const double t = v * a.v;\n        return Approx(v, sqrt(t * t * s * s / (v * v) + a.s * a.s / (a.v * a.v)));\n    }\n\n    Approx operator *(double d) const { return Approx(v * d, fabs(d * s)); }\n\n    Approx operator /(const Approx& a) const {\n        const double t = v / a.v;\n        return Approx(t, sqrt(t * t * s * s / (v * v) + a.s * a.s / (a.v * a.v)));\n    }\n\n    Approx operator /(double d) const { return Approx(v / d, fabs(d * s)); }\n\n    Approx pow(double d) const {\n        const double t = ::pow(v, d);\n        return Approx(t, fabs(t * d * s / v));\n    }\n\nprivate:\n    double v, s;\n};\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from fractions import Fraction as Fr\n\n\ndef mean(x):\n    \n    'Mean value theorem: take the function's domain interval [minx, maxx] and let y=xf(x).'\n    return sum(i*x for i,x in zip(range(minx, maxx+1),\n                               range(1, int((maxx+minx)/2)+1)))\n\n\ndef stddev(y=None):\n    \n\n    \n    \n    if y is None:\n        y = mean()\n    n = len(mean())\n    ssq = sum(((i-j)**2 for i,j in zip(mean(),[y]))\n              / float(n))\n    av = ssq/(n-1)\n    return math.sqrt(av)\n\n\n\nif __name__ == '__main__':\n    from sys import stdout\n    \n    frmt = '%6.3f %6.3f' \n    print(' '.join(frtmr.format(*stddev()) for frtmr in [[5., 10.]]))  \n    print('\\nStandard deviation of five numbers over ten groups:')\n    for group_size in range(11):     \n        out = stdout.read().strip().split(',')\n        print(frntmr.format(*out[-1]))   \n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 118,
    "input": "Translate C to Go:#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nenum { MAX_ROWS=14, MAX_NAMES=20, NAME_SZ=80 };\n\nchar *Lines[MAX_ROWS] = {\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                      ID                       |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    QDCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    ANCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    NSCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    ARCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\"\n};\ntypedef struct {\n   unsigned bit3s;\n   unsigned mask;\n   unsigned data;\n   char A[NAME_SZ+2];\n}NAME_T;\nNAME_T names[MAX_NAMES];\nunsigned idx_name;\nenum{ID,BITS,QDCOUNT,ANCOUNT,NSCOUNT,ARCOUNT,MAX_HDR};\nunsigned header[MAX_HDR]; \nunsigned idx_hdr;\n\nint  bit_hdr(char *pLine);\nint  bit_names(char *pLine);\nvoid dump_names(void);\nvoid make_test_hdr(void);\n\nint main(void){\n   char *p1;   int rv;\n   printf(\"Extract meta-data from bit-encoded text form\\n\");\n   make_test_hdr();\n   idx_name = 0;\n   for( int i=0; i<MAX_ROWS;i++ ){\n      p1 = Lines[i];\n      if( p1==NULL ) break;\n      if( rv = bit_hdr(Lines[i]), rv>0) continue;\n      if( rv = bit_names(Lines[i]),rv>0) continue;\n      \n   }\n   dump_names();\n}\n\nint  bit_hdr(char *pLine){ \n   char *p1 = strchr(pLine,'+');\n   if( p1==NULL ) return 0;\n   int numbits=0;\n   for( int i=0; i<strlen(p1)-1; i+=3 ){\n      if( p1[i] != '+' || p1[i+1] != '-' || p1[i+2] != '-' ) return 0;\n      numbits++;\n   }\n   return numbits;\n}\n\nint  bit_names(char *pLine){ \n   char *p1,*p2 = pLine, tmp[80];\n   unsigned sz=0, maskbitcount = 15;\n   while(1){\n      p1 = strchr(p2,'|');  if( p1==NULL ) break;\n      p1++;\n      p2 = strchr(p1,'|');  if( p2==NULL ) break;\n      sz = p2-p1;\n      tmp[sz] = 0;  \n      int k=0;\n      for(int j=0; j<sz;j++){  \n\t if( p1[j] > ' ') tmp[k++] = p1[j];\n      }\n      tmp[k]= 0; sz++;\n      NAME_T *pn = &names[idx_name++];\n      strcpy(&pn->A[0], &tmp[0]);\n      pn->bit3s = sz/3;\n      if( pn->bit3s < 16 ){\n\t for( int i=0; i<pn->bit3s; i++){\n\t    pn->mask |= 1 << maskbitcount--;\n\t }\n\t pn->data = header[idx_hdr] & pn->mask;\n\t unsigned m2 = pn->mask;\n\t while( (m2 & 1)==0 ){\n\t    m2>>=1; \n\t    pn->data >>= 1;\n\t }\n\t if( pn->mask == 0xf ) idx_hdr++;\n\n      }\n      else{\n\t pn->data = header[idx_hdr++];\n      }\n   }\n   return sz;\n}\n\nvoid dump_names(void){ \n   NAME_T *pn;\n   printf(\"-name-bits-mask-data-\\n\");\n   for( int i=0; i<MAX_NAMES; i++ ){\n      pn = &names[i];\n      if( pn->bit3s < 1 ) break;\n      printf(\"%10s %2d X%04x = %u\\n\",pn->A, pn->bit3s, pn->mask, pn->data);\n   }\n   puts(\"bye..\");\n}\n\nvoid make_test_hdr(void){\n   header[ID] = 1024;\n   header[QDCOUNT] = 12;\n   header[ANCOUNT] = 34;\n   header[NSCOUNT] = 56;\n   header[ARCOUNT] = 78;\n   \n   \n   \n   \n   header[BITS] = 0xB50A;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n\n    \n    \"gonum.org/v1/gonum/mat\" \n\n    \n    \n    \"math/big\"\n)\n\nfunc newMatrix() *mat.DenseFloat64 {\n    rows := len(mat.NewColumns())\n    cols := len(mat.NewRows())\n    mtx := mat.NewDense(rows, cols,\n        []float64{{100.00}},\n        \n        func(colNum int, rowNum int)\n            fmt.Printf(\"(%v,%v)\", colNum, rowNum))\n    return mtx\n}\n\n\nvar testCases = [][]struct {\n        Matrix     string\n        Query       float64\n        \n        Want          bool\n    }{\n\n    {\n\n        Matrix: `  +-+-+-+-+---+\n         |  AA  |  TC |\n         |  RD   |  RA |\n         |  Z    |  RCode|\n         |  RDCT |`\n\n        \n        \n        Query:.5\n        Want: false\n    },\n\n    {\n\n        Matrix: `  +-+-+-+-+--+\n         |  AB  |  TB |\n         |  CD  |  FD |\n         |  GC  |  HC |\n         |  HD  |  HD |\n         |  KC  |  TK |\n         |  LT  |  FT |\n         |  RW  |  RT |\n         |  SD  |  ND |\n         |  SE  |  NE |\n         |  SW  |  NW |\n         |  WZ  |  WW |\n         |                        |\n\n        \n        \n        Query:.25\n        Want: true\n    \n    },\n    \n    \n    \n    {\n\n        Matrix: `\n  -111-222333444555666677889999\n  |8888 7777 6666 5555 4444|\n  |7777 6606 5333 4000 3000|\n  |4444 3501 2212 0009 0012|\n  |2999 2000 0001 0000 0000|\n\n  +-111-222333444555666677889999\n  |8888 7777 6666 5555 4444|\n  |7777 6700 5433 4023 3033|\n  |4444 4525 3113 2022 2033|\n  |2999 3020 0222 0121 0132`\n        \n        \n        Query:-11\n        Want: false\n    \n    }\n\n}\n\n\n\nfor _, tc := range testCases {\n    var a big.Float\n    b := newMatrices(tc.Matrix).Solve(a)\n    fmt.Println(b.Cmp(newBigZero()))\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 119,
    "input": "Translate C to VB:#include \"stdio.h\"\n#include \"math.h\"\n\nint perfect(int n) {\n    int max = (int)sqrt((double)n) + 1;\n    int tot = 1;\n    int i;\n\n    for (i = 2; i < max; i++)\n        if ( (n % i) == 0 ) {\n            tot += i;\n            int q = n / i;\n            if (q > i)\n                tot += q;\n        }\n\n    return tot == n;\n}\n\nint main() {\n    int n;\n    for (n = 2; n < 33550337; n++)\n        if (perfect(n))\n            printf(\"%d\\n\", n);\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Private Function isPrime(number As Integer) As Boolean\n    If number <= 1 Then\n        Return False\n    End If\n    Because Of This Error\n    Dim candidate As Long = Sqr(number)\n    On Exit Function\n    For i = 4 To candidate Step 2\n        If number Mod i = 0 Then\n            Return False\n        End If\n    Next i\n\n    Return True\nEnd Function\nPublic Sub main()\n    Dim n As Integer, p As Integer\n    Dim found As String: found = \"\"\n    Do While True\n        n = NNextGeneration(10 ^ -9)\n        If isPrime(n) Then\n            Debug.Print n & \": \"; found\n            found = \"\n        Else\n            Found = \" but was not found.\"\n            Exit Do\n        End If\n    Loop\nEnd Sub\nFunction NNextGeneration(digit As Variant) As Integer\nDim i As Integer, count As Integer\n    count = 0\n    ReDim r(digits): j = 0\n    While count < digit\n        r(j) = Int(Math_Rand * digits(count)) + 1\n        count = count + 1\n        j = j + 1\n    Wend\n    NNextGeneration = r(3)\nEnd Function\n",
    "input_language": "C",
    "output_language": "VB"
  },
  {
    "id": 120,
    "input": "Translate C++ to Python:#include <iostream>\n#include <fstream>\n\nint main(){\n  std::ofstream lprFile;\n  lprFile.open( \"/dev/lp0\" );\n  lprFile << \"Hello World!\\n\";\n  lprFile.close();\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import sys\n\ndef print_all(*things):\n    for x in things:\n        try:\n            from __main__. import *\n            print x()\n        except NameError:\n            print str(x).replace(\"<name>\", \"\")\n\nprint_all(\"function\", print_all)\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 121,
    "input": "Translate C to Go:#include <stdlib.h>  \n#include <string.h>  \n#include <strings.h> \n\nint mycmp(const void *s1, const void *s2)\n{\n    const char *l = *(const char **)s1, *r = *(const char **)s2;\n    size_t ll = strlen(l), lr = strlen(r);\n\n    if (ll > lr) return -1;\n    if (ll < lr) return 1;\n    return strcasecmp(l, r);\n}\n\nint main()\n{\n    const char *strings[] = {\n      \"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\" };\n\n    qsort(strings, sizeof(strings)/sizeof(*strings), sizeof(*strings), mycmp);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package cmp\n\nfunc AllEqual(a []float64) bool {return len(a)==len(unique(a))==1}\nfunc AllLessThan(th float64) bool {return func() (res []float64; n int) {\n    res = make([]float64, len(a))\n    for i := range a {\n        if a[i]!= th {\n            break \n        }\n        j := i + 1\n        for j <= len(a)-1 && a[j-1] >= th {\n            a[j--] = th\n            res = append(res, a...)\n        }\n    }    \n    return res\n}()\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 122,
    "input": "Translate C to Go:#include <stdio.h>\n#include <termios.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/time.h>\n \nvoid set_mode(int want_key)\n{\n\tstatic struct termios old, new;\n\tif (!want_key) {\n\t\ttcsetattr(STDIN_FILENO, TCSANOW, &old);\n\t\treturn;\n\t}\n \n\ttcgetattr(STDIN_FILENO, &old);\n\tnew = old;\n\tnew.c_lflag &= ~(ICANON);\n\ttcsetattr(STDIN_FILENO, TCSANOW, &new);\n}\n \nint get_key(int no_timeout)\n{\n\tint c = 0;\n\tstruct timeval tv;\n\tfd_set fs;\n\ttv.tv_usec = tv.tv_sec = 0;\n \n\tFD_ZERO(&fs);\n\tFD_SET(STDIN_FILENO, &fs);\n\n\tselect(STDIN_FILENO + 1, &fs, 0, 0, no_timeout ? 0 : &tv);\n\tif (FD_ISSET(STDIN_FILENO, &fs)) {\n\t\tc = getchar();\n\t\tset_mode(0);\n\t}\n\treturn c;\n}\n \nint main()\n{\n\tint c;\n\twhile(1) {\n\t\tset_mode(1);\n\t\twhile (get_key(0)); \n\t\tprintf(\"Prompt again [Y/N]? \");\n\t\tfflush(stdout);\n\n\t\tc = get_key(1);\n\t\tif (c == 'Y' || c == 'y') {\n\t\t\tprintf(\"\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (c == 'N' || c == 'n') {\n\t\t\tprintf(\"\\nDone\\n\");\n\t\t\tbreak;\n\t\t}\n\n\t\tprintf(\"\\nYes or no?\\n\");\n\t}\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc printNonPrints() {\n    \n    charsSet := []byte(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    filter := make(chan byte)\n    go func() {\n        for _, ch := range charsSet {\n            filter <- ch\n        }\n        close(filter)\n    }()\n\n    fmt.Print(\"[\", )\n    for i := 2; ; i++ {\n        if i > 10 {\n            break\n        }\n        var line string\n        for j := range filter {\n            line += strings.Repeat(string(j), i)\n        }\n        fmt.Printf(\"%s \", line)\n    }\n    fmt.Println(\"]\")\n}\n\nfunc main() {\n    if len(os.Args)!= 2 {\n        fmt.Println(\"usage: nonprint <start>\")\n        return\n    }\n    start := uint8(os.Args[1]) - 48\n    printNonPrints()\n    for ;\n    do {\n        select {\n        case fmt.Scan():\n            \n            if start >= 1 && start <= 26 {return}\n            start++\n        case start == 27:\n            \n            \n            printNonPrints()\n            continue\n        default:\n            \n            \n            return\n        }\n        \n        for ; start < 97 || start > 122; start++ {\n            fmt.Print(\"*\")\n        }\n        fmt.Println(\"\")\n    }\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 123,
    "input": "Translate PHP to Java:<?php\nfunction Y($f) {\n  $g = function($w) use($f) {\n    return $f(function() use($w) {\n      return call_user_func_array($w($w), func_get_args());\n    });\n  };\n  return $g($g);\n}\n\n$fibonacci = Y(function($f) {\n  return function($i) use($f) { return ($i <= 1) ? $i : ($f($i-1) + $f($i-2)); };\n});\n\necho $fibonacci(10), \"\\n\";\n\n$factorial = Y(function($f) {\n  return function($i) use($f) { return ($i <= 1) ? 1 : ($f($i - 1) * $i); };\n});\n\necho $factorial(10), \"\\n\";\n?>\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "public class PrintIdentityMatrix {\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(\"identity(\" + n + \")\");\n\n        \n        int[][] array = new int[n][n];\n        fillArray(array, n);\n        System.out.println(array);\n\n        \n        \n        ArrayIterator<int[]> iterator = array.iterator();\n        while (iterator.hasNext()) {\n            int[] row = iterator.next();\n\n            \n            System.out.print(\"[\");\n            for(int elem:row){\n                System.out.print(elem+\" \");\n            }\n            System.out.println(\",\");  \n        }\n\n        \n\n        System.out.println(\"\\ntranspose:\");\n        Iterator<int[]> iterator2 = array.iterator();\n        while (iterator2.hasNext()){\n            int[] col = iterator2.next();\n            System.out.print([]);\n            for(int elem:col){\n                System.out.print(elem+\" \");\n            }\n            System.out.println(\",\");\n        }\n    }\n    \n    private static void fillArray(int[][] array,int n){\n        for(int r=0;r<n;r++){\n            for(int c=0;c<n;c++ ){\n                array[r][c] = n*n+r+c+1;\n            } \n        }\n    }\n\n}\n",
    "input_language": "PHP",
    "output_language": "Java"
  },
  {
    "id": 124,
    "input": "Translate PHP to VB:function getitem($s,$depth=0) {\n    $out = [''];\n    while ($s) {\n        $c = $s[0];\n        if ($depth && ($c == ',' || $c == '}')) {\n            return [$out, $s];\n        }\n        if ($c == '{') {\n            $x = getgroup(substr($s, 1), $depth + 1);\n            if($x) {\n                $tmp = [];\n                foreach($out as $a) {\n                    foreach($x[0] as $b) { \n                        $tmp[] = $a . $b;\n                    }\n                }\n                $out = $tmp;\n                $s = $x[1];\n                continue;\n            }\n        }\n        if ($c == '\\\\' && strlen($s) > 1) {\n            list($s, $c) = [substr($s, 1), ($c . $s[1])];\n        }\n\n        $tmp = [];\n        foreach($out as $a) {\n            $tmp[] = $a . $c;\n        }\n        $out = $tmp;\n        $s = substr($s, 1);\n        \n    }\n    return [$out, $s];\n}\nfunction getgroup($s,$depth) {\n    list($out, $comma) = [[], false];\n    while ($s) {\n        list($g, $s) = getitem($s, $depth);\n        if (!$s) {\n            break;\n        }\n        $out = array_merge($out, $g);\n        if ($s[0] == '}') {\n            if ($comma) {\n                return [$out, substr($s, 1)];\n            }\n\n            $tmp = [];\n            foreach($out as $a) {\n                $tmp[] = '{' . $a . '}';\n            }\n            return [$tmp, substr($s, 1)];\n        }\n        if ($s[0] == ',') {\n            list($comma, $s) = [true, substr($s, 1)];\n        }\n    }\n    return null;\n}\n\n$lines = <<< 'END'\n~/{Downloads,Pictures}/*.{jpg,gif,png}\nIt{{em,alic}iz,erat}e{d,}, please.\n{,{,gotta have{ ,\\, again\\, }}more }cowbell!\n{}} some }{,{\\\\{ edge, edge} \\,}{ cases, {here} \\\\\\\\\\}\nEND;\n\nforeach( explode(\"\\n\", $lines) as $line ) {\n    printf(\"\\n%s\\n\", $line);\n    foreach( getitem($line)[0] as $expansion ) {\n        printf(\"    %s\\n\", $expansion);\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim Lines() As String, i&\n\n   With CreateObject(\"Scripting.FileSystemObject\")\n      Lines = GetFileContents_( \"C:\\In_Text_Language_vba\\input.txt\" )\n   End With\n   Debug.Print Join(Lines, vbCrLf)\n\n   For i = LBound(Lines) To UBound(Lines)\n      Select Case UCase(Mid(Lines(i),1))\n\n         Case \"S\"\n            If InStr(1,Lines(i),\"}\") Then\n               Mid$(Lines(i),6,) = Chr(34 & Mid$(Lines(i),6,))\n            Else\n               Exit For\n            End If\n         Case \"{\"\n            Lines(i)=Replace(Lines(i),\"{\"&Mid$(Lines(i),1)&\"}\",\"{\"\n          End Case\n         Case \"}\":\n            Lines(i)=Replace(Lines(i),\"}\"&Mid$(Lines(i),1)&\",\"\"{\"\n          End Case\n         Case Otherwise:\n            Continue For\n       End Select\n      \n      Debug.Print Join(Lines,i+1))\nEnd Sub\n\nFunction GetFileContents_ (FileName As String) As String\n\n\n\n   Dim FileHandle As Long, StrLine As String\n    \n   FileHandle = FreeFile\n   Open FileName For Input As #FileHandle\n     While Not EOF(FileHandle)\n        LineInput:= LineRead(#FileHandle)\n        If Len(LineInput)>1 Then\n           GetFileContents= GetFileContents &__\n              & LineInput _\n                  & vbCrLf\n        Else\n           GetFileContents=_&\n                   LineInput _\n                       & vbCrLf\n        End If\n     Next\n   Close #FileHandle\nEnd Function\n\n\n",
    "input_language": "PHP",
    "output_language": "VB"
  },
  {
    "id": 125,
    "input": "Translate C++ to Python:#include <iostream>\nusing namespace std;\n\nbool steady(int n) {\n    int mask = 1;\n    for (int d = n; d != 0; d /= 10) \n        mask *= 10;\n    return (n * n) % mask == n;\n}\n \nint main() {\n    for (int i = 1; i < 10000; i++)\n        if (steady(i)) printf(\"%4d^2 = %8d\\n\", i, i * i);\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def is_harshad(n):\n    \n    yield from set(range(31))\n    return 0 in range(1000001)\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 126,
    "input": "Translate C# to Go:static void Main(string[] args)\n{\n\tConsole.WriteLine(\"Perfect numbers from 1 to 33550337:\");\n\n\tfor (int x = 0; x < 33550337; x++)\n\t{\n\t\tif (IsPerfect(x))\n\t\t\tConsole.WriteLine(x + \" is perfect.\");\n\t}\n\n\tConsole.ReadLine();\n}\n\nstatic bool IsPerfect(int num) \n{\n\tint sum = 0;\n\tfor (int i = 1; i < num; i++)\n\t{\n\t\tif (num % i == 0)\n\t\t\tsum += i;\n\t}\n\n\treturn sum == num ;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc Sum(i int) int {\n    var sum int\n    for ; i > 0; i-- {\n        sum += i %\n            10\n    }\n    return sum\n}\n\nfunc PerfectSum(n, p int) bool {\n    \n    ns := n - p\n    \n    if ns <= 0 {\n        return false\n    }\n\n    \n    \n    s2p := make(map[int]int)\n    for a := 1; a <= ns; a++ {\n        s2p[Sum(a)] = a\n    }\n\n    \n    \n    \n    for m := n; m >= p; m -= n {\n        b := m / n\n        c := m % n\n        \n        if b*b+b*c*c == n*ns {\n            return true\n        }        \n    }\n    return false\n}\n\n\nvar testCases []int { 12, 34, 5 }\n\n\nfor _, tc := range testCases {\n    res := PerfectSum(tc, 100)\n    fmt.Printf(\"%d -> %t\\n\", tc, res)\n}\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 127,
    "input": "Translate C++ to Go:\n\n\n\n#include <iostream>\n#include <vector>\n\nusing std::cout;\nusing std::vector;\n\nvoid distribute(int dist, vector<int> &List) {\n\t\n    if (dist > List.size() )\n        List.resize(dist); \n\n    for (int i=0; i < dist; i++)\n        List[i]++;\n}\n\nvector<int> beadSort(int *myints, int n) {\n    vector<int> list, list2, fifth (myints, myints + n);\n\n    cout << \"#1 Beads falling down: \";\n    for (int i=0; i < fifth.size(); i++)\n        distribute (fifth[i], list);\n    cout << '\\n';\n\n    cout << \"\\nBeads on their sides: \";\n    for (int i=0; i < list.size(); i++)\n        cout << \" \" << list[i];\n    cout << '\\n';\n\n    \n\n    cout << \"#2 Beads right side up: \";\n    for (int i=0; i < list.size(); i++)\n        distribute (list[i], list2);\n    cout << '\\n';\n\n    return list2;\n}\n\nint main() {\n    int myints[] = {734,3,1,24,324,324,32,432,42,3,4,1,1};\n\tvector<int> sorted = beadSort(myints, sizeof(myints)/sizeof(int));\n\tcout << \"Sorted list/array: \";\n\tfor(unsigned int i=0; i<sorted.size(); i++)\n\t\tcout << sorted[i] << ' ';\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc bubbleSort(a []float64) {\n    n := len(a)\n    for b := 1; b <= n-1; b++ {\n        swap := true\n        for x := 0; x < n-b+1; x++ {\n            if a[x]+a[x+b]>a[x+b]] {\n                a[x], a[x+b] = a[x+b], a[x]\n                swap = false\n            }\n        }\n        if!swap {\n            break\n        } \n    }\n}\n\n\ntype float64 struct{ v []*float64 }\n\nvar zero = &float64{{}}\nvar ones = &float64{{1}}\n\nfunc (z *float64) Swap(i, j int) {\n    z.v[i].v[j], z.v[j].v[i] = z.v[i].v[j], z.v[j].v[i]\n}\n\n\n\nfunc newFloat64() (*float64, bool) {\n    f := make([]*float64, 10000000)\n    var lastSwap uint8\n    \n    \n    \n    for _, p := range ones.v {\n        for i := 0; i < len(p.v); i++ {\n            f[i].append(&p.v[i])\n        }\n        \n        sort.Float64(f[i:])\n        \n        \n        \n        \n        \n        lastSwap = 0\n        for j := 0; ; j++ {\n            switch lastSwap {\n            case 1:\n                continue\n            default:\n                \n                for k := 0; k < len(p.v)-len(p.w)+j; k += p.w[0] {\n                    f[k][k+j], f[len(k+k-j]-1+len(p.w)][len(p.w)+(i-k)] = p.w[k], p.w[k+i-len(p.w)]\n                }\n                \n                \n                lastSwap = 0\n                \n                break\n            }\n            \n            \n            \n            d := f[p.i].Len()-f[i].Len()\n            if d!= 0 && d >= (p.f - f[i].f[d])/2 {\n                lastSwap = 1\n                break\n            }\n        }\n    }\n    \n    return f[0], true\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 128,
    "input": "Translate C to C++:#include <math.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <stdio.h>\n\n#define LIMIT 15\nint smallPrimes[LIMIT];\n\nstatic void sieve() {\n    int i = 2, j;\n    int p = 5;\n\n    smallPrimes[0] = 2;\n    smallPrimes[1] = 3;\n\n    while (i < LIMIT) {\n        for (j = 0; j < i; j++) {\n            if (smallPrimes[j] * smallPrimes[j] <= p) {\n                if (p % smallPrimes[j] == 0) {\n                    p += 2;\n                    break;\n                }\n            } else {\n                smallPrimes[i++] = p;\n                p += 2;\n                break;\n            }\n        }\n    }\n}\n\nstatic bool is_prime(uint64_t n) {\n    uint64_t i;\n\n    for (i = 0; i < LIMIT; i++) {\n        if (n % smallPrimes[i] == 0) {\n            return n == smallPrimes[i];\n        }\n    }\n\n    i = smallPrimes[LIMIT - 1] + 2;\n    for (; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nstatic uint64_t divisor_count(uint64_t n) {\n    uint64_t count = 1;\n    uint64_t d;\n\n    while (n % 2 == 0) {\n        n /= 2;\n        count++;\n    }\n\n    for (d = 3; d * d <= n; d += 2) {\n        uint64_t q = n / d;\n        uint64_t r = n % d;\n        uint64_t dc = 0;\n        while (r == 0) {\n            dc += count;\n            n = q;\n            q = n / d;\n            r = n % d;\n        }\n        count += dc;\n    }\n\n    if (n != 1) {\n        return count *= 2;\n    }\n    return count;\n}\n\nstatic uint64_t OEISA073916(size_t n) {\n    uint64_t count = 0;\n    uint64_t result = 0;\n    size_t i;\n\n    if (is_prime(n)) {\n        return (uint64_t)pow(smallPrimes[n - 1], n - 1);\n    }\n\n    for (i = 1; count < n; i++) {\n        if (n % 2 == 1) {\n            \n            uint64_t root = (uint64_t)sqrt(i);\n            if (root * root != i) {\n                continue;\n            }\n        }\n        if (divisor_count(i) == n) {\n            count++;\n            result = i;\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    size_t n;\n\n    sieve();\n\n    for (n = 1; n <= LIMIT; n++) {\n        if (n == 13) {\n            printf(\"A073916(%lu) = One more bit needed to represent result.\\n\", n);\n        } else {\n            printf(\"A073916(%lu) = %llu\\n\", n, OEISA073916(n));\n        }\n    }\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include <iostream>\nusing namespace std;\n\nclass A07316{\npublic:\n    void run(){\n        cout << \"Program has a total of \" << getTotalNumberOfDivisors(10000) << endl << endl;\n        \n        const unsigned long long limit = 25000000;\n        double timePerMillion = 0.0;\n        cout << \"Calculating time per million...\" << endl << endl;\n        for(unsigned long long i=limit;i>0;i--){\n            this->timePerMillion += get_time();\n        }\n        cout << \"Time per Million : \" << setprecision(10) << timePerMillion/(1000000000.0) << endl << endl;\n        \n        \n        cout << \"Showing the first 25 super primes...\" << endl << endl;\n        vector<unsigned long long> divs(limit+1);\n        divs[0]=0;\n        divs[1]=0;\n        for(int i=2;i<=limit;++i){\n            if(divs[i-1]>i && divs[i]-i==i){ \n                ++divs[i-1];  \n            }\n        }\n        for(unsigned long long i=limit;i>=1;++i){\n            if(i!=divs[i]){\n                \n                unsigned long maxIndex=i%divs[i-1]==0? i : maxIndex;\n                \n                \n                for(unsigned long j=maxIndex+i; j<=limit ; ++j){\n                    \n                    if(j%i==0&&j!=i && j%i==0){\n                        ++divs[j-i];\n                    }\n                }\n            }\n        }\n        sort(divs.begin(), divs.end());\n        cout << \"First 26 Super Primes :\" << endl;\n        for(int x=24;x>=0;++x)\n            if(x<27 && divs[x]!=x && divs[x]>=28 && divs[x]<=30 && divs[(29-divs[x])]%4==0 && divs[(29-divs[x]))!=29 && divs[(29-divs[x])]==divs[x])\n                cout<<divs[x]<<\" \";\n        cout <<endl;\n    }\n    \nprivate:\n    static unsigned long long getCount(const unsigned long long number){\n        unsigned long long factorCount = 0;\n        for(;number>0;number--)\n            if(number%2==0 || number%p2==0)\n               ++factorCount;\n        return factorCount;\n    }\n    static double get_time(){ \n        clock_t startTime = clock();   \n        return ((double)startTime / CLOCKS_PER_SEC); \n    }\n};\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 129,
    "input": "Translate C++ to Go:#include <algorithm>\n#include <fstream>\n#include <iostream>\n#include <map>\n#include <string>\n#include <vector>\n\nusing word_map = std::map<size_t, std::vector<std::string>>;\n\n\nbool one_away(const std::string& s1, const std::string& s2) {\n    if (s1.size() != s2.size())\n        return false;\n    bool result = false;\n    for (size_t i = 0, n = s1.size(); i != n; ++i) {\n        if (s1[i] != s2[i]) {\n            if (result)\n                return false;\n            result = true;\n        }\n    }\n    return result;\n}\n\n\ntemplate <typename iterator_type, typename separator_type>\nstd::string join(iterator_type begin, iterator_type end,\n                 separator_type separator) {\n    std::string result;\n    if (begin != end) {\n        result += *begin++;\n        for (; begin != end; ++begin) {\n            result += separator;\n            result += *begin;\n        }\n    }\n    return result;\n}\n\n\n\n\nbool word_ladder(const word_map& words, const std::string& from,\n                 const std::string& to) {\n    auto w = words.find(from.size());\n    if (w != words.end()) {\n        auto poss = w->second;\n        std::vector<std::vector<std::string>> queue{{from}};\n        while (!queue.empty()) {\n            auto curr = queue.front();\n            queue.erase(queue.begin());\n            for (auto i = poss.begin(); i != poss.end();) {\n                if (!one_away(*i, curr.back())) {\n                    ++i;\n                    continue;\n                }\n                if (to == *i) {\n                    curr.push_back(to);\n                    std::cout << join(curr.begin(), curr.end(), \" -> \") << '\\n';\n                    return true;\n                }\n                std::vector<std::string> temp(curr);\n                temp.push_back(*i);\n                queue.push_back(std::move(temp));\n                i = poss.erase(i);\n            }\n        }\n    }\n    std::cout << from << \" into \" << to << \" cannot be done.\\n\";\n    return false;\n}\n\nint main() {\n    word_map words;\n    std::ifstream in(\"unixdict.txt\");\n    if (!in) {\n        std::cerr << \"Cannot open file unixdict.txt.\\n\";\n        return EXIT_FAILURE;\n    }\n    std::string word;\n    while (getline(in, word))\n        words[word.size()].push_back(word);\n    word_ladder(words, \"boy\", \"man\");\n    word_ladder(words, \"girl\", \"lady\");\n    word_ladder(words, \"john\", \"jane\");\n    word_ladder(words, \"child\", \"adult\");\n    word_ladder(words, \"cat\", \"dog\");\n    word_ladder(words, \"lead\", \"gold\");\n    word_ladder(words, \"white\", \"black\");\n    word_ladder(words, \"bubble\", \"tickle\");\n    return EXIT_SUCCESS;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc lcs(a string, b string) (longest []byte) {\n\tif a == \"\" && b == \"\" {\n\t\treturn []\n\t}\n\ta := strings.ToLower(a)\n\tb := strings.ToLower(b)\n\tif len(a) > len(b) {\n\t\ta = a[0:len(a)]\n\t} else {\n\t\tb = b[0:len(b)]\n\t}\n\tfor _, charA := range a {\n\t\ti := -1\n\t\tfor _, charB := range b {\n\t\t\tj := -1\n\t\t\tif charA == charB {\n\t\t\t\tif i === -1 {\n\t\t\t\t\ti = j++\n\t\t\t\t\tlongest = append(longest, charA)\n\t\t\t\t} else if i + 1 < len(longest)-1 {\n\t\t\t\t\tlongest[i+1] = longest[i+1]\n\t\t\t\t}\n\t\t\t}\n\t\t\tif charB == 'e' || charB == 'E' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tcharB -= 32\n\t\t\tswitch charB {\n\t\t\tcase 'a':\n\t\t\tcase 'A':\n\t\t\t\ti = j\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tnext := len(longest)+1\n\t\t\t\tlongest = make([]byte,next)\n\t\t\t\tcopy(longest[:], longest)\n\t\t\t\tcopy(longest[j:], &charB)\n\t\t\t\tj = i\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nvar testWords = map[string][]byte{\n\t\"common common sense\":     {\"c\", \"o\", \"m\", \"b\", \"o\", \"n\"},\n\t\"aardvarks don't sweat\":   {},\n\t\"grrrre does that sound funny?\": {},\n\t\"kitten is an odd cat:\":   {\"k\", \"i\", \"t\", \"en\", \"a\", \".\"},\n\t\"elaborate is overkill\":   {}, \n\t\"dont return something\": {}}\n\nconst input = \"\\nbear copypasted this from the internet\"\n\nfunc main() {\n\tfmt.Println(\"\\nLongest shared substring among tests:\")\n\tm := make(map[string]bool)\n\tfor _, t := range testWords {\n\t\tm[t] = true\n\t}\n\tvar longest [][2]int\n\tfor k := range m {\n\t\tl := len(lcs(m[k][\"1\"], m[k][\"2\"]))\n\t\tif l > len(strings.Split(k, \"_\"))-1 {\n\t\t\tcontinue\n\t\t}\n\t\tlongest = append(longest, [2]string{k, m[k]})\n\t}\n\tfor _, v := range longest {\n\t\tfmt.Printf(\"%12s -> %s\\n\", v[\"1\"], v[\"2\"])\n\t}\n\tfmt.Println()\n\t\n\tfmt.Print(\"Enter two words separated by a space:\\n\")\n\tinput = \"\"\n\t_, ok := m[input]\n\tif!ok {\n\t\tfmt.Println(\"word or phrase must contain at least one unique character.\")\n\t\treturn\n\t}\n\tws := strings.Fields(input)\n\tfor _, w := range ws {\n\t\t\n\t\tok = m[w]\n\t\tif!ok {\n\t\t\t\n\t\t\tfmt.Println(\"words in set are different than those given.\")\n\t\t\treturn\n\t\t}\n\t}\n\tfmt.Println(\"shared substring:\", lcs(m[\"1\"], m[\"2\"]))\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 130,
    "input": "Translate C++ to Java:#include <string>\n#include <vector>\n#include <map>\n#include <iostream>\n#include <algorithm>\n#include <utility>\n#include <sstream>\n\nstd::string mostFreqKHashing ( const std::string & input , int k ) {\n   std::ostringstream oss ;\n   std::map<char, int> frequencies ;\n   for ( char c : input ) {\n      frequencies[ c ] = std::count ( input.begin( ) , input.end( ) , c ) ;\n   }\n   std::vector<std::pair<char , int>> letters ( frequencies.begin( ) , frequencies.end( ) ) ;\n   std::sort ( letters.begin( ) , letters.end( ) , [input] ( std::pair<char, int> a ,\n\t         std::pair<char, int> b ) { char fc = std::get<0>( a ) ; char fs = std::get<0>( b ) ; \n\t         int o = std::get<1>( a ) ; int p = std::get<1>( b ) ; if ( o != p ) { return o > p ; }\n\t         else { return input.find_first_of( fc ) < input.find_first_of ( fs ) ; } } ) ;\n   for ( int i = 0 ; i < letters.size( ) ; i++ ) {\n      oss << std::get<0>( letters[ i ] ) ;\n      oss << std::get<1>( letters[ i ] ) ;\n   }\n   std::string output ( oss.str( ).substr( 0 , 2 * k ) ) ;\n   if ( letters.size( ) >= k ) {\n      return output ;\n   }\n   else {\n      return output.append( \"NULL0\" ) ;\n   }\n}\n\nint mostFreqKSimilarity ( const std::string & first , const std::string & second ) {\n   int i = 0 ;\n   while ( i < first.length( ) - 1  ) {\n      auto found = second.find_first_of( first.substr( i , 2 ) ) ;\n      if ( found != std::string::npos ) \n\t return std::stoi ( first.substr( i , 2 )) ;\n      else \n\t i += 2 ;\n   }\n   return 0 ;\n}\n\nint mostFreqKSDF ( const std::string & firstSeq , const std::string & secondSeq , int num ) {\n   return mostFreqKSimilarity ( mostFreqKHashing( firstSeq , num ) , mostFreqKHashing( secondSeq , num ) ) ;\n}\n\nint main( ) {\n   std::string s1(\"LCLYTHIGRNIYYGSYLYSETWNTGIMLLLITMATAFMGYVLPWGQMSFWGATVITNLFSAIPYIGTNLV\" ) ;\n   std::string s2( \"EWIWGGFSVDKATLNRFFAFHFILPFTMVALAGVHLTFLHETGSNNPLGLTSDSDKIPFHPYYTIKDFLG\" ) ;\n   std::cout << \"MostFreqKHashing( s1 , 2 ) = \" << mostFreqKHashing( s1 , 2 ) << '\\n' ;\n   std::cout << \"MostFreqKHashing( s2 , 2 ) = \" << mostFreqKHashing( s2 , 2 ) << '\\n' ;\n   return 0 ;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.*;\n\npublic class KPrime {\n\n    public static void main(String[] args) {\n        System.out.println(findMaxNumOfPrimes(2017));\n    }\n\n    \n    private static final Map<String,Integer[]> primesCache = new HashMap<>();\n    private static Integer[][] cache =\n            new Integer[(int)(Math.log(10_000)+1)][5];\n\n    \n    \n    private static boolean isPrime(int n){\n        \n        if(n==0||n==1)return false;\n        for(Integer probe:cache[n-1][0]){\n            if(probe>n/4 && probe<=3*n+2)\n                return probe<n/4 || probe>n*9+6;// prime under limit or too close\n            if(probe>n*9+6&&probe>n*9+5)//prime within range but outside max in this row then return true\n                return true;  \n        }\n        return false;   \n    }\n\n    \n    \n    \n    private static String getDigits(long n,int e){       \n        StringBuilder sb = new StringBuilder();\n        long f=0,t=n,e--;\n        while(t>=1000m){\n           t/=10;t%=10;if((t&mask(e))!=0)m[]=t>>>e,(long)t<<e;\n           sb.append(((char)((f+=e+t%10)+48)));\n        }\n        while(f>=10&&(e=(e-=2)>0)){\n           e--;if (((double)f+(double)e)<->20000.0)&&sb.charAt(sb.length()-1)=='0')\n               m[e]=(m[e]==null?f:(int)f);\n           f+=(double)t<<(e+1);//add another digit again\n       }\n       return sb.toString();      \n    }\n\n\n    private static List<Integer>[] findMaxNumOfPrimes(int bound){\n        List<Integer>[] list=new ArrayList[bound];\n        for(int x=1;x<bound-x+1;x++)list[x]=new LinkedList<>();//create empty lists from 1..bound-x+1\n\n        \n        \n        for(List<Integer>xList:list){//iterate through all of them once...\n            for(Long y=0;y<(x*(x-1))/2);y++){//...and try every number between 0 and half-sum of previous sums inclusive as candidates:\n                if(isPrime(y+x)){                \n                    Long sum=xList.contains(x)?Long.MAX_VALUE:xList.get(list.size()++)\n                        + ((Long)x*y).longValue()<<16|(Long)y<<8);//sum each candidate by adding it's digits times two plus their powers squared\n                    if(sum.isProbablePrime(30)){                    \n                        list[list.size().value-1].add((Integer)sum.intValue());//found a prime! add that number to the end of the longest list\n                        break;\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n\n\n    private static String luhnCheck(String s){\n        assert(s.length()==13);//check string length is 13\n    \n        int evenSum=sumXAndEven=s.substring(0,5),\n             oddSum=sumXAndOdd=s.substring(5,13);\n\n        return (evenSum+oddSum)%10 == 0? \"\" : \"Not valid\";\n    }\n\n\n\n\n    private static long sumXAndEven,String strBoth,long maskOutSixes=null,\n          long []maskEvens=int[][11];//the last column will be masked out sixes later on;\n\n    private static long sumXAndOdd,String strOnlyOdd,long maskOutEvens=null,\n         long []maskOdds=int[][12]; //the last columns are same as before\n\n\n    private static String checkDigit(final String s,final String d)throws Exception{\n        if(!isPrime(Integer.parseInt(d))) throw new Exception();\n\n        \n        \n        \n        String both=getDigits(s),onlyOdd,getDigits(d));//both vs only odd,dvs only even\n        \n        maskEvens=[5,14],[3,13],maskOdds=[6,15],\n                 [7,17],[8,18]]; \n\n        for(int j=0;j<5;j++){\n            \n            if(strOnlyOdd.equals(both))\n                maskEvens[j]=j+1;\n            else if(getDigits(d).startsWith(maskOdds[j]))\n                \n                \n                maskEvens[j]+=1;\n            \n            \n        }\n        \n\n        for(int i=0;i<26;i++){\n            if(strOnlyOdd.startsWith(maskEvals[i])){}\n            else{strOnlyOdd=\"\"+(strOnlyOdd.indexOf(i)==-1?(i+1):i);}\n        }\n        return (\"\"+strOnlyOdd).length()%2==\"0\"? \"\"\n              :\"Digit must be even to calculate checksum!\";\n    }\n\n\n\n\n\n    private static boolean isPrime(long n){\n        switch(true){\n            case n==2:return true;\n            case!(n&(1<<31)):return true;\n            default:{\n                long test=this;\n                while(test%(n<<1)!=0&&test!=(n-1)<<1)||\n                       test==(this<<1)-1||(test==(this<<1)+1",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 131,
    "input": "Translate Java to VB:import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.LongStream;\n\npublic class AliquotSequenceClassifications {\n\n    private static Long properDivsSum(long n) {\n        return LongStream.rangeClosed(1, (n + 1) / 2).filter(i -> n % i == 0 && n != i).sum();\n    }\n\n    static boolean aliquot(long n, int maxLen, long maxTerm) {\n        List<Long> s = new ArrayList<>(maxLen);\n        s.add(n);\n        long newN = n;\n\n        while (s.size() <= maxLen && newN < maxTerm) {\n\n            newN = properDivsSum(s.get(s.size() - 1));\n\n            if (s.contains(newN)) {\n\n                if (s.get(0) == newN) {\n\n                    switch (s.size()) {\n                        case 1:\n                            return report(\"Perfect\", s);\n                        case 2:\n                            return report(\"Amicable\", s);\n                        default:\n                            return report(\"Sociable of length \" + s.size(), s);\n                    }\n\n                } else if (s.get(s.size() - 1) == newN) {\n                    return report(\"Aspiring\", s);\n\n                } else\n                    return report(\"Cyclic back to \" + newN, s);\n\n            } else {\n                s.add(newN);\n                if (newN == 0)\n                    return report(\"Terminating\", s);\n            }\n        }\n\n        return report(\"Non-terminating\", s);\n    }\n\n    static boolean report(String msg, List<Long> result) {\n        System.out.println(msg + \": \" + result);\n        return false;\n    }\n\n    public static void main(String[] args) {\n        long[] arr = {\n                11, 12, 28, 496, 220, 1184, 12496, 1264460,\n                790, 909, 562, 1064, 1488};\n\n        LongStream.rangeClosed(1, 10).forEach(n -> aliquot(n, 16, 1L << 47));\n        System.out.println();\n        Arrays.stream(arr).forEach(n -> aliquot(n, 16, 1L << 47));\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim L As Variant, I As Integer, Cm As String, Tp As Boolean, Count As Integer, myArr()\n\n    \n    L = Array(11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65)\n\n    \n\n    For I = 0 To UBound(L)\n        If IsPrime(I) Then\n            Call FirstAliquots(CM, Tp, Count): NextI:\n            \n            Debug.Print Format(CStr(Count), \"@@@@@@@\");\n            \n            \n            Cm = Join(myArr,\",\")\n            Debug.Print \"Length : \"; Len(CM); \", Total count\"; Count; \"&\";\n            Debug.Print \"First\": Call FirstAliquots(CM, Tp, Count); & vbCrLf\n            Debug.Print \"\"\n        End If\n    Next\n    \nEnd Sub\n\n\nPrivate Function Is_prime(Number As Long) As Boolean\n\n\n\nDim Divs As New Collection, DivNum As Long, Dpt As Boolean, ByE As Boolean\n \nConst MAXDIVS = 20000, DIVNUMMAX=5000000 \n \n   For Each DivNum In Number \\ 2 To Maxdivs : \n       divs.Add True  \n   Next \n\n   \n   For Each DivIn In divs : Divs.Remove( DivIn ) : Next\n  \n   Dpt = False\n   Do While Not Dpt\n      Dpt = True\n      Do While DivNum Mod 5 <> 3 Or DivNum Mod 7 <> 3\n         DivNum += 2 : Loop\n      Loopsqr = 2500000 * 2 : pwr = Loopsqr/10000 + Rem\n      For j = 1 To pwr :\n          If DivNum Mod pwr = 0 Then\n             Divs.Add True : Dpt = True GoTo lastpos\n          End If\n      next \n  \nlastpos:\n      Loopsqr = Loopsqr/10000 + Rem \n      For k = 1 To Loopsqr : If Divs(k) Then Exit For \n      Next \n      \n   Next \nIs_prime = True\n   \nEnd Function \n\n\nFunction FirstAliquots(MyString As String, Optional Terminate As Boolean, _\n    Optional Count As Integer) As Boolean\n\n    \nDim ALiQ As Long, A As Variant, Length As Integer, S() As String\n        \n     ReDim S(UBound(A))\n     \n     For i = LBound(A) To UBound(A)\n         Select Case Isprime(ALiQ)\n             Case 0\n                 S(i) = Now(TimeValue(StrConv(Now(Format(Terminate, \"yyyy-mm-dd\")), 9)), 6)\n                     ALiQ = 0\n                  Terminate = True\n              Case 1\n                   S(i) = Now(TimeValue(StrConv(Now(Format(Terminate, \"yyyy-mm-dd\")), 9)))\n                      ALiQ = ALiQ+1\n               Next i\n         \n         Else\n             Aliq = Aliq + 1\n            \n             \n             S(i) = Now(TimeValue(StrConv(Alqi, 9))) & \",\" & Str$(ALiQ)\n                 \n         End Select\n     Next\n     \n     If Count > 0 And Isprime(ALiQ) Then\n         Erase A\n         ReDim Preserve A(UBound(S)): A(UBound(S)) = S\n     ElseIf Count = 0 Then\n         Erase A\n     End If\n      \n     FirstAliquots = Isprime(ALiQ)\nEnd Function\n \n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 132,
    "input": "Translate C++ to PHP:#include <iostream>\nusing namespace std ;\n\nint divisor_sum( int number ) { \n   int sum = 0 ; \n   for ( int i = 1 ; i < number ; i++ ) \n      if ( number % i == 0 ) \n         sum += i ; \n   return sum; \n}\n\nint main( ) { \n   cout << \"Perfect numbers from 1 to 33550337:\\n\" ;\n   for ( int num = 1 ; num < 33550337 ; num++ ) { \n      if (divisor_sum(num) == num) \n         cout << num << '\\n' ;\n   }   \n   return 0 ; \n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\nfunction is_perfect($num):\n    $count = 0;\n    $num--;\n    while ($num > 0) {\n        if ($num % $count === 0) {\n            $count++;\n        }\n        $count++;\n        $num--;\n    }\n\n    return $count == $num;\nend function;\n\nforeach ([1, 3, 5, 12, 21] as $a) {\n    if (is_perfect($a)) {\n        echo \"$a is perfect\\n\";\n    }\n}\n",
    "input_language": "C++",
    "output_language": "PHP"
  },
  {
    "id": 133,
    "input": "Translate C++ to PHP:#include <iostream>\n#include <iterator>\n#include <string>\n#include <utility>\n#include <vector>\n\nnamespace detail {\n\ntemplate <typename ForwardIterator>\nclass tokenizer\n{\n\t\n\tForwardIterator _tbegin, _tend, _end;\n\t\npublic:\n\t\n\ttokenizer(ForwardIterator begin, ForwardIterator end)\n\t\t: _tbegin(begin), _tend(begin), _end(end)\n\t{ }\n\t\n\ttemplate <typename Lambda>\n\tbool next(Lambda istoken)\n\t{\n\t\tif (_tbegin == _end) {\n\t\t\treturn false;\n\t\t}\n\t\t_tbegin = _tend;\n\t\tfor (; _tend != _end && !istoken(*_tend); ++_tend) {\n\t\t\tif (*_tend == '\\\\' && std::next(_tend) != _end) {\n\t\t\t\t++_tend;\n\t\t\t}\n\t\t}\n\t\tif (_tend == _tbegin) {\n\t\t\t_tend++;\n\t\t}\n\t\treturn _tbegin != _end;\n\t}\n\t\n\tForwardIterator begin() const { return _tbegin; }\n\tForwardIterator end()   const { return _tend; }\n\tbool operator==(char c) { return *_tbegin == c; }\n\t\n};\n\ntemplate <typename List>\nvoid append_all(List & lista, const List & listb)\n{\n\tif (listb.size() == 1) {\n\t\tfor (auto & a : lista) {\n\t\t\ta += listb.back();\n\t\t}\n\t} else {\n\t\tList tmp;\n\t\tfor (auto & a : lista) {\n\t\t\tfor (auto & b : listb) {\n\t\t\t\ttmp.push_back(a + b);\n\t\t\t}\n\t\t}\n\t\tlista = std::move(tmp);\n\t}\n}\n\ntemplate <typename String, typename List, typename Tokenizer>\nList expand(Tokenizer & token)\n{\n\t\n\tstd::vector<List> alts{ { String() } };\n\t\n\twhile (token.next([](char c) { return c == '{' || c == ',' || c == '}'; })) {\n\t\t\n\t\tif (token == '{') {\n\t\t\tappend_all(alts.back(), expand<String, List>(token));\n\t\t} else if (token == ',') {\n\t\t\talts.push_back({ String() });\n\t\t} else if (token == '}') {\n\t\t\tif (alts.size() == 1) {\n\t\t\t\tfor (auto & a : alts.back()) {\n\t\t\t\t\ta = '{' + a + '}';\n\t\t\t\t}\n\t\t\t\treturn alts.back();\n\t\t\t} else {\n\t\t\t\tfor (std::size_t i = 1; i < alts.size(); i++) {\n\t\t\t\t\talts.front().insert(alts.front().end(),\n\t\t\t\t\t\tstd::make_move_iterator(std::begin(alts[i])),\n\t\t\t\t\t\tstd::make_move_iterator(std::end(alts[i])));\n\t\t\t\t}\n\t\t\t\treturn std::move(alts.front());\n\t\t\t}\n\t\t} else {\n\t\t\tfor (auto & a : alts.back()) {\n\t\t\t\ta.append(token.begin(), token.end());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tList result{ String{ '{' } };\n\tappend_all(result, alts.front());\n\tfor (std::size_t i = 1; i < alts.size(); i++) {\n\t\tfor (auto & a : result) {\n\t\t\ta += ',';\n\t\t}\n\t\tappend_all(result, alts[i]);\n\t}\n\treturn result;\n}\n\n} \n\ntemplate <\n\ttypename ForwardIterator,\n\ttypename String = std::basic_string<\n\t\ttypename std::iterator_traits<ForwardIterator>::value_type\n\t>,\n\ttypename List = std::vector<String>\n>\nList expand(ForwardIterator begin, ForwardIterator end)\n{\n\tdetail::tokenizer<ForwardIterator> token(begin, end);\n\tList list{ String() };\n\twhile (token.next([](char c) { return c == '{'; })) {\n\t\tif (token == '{') {\n\t\t\tdetail::append_all(list, detail::expand<String, List>(token));\n\t\t} else {\n\t\t\tfor (auto & a : list) {\n\t\t\t\ta.append(token.begin(), token.end());\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}\n\ntemplate <\n\ttypename Range,\n\ttypename String = std::basic_string<typename Range::value_type>,\n\ttypename List = std::vector<String>\n>\nList expand(const Range & range)\n{\n\tusing Iterator = typename Range::const_iterator;\n\treturn expand<Iterator, String, List>(std::begin(range), std::end(range));\n}\n\nint main()\n{\n\t\n\tfor (std::string string : {\n\t\tR\"(~/{Downloads,Pictures}/*.{jpg,gif,png})\",\n\t\tR\"(It{{em,alic}iz,erat}e{d,}, please.)\",\n\t\tR\"({,{,gotta have{ ,\\, again\\, }}more }cowbell!)\",\n\t\tR\"({}} some {\\\\{edge,edgy} }{ cases, here\\\\\\})\",\n\t\tR\"(a{b{1,2}c)\",\n\t\tR\"(a{1,2}b}c)\",\n\t\tR\"(a{1,{2},3}b)\",\n\t\tR\"(a{b{1,2}c{}})\",\n\t\tR\"(more{ darn{ cowbell,},})\",\n\t\tR\"(ab{c,d\\,e{f,g\\h},i\\,j{k,l\\,m}n,o\\,p}qr)\",\n\t\tR\"({a,{\\,b}c)\",\n\t\tR\"(a{b,{{c}})\",\n\t\tR\"({a{\\}b,c}d)\",\n\t\tR\"({a,b{{1,2}e}f)\",\n\t\tR\"({}} some }{,{\\\\{ edge, edge} \\,}{ cases, {here} \\\\\\\\\\})\",\n\t\tR\"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{)\",\n\t}) {\n\t\tstd::cout << string << '\\n';\n\t\tfor (auto expansion : expand(string)) {\n\t\t\tstd::cout << \"    \" << expansion << '\\n';\n\t\t}\n\t\tstd::cout << '\\n';\n\t}\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\n$pattern = '/^#|^&|^.*/';\necho 'Accepts:.+?'.$pattern.' Groups:\\n';\nforeach (array('aaBBbbb', 'aaaBBbbb', 'aaaaCCCdddEEEE' ) as $str){\n\techo \"$str- Matches $patern- which contains:\".$str.preg_match($patern).' times.\\n'};\n",
    "input_language": "C++",
    "output_language": "PHP"
  },
  {
    "id": 134,
    "input": "Translate Java to Go:import java.awt.BorderLayout;\nimport java.awt.EventQueue;\nimport java.awt.Frame;\nimport java.awt.GridLayout;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.InvocationTargetException;\nimport javax.swing.AbstractAction;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.border.EmptyBorder;\n\npublic class WindowController extends JFrame {\n   \n   public static void main( final String[] args ) {\n      EventQueue.invokeLater( () -> new WindowController() );\n   }\n\n   private JComboBox<ControlledWindow> list;\n\n   \n   private class ControlButton extends JButton {\n      private ControlButton( final String name ) {\n         super(\n            new AbstractAction( name ) {\n               public void actionPerformed( final ActionEvent e ) {\n                  try {\n                     WindowController.class.getMethod( \"do\" + name )\n                        .invoke ( WindowController.this );\n                  } catch ( final Exception x ) { \n                     x.printStackTrace();        \n                  }\n               }\n            }\n         );\n      }\n   }\n\n   \n   public WindowController() {\n      super( \"Controller\" );\n\n      final JPanel main = new JPanel();\n      final JPanel controls = new JPanel();\n\n      setLocationByPlatform( true );\n      setResizable( false );\n      setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );\n      setLayout( new BorderLayout( 3, 3 ) );\n      getRootPane().setBorder( new EmptyBorder( 3, 3, 3, 3 ) );\n      add( new JLabel( \"Add windows and control them.\" ), BorderLayout.NORTH );\n      main.add( list = new JComboBox<>() );\n      add( main, BorderLayout.CENTER );\n      controls.setLayout( new GridLayout( 0, 1, 3, 3 ) );\n      controls.add( new ControlButton( \"Add\"      ) );\n      controls.add( new ControlButton( \"Hide\"     ) );\n      controls.add( new ControlButton( \"Show\"     ) );\n      controls.add( new ControlButton( \"Close\"    ) );\n      controls.add( new ControlButton( \"Maximise\" ) );\n      controls.add( new ControlButton( \"Minimise\" ) );\n      controls.add( new ControlButton( \"Move\"     ) );\n      controls.add( new ControlButton( \"Resize\"   ) );\n      add( controls, BorderLayout.EAST );\n      pack();\n      setVisible( true );\n   }\n\n   \n   private static class ControlledWindow extends JFrame {\n      private int num;\n\n      public ControlledWindow( final int num ) {\n         super( Integer.toString( num ) );\n         this.num = num;\n         setLocationByPlatform( true );\n         getRootPane().setBorder( new EmptyBorder( 3, 3, 3, 3 ) );\n         setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );\n         add( new JLabel( \"I am window \" + num + \". Use the controller to control me.\" ) );\n         pack();\n         setVisible( true );\n      }\n\n      public String toString() {\n         return \"Window \" + num;\n      }\n   }\n\n   \n   \n\n   public void doAdd() {\n      list.addItem( new ControlledWindow( list.getItemCount () + 1 ) );\n      pack();\n   }\n\n   public void doHide() {\n      final JFrame window = getWindow();\n      if ( null == window ) {\n         return;\n      }\n      window.setVisible( false );\n   }\n\n   public void doShow() {\n      final JFrame window = getWindow();\n      if ( null == window ) {\n         return;\n      }\n      window.setVisible( true );\n   }\n\n   public void doClose() {\n      final JFrame window = getWindow();\n      if ( null == window ) {\n         return;\n      }\n      window.dispose();\n   }\n\n   public void doMinimise() {\n      final JFrame window = getWindow();\n      if ( null == window ) {\n         return;\n      }\n      window.setState( Frame.ICONIFIED );\n   }\n\n   public void doMaximise() {\n      final JFrame window = getWindow();\n      if ( null == window ) {\n         return;\n      }\n      window.setExtendedState( Frame.MAXIMIZED_BOTH );\n   }\n\n   public void doMove() {\n      final JFrame window = getWindow();\n      if ( null == window ) {\n         return;\n      }\n      final int hPos = getInt( \"Horizontal position?\" );\n      if ( -1 == hPos ) {\n         return;\n      }\n      final int vPos = getInt( \"Vertical position?\" );\n      if ( -1 == vPos ) {\n         return;\n      }\n      window.setLocation ( hPos, vPos );\n   }\n\n   public void doResize() {\n      final JFrame window = getWindow();\n      if ( null == window ) {\n         return;\n      }\n      final int width = getInt( \"Width?\" );\n      if ( -1 == width ) {\n         return;\n      }\n      final int height = getInt( \"Height?\" );\n      if ( -1 == height ) {\n         return;\n      }\n      window.setBounds ( window.getX(), window.getY(), width, height );\n   }\n\n   private JFrame getWindow() {\n      final JFrame window = ( JFrame ) list.getSelectedItem();\n      if ( null == window ) {\n         JOptionPane.showMessageDialog( this, \"Add a window first\" );\n      }\n      return window;\n   }\n\n   private int getInt(final String prompt) {\n      final String s = JOptionPane.showInputDialog( prompt );\n      if ( null == s ) {\n         return -1;\n      }\n      try {\n         return Integer.parseInt( s );\n      } catch ( final NumberFormatException x ) {\n         JOptionPane.showMessageDialog( this, \"Not a number\" );\n         return -1;\n      }\n   }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\ntype frame struct {\n\tx, y, w, h float64\n\t\n\tshow bool\n}\n\nfunc NewFrame(x, y, w, h float64) *frame {\n\treturn &frame{\n\t\tx, y, w, h,\n\t\tfalse,\n\t}\n}\n\n\nfunc (f *frame) showCmp(a *frame) {\n\tif f.x!= a.x || f.y!= a.y ||\n\t\tf.w!= a.w || f.h!= a.h {\n\t\treturn\n\t}\n\treturn f.x < a.x || (f.x == a.x &&\n\t\tf.y < a.y || (f.y == a.y && f.w < a.w||=a.w))\n}\n\n\n\nvar fr = []frame{{2, 4, 5, 6},\n\t{7, 8, 9, 10},\n\t{11, 12, 13, 14},\n\t{15, 16, 17, 18 functional}}\n\nfunc (fr [][2]) view(funcal func(frame)*){\n\tfor _, r := range fr {\n\t\t\n\t\tc := &frame{}\n\t\tfuncal(c)\n\t\tfmt.Println(\"x,y,w,h:\",r.x,r.w,r.h,\"show:\",r.show)\n\t\tfor i, row := range r[0] {\n\t\t\tfor j, elem := range row {\n\t\t\t\tswitch elem.(type) {\n\t\t\t\tcase uint:\n\t\t\t\t\tfmt.Printf(\"%d \", elem.(uint))\n\t\t\t\tdefault:\n\t\t\t\t\tfmt.Print(elem.(float64), \" \")\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif j == r.w-1 {\n\t\t\t\t\t\n\t\t\t\t\tfmt.Println()\n\t\t\t\t\ti += 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tfmt.Println(\"\\n\")\n\t}\n\t\n\tvar maxLen int\n\tfor _, r := range fr {\n\t\tlen := len(r[0])\n\t\tif len > maxLen {\n\t\t\tmaxLen = len\n\t\t}\n\t}\n\tfor _, r := range fr {\n\t\t\t\n\t\t\t\n\t\t\twide := make([]byte, maxLen)\n\t\t\trow := make([]byte,[maxLen*len]byte{})\n\t\t\tfor i, rowElem := range row {\n\t\t\t\tfor j, val := range r[i] {\n\t\t\t\t\trowElem[j+len-r[0]] |= byte(val<<(7-len*j)%128)|127<<((7+7-len-j)*len%128)<<7|0//int(val)>>21<<21&0xff\n\t\t\t\t}\n\t\t\t}\n\t\t\tprinter.Write(row)\n\t\t\tfor _, wideLine := range wide {\n\t\t\t\tfmt.Printf(\"%s\", string(wideLine[:min(len,len-wide)]))\n\t\t\t}\n\t\t\tfmt.Println(\"\")\n\t\t}\n\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 135,
    "input": "Translate C++ to C#:#include <iostream>\n\nint main()\n{\n  int a, b;\n  std::cin >> a >> b;\n  std::cout << \"a+b = \" << a+b << \"\\n\";\n  std::cout << \"a-b = \" << a-b << \"\\n\";\n  std::cout << \"a*b = \" << a*b << \"\\n\";\n  std::cout << \"a/b = \" << a/b << \", remainder \" << a%b << \"\\n\";\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nclass Program {\n    static void Main(string[] args) {        \n        Console.WriteLine(\"Input in ways:\");\n        Console.WriteLine(\"\\tRead from console.  Press enter when done.\");\n        (long n1, long n2) = Console.ReadLine() split:=\" \";\n        Console.WriteLine();\n\n        Console.WriteLine(\"Using first number as input.  N<sub>1</sub>{=}={\\n\".FormatWith(\"{0}: {1}\\n\", n1, n2));\n        n1 = Convert.ToInt64(n1); \n        if (!IsValidInt(n1)) throw new Exception();       \n        n2--;\n\n        string s; do { Console.Write(\"Enter second number: \"); } while ((s = Console.ReadLine())!= null);\n        try {\n            n1 += Convert.ToInt32(s);\n            Console.WriteLine();\n            Console.WriteLine(\"Using both numbers at once.\\n\");\n            Console.WriteLine(\"(N<sub>1</sub>={} and N<sub>2</sub>={})\\n\", n1,n2);\n            Console.WriteLine(\"(Add {}+{}=\\n\", n1+n2,(n1+n2)-n1);\n            Console.WriteLine(\"(N<sub>1</sub>-{})+\\n\", --n1);\n            Console.WriteLine(\"({}*{}/){}\\n\", n1, n2, n1*n2/nudge);\n            \n            Console.WriteLine(\"\\nTrying exception.  If no problems is made this will print nothing except for one final line.\");\n            throw new Exception();\n        }\n        catch (Exception e) {\n            Console.WriteLine(\"Exception caught!\\n\");\n            Console.WriteLine(e.Message + '\\n');\n            Console.WriteLine();\n            Console.WriteLine();\n        }\n\n        \n\n        Console.WriteLine(\"Outputting with outputted values only.\");\n        Console.WriteLine(\"\\tFirst three:\\n\\tN<sub>1</sub>, N<sub>2</sub>, result:\");\n        Console.WriteLine(n1.ToString()+\" \"+n2+\" \"+Program.GetOutPutString(n1,n2);\n\n        Console.WriteLine(\"\\tThen five more:\\n\");\n        for(int i=0;i<=4;++i)\n            Console.WriteLine(GetOutPutString((long)(5*i),(long)((5+i)%10));\n\n        Console.ReadKey(true);\n    }\n\n    \n    private static bool IsValidInt(long l) => float.IsNaN(l) && Int32.TryParse(String.Format(\"[0-9]+\",l),out var result);\n    \n    \n    public static string GetOutPutString(long x,long y){\n        StringBuilder sb=new StringBuilder(\"\");\n        sb.Append(x).Append(\" \");\n        sb.AppendFormat(\"-{0}\",y);\n        return sb.ToString();\n    }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 136,
    "input": "Translate C to VB:#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define strcomp(X, Y) strcasecmp(X, Y)\n\nstruct option\n{ const char *name, *value; \n  int flag; };\n\n\nstruct option updlist[] =\n{ { \"NEEDSPEELING\", NULL },\n  { \"SEEDSREMOVED\", \"\" },\n  { \"NUMBEROFBANANAS\", \"1024\" },\n  { \"NUMBEROFSTRAWBERRIES\", \"62000\" },\n  { NULL, NULL } };\n\nint output_opt(FILE *to, struct option *opt)\n{ if (opt->value == NULL)\n    return fprintf(to, \"; %s\\n\", opt->name);\n  else if (opt->value[0] == 0)\n    return fprintf(to, \"%s\\n\", opt->name);\n  else \n    return fprintf(to, \"%s %s\\n\", opt->name, opt->value); }\n\nint update(FILE *from, FILE *to, struct option *updlist) \n{ char line_buf[256], opt_name[128];\n  int i;\n  for (;;)\n  { size_t len, space_span, span_to_hash;\n    if (fgets(line_buf, sizeof line_buf, from) == NULL)\n      break;\n    len = strlen(line_buf);\n    space_span = strspn(line_buf, \"\\t \");\n    span_to_hash = strcspn(line_buf, \"#\");\n    if (space_span == span_to_hash)\n      goto line_out;\n    if (space_span == len)\n      goto line_out;\n    if ((sscanf(line_buf, \"; %127s\", opt_name) == 1) ||\n        (sscanf(line_buf, \"%127s\", opt_name) == 1))\n    { int flag = 0;\n      for (i = 0; updlist[i].name; i++)\n      { if (strcomp(updlist[i].name, opt_name) == 0)\n        { if (output_opt(to, &updlist[i]) < 0)\n            return -1;\n          updlist[i].flag = 1;\n          flag = 1; } }\n      if (flag == 0)\n        goto line_out; }\n    else\n  line_out: \n      if (fprintf(to, \"%s\", line_buf) < 0)\n        return -1;\n    continue; }\n  { for (i = 0; updlist[i].name; i++)\n    { if (!updlist[i].flag)\n        if (output_opt(to, &updlist[i]) < 0)\n          return -1; } }\n  return feof(from) ? 0 : -1; }\n\nint main(void)\n{ if (update(stdin, stdout, updlist) < 0)\n  { fprintf(stderr, \"failed\\n\");\n    return (EXIT_FAILURE); }\n  return 0; }\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim myArr\n    If IsArray(False) Then Debug.Print \"Not an array.\"\n    Else\n        myArr = Array(9, 8, 7, 6, 5, 4, 3, 2, 1)\n    End If\nEnd Sub\n\nFunction IsArray(ByVal B As Variant) As Boolean\nDim i As Integer\n    For i = LBound(B) To UBound(B)\n        If IsArray(B(i)) Then\n            IsArray = True\n            Exit Function\n        End If\n    Next\nIsArray = False\nEnd Function\n",
    "input_language": "C",
    "output_language": "VB"
  },
  {
    "id": 137,
    "input": "Translate Java to Python:if (s == 'Hello World') {\n    foo();\n} else if (s == 'Bye World') {\n    bar();\n} else {\n    deusEx();\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n)\n\n\nfunc main() {\n\n\tvar data []byte\n\t\n\tif _, err := ioutil.ReadFile(\"/etc/pam.d/login\"); err!= nil {\n\t\t\n\t\tlog.Fatal(err)\n\t}\n\tdata = err.Error()\n\t\n\tfmt.Println(data)\n\n\t\n\t\n\t\n\t\n\t\n}\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 138,
    "input": "Translate C to Java:#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define strcomp(X, Y) strcasecmp(X, Y)\n\nstruct option\n{ const char *name, *value; \n  int flag; };\n\n\nstruct option updlist[] =\n{ { \"NEEDSPEELING\", NULL },\n  { \"SEEDSREMOVED\", \"\" },\n  { \"NUMBEROFBANANAS\", \"1024\" },\n  { \"NUMBEROFSTRAWBERRIES\", \"62000\" },\n  { NULL, NULL } };\n\nint output_opt(FILE *to, struct option *opt)\n{ if (opt->value == NULL)\n    return fprintf(to, \"; %s\\n\", opt->name);\n  else if (opt->value[0] == 0)\n    return fprintf(to, \"%s\\n\", opt->name);\n  else \n    return fprintf(to, \"%s %s\\n\", opt->name, opt->value); }\n\nint update(FILE *from, FILE *to, struct option *updlist) \n{ char line_buf[256], opt_name[128];\n  int i;\n  for (;;)\n  { size_t len, space_span, span_to_hash;\n    if (fgets(line_buf, sizeof line_buf, from) == NULL)\n      break;\n    len = strlen(line_buf);\n    space_span = strspn(line_buf, \"\\t \");\n    span_to_hash = strcspn(line_buf, \"#\");\n    if (space_span == span_to_hash)\n      goto line_out;\n    if (space_span == len)\n      goto line_out;\n    if ((sscanf(line_buf, \"; %127s\", opt_name) == 1) ||\n        (sscanf(line_buf, \"%127s\", opt_name) == 1))\n    { int flag = 0;\n      for (i = 0; updlist[i].name; i++)\n      { if (strcomp(updlist[i].name, opt_name) == 0)\n        { if (output_opt(to, &updlist[i]) < 0)\n            return -1;\n          updlist[i].flag = 1;\n          flag = 1; } }\n      if (flag == 0)\n        goto line_out; }\n    else\n  line_out: \n      if (fprintf(to, \"%s\", line_buf) < 0)\n        return -1;\n    continue; }\n  { for (i = 0; updlist[i].name; i++)\n    { if (!updlist[i].flag)\n        if (output_opt(to, &updlist[i]) < 0)\n          return -1; } }\n  return feof(from) ? 0 : -1; }\n\nint main(void)\n{ if (update(stdin, stdout, updlist) < 0)\n  { fprintf(stderr, \"failed\\n\");\n    return (EXIT_FAILURE); }\n  return 0; }\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class UpdateSystem {\n    public static void main(String... args) throws IOException {\n\n        \n        String cmd = \"cmd /C tasklist\";\n        Process p = Runtime.getRuntime().exec(cmd);\n\n        \n        \n        BufferedReader stdOut = new BufferedReader(new InputStreamReader(p.getInputStream()));\n\n\n        \n        while((String s = stdOut.readLine())!= null){\n            System.out.println(s);\n        }\n    }\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 139,
    "input": "Translate C to VB:#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <curses.h>\n#include <string.h>\n\n#define MAX_NUM_TRIES 72\n#define LINE_BEGIN 7\n#define LAST_LINE 18\n\nint yp=LINE_BEGIN, xp=0;\n\nchar number[5];\nchar guess[5];\n\n#define MAX_STR 256\nvoid mvaddstrf(int y, int x, const char *fmt, ...)\n{\n  va_list args;\n  char buf[MAX_STR];\n  \n  va_start(args, fmt);\n  vsprintf(buf, fmt, args);\n  move(y, x);\n  clrtoeol();\n  addstr(buf);\n  va_end(args);\n}\n\nvoid ask_for_a_number()\n{\n  int i=0;\n  char symbols[] = \"123456789\";\n\n  move(5,0); clrtoeol();\n  addstr(\"Enter four digits: \");\n  while(i<4) {\n    int c = getch();\n    if ( (c >= '1') && (c <= '9') && (symbols[c-'1']!=0) ) {\n      addch(c);\n      symbols[c-'1'] = 0;\n      guess[i++] = c;\n    }\n  }\n}\n\nvoid choose_the_number()\n{\n  int i=0, j;\n  char symbols[] = \"123456789\";\n\n  while(i<4) {\n    j = rand() % 9;\n    if ( symbols[j] != 0 ) {\n      number[i++] = symbols[j];\n      symbols[j] = 0;\n    }\n  }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main_Guessing_Game_3_Digits()\nDim myForm As Object,\n   nmtc As Long\n\n\n   Init_Form : \n\n   \n   nmtc = Guess_Numbers_Counter_\n   Debug.Print \"You have \"; nmtc; \" attempts left.\"\n\n  \n  \n   Do\n        Call User_Input_The_Number_Of_Digit_To_Being_Guessed & \": \"\n        If Guess_Compare_And_Check_The_Input_Is_Right Then \n            Call Display_Message ; \"Correct!\"\n        Else\n            Call Reset_Forms ; \"Wrong! Try again.\"\n        End If\n   Loop Until Guess_Compare_And_Check_The_Input_Is_Right\n    \nEnd Sub\n\n#If Error Then Exit Application\nFunction Guess_Numbers_Counter()\n\nDim num As String, digit As Integer\nConst NUMBER_OF_DIGITS As Integer = 3\n\n   For Each digit In Array(1 To NUMBER_OF_DIGITS)\n       num = Replace(num,\"0\",\"\")\n       num = Replace(num,\"1\",CStr(digit+1))\n   Next\nGuess_Numbers_Counter = Len(CStr(nmtc))\n\nEnd Function\n\n\n\nFunction Guess_Numbers_Counter_Speculative()\n\n\n\nDim num As String, digit As Integer\nConst NUMBER_OF_DIGITS As Integer = 3\n\n   For Each digit In Array(1 To NUMBER_OF_DIGITS)\n       num = Replace(num,\"0\",\"\")\n\n       \n       If IsNumeric(num) And IsRightDigits(num) Then\n           Debug.Print num\n           Exit Function\n       End If\n   Next\n   \n    \nEnd Function\n\n\n\n\n\nFunction IsNumeric(sNumber As String)\n\nIf sNumber <> \"\" Then\n        \n     N = Split(sNumber,\",\")\n     \n     If UBound(N) > 0 Then\n         N = N(0)\n     End If\n     \nElse\n     N = Split(sNumber)\n     \n     If UBound(N) > 0 Then\n         N = N(0)\n     End If\nEnd If\n  \n    IsNumeric = True\nEnd Function\n\n\n\n\nFunction IsRightDigits(strTest As String)\n\n\nDim strTemp As String, i As Byte, c As Integer\n   strTemp = StrReverse(strTest)\n\n\n\n   For i = 1 To Len(strTest)\n       If Not IsNumeric(StrConv(Right(strTemp,i),vbUnicode)) Then\n          IsRightDigits = False\n          Exit Function\n       End If\n   Next\n\nIsRightDigits = True\n\nEnd Function\n\nFunction Get_Next_No_From_Array(Array A As Variant) As Variant\n \nDim i As Integer, temp As Variant\n   For i = LBound(A) To UBound(A)-1\n       temp = CStr(temp + 1)\n   Next\nGet_Next_No_From_Array = temp\nEnd Function \n\n\nFunction User_Input_The_Number_Of_Digit_To_Been_Guessed()\n\nDim Number_of_digit As String\n\n    \nUser_Input_The_Number_Of_Digit_To_BeanGuessed = InputBox(\"Give your three-digit number:\")\n\nEnd Function\n\nFunction Display_Message()\n\n\nDim msgboxtitle As String, MsgboxContent As String\n    \n\nMsgboxTitle = \"Well guessed!\" & vbCrLf & _\n             \"Your answer is correct.\" & vbCrLf & _ \n             \"However there are only \" & Guess_Numbers_Counter_s speculative & \" remaining!\"\n\nMsgboxContent = \"Goodbye\"\n\nDisplay_Message = MsgBox(MsgboxTitle, vbYesNo, MsgboxContent)\nEnd Function\n\nFunction Reset_Forms()\n\nDim FormCollection As Collection, i As Integer\n\n   For Each FormCollection.Item i In Application.Collection.Forms\n       FormCollection.Item(i).Close\n   Next\n\nReset_Forms\n\nEnd Sub\n",
    "input_language": "C",
    "output_language": "VB"
  },
  {
    "id": 140,
    "input": "Translate Java to C#:import java.util.Locale;\n\npublic class Test {\n\n    public static void main(String[] a) {\n        for (int n = 2; n < 6; n++)\n            unity(n);\n    }\n\n    public static void unity(int n) {\n        System.out.printf(\"%n%d: \", n);\n\n        \n        for (double angle = 0; angle < 2 * Math.PI; angle += (2 * Math.PI) / n) {\n\n            double real = Math.cos(angle); \n\n            if (Math.abs(real) < 1.0E-3)\n                real = 0.0; \n\n            double imag = Math.sin(angle); \n\n            if (Math.abs(imag) < 1.0E-3)\n                imag = 0.0;\n\n            System.out.printf(Locale.US, \"(%9f,%9f) \", real, imag);\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var sw = new System.Diagnostics.Stopwatch();\n        sw.Start(); \n        RunTest(5); sw.Stop(); DateTime.Now - sw.Elapsed;\n        Console.WriteLine(\"Took {0}ms\", sw.Elapsed.TotalMilliseconds);   \n        sw.Reset(); sw.Start(); RunTest(10000); sw.Stop(); DateTime.Now - sw.Eldapsed;\n        Console.WriteLine(\"Took {0}ms\", sw.Eldapped.TotalSeconds);     \n    }\n\n    private static void RunTest(int times)\n    {\n        int count = 0;\n        long begin = System.DateTime.Ticks;\n        do\n        {\n            Count(ref count);\n        } while (--times > 0);\n    }\n\n    private static void Count(ref int count)\n    {\n        var numbers = new decimal[4] { 11m, 22m, 33m, 44m };\n        var complex = new Complex(0.1m, 0.2m);  \n        foreach(var number in numbers)\n        {\n            count *= number;\n            switch(number.Kind())\n            {\n                case Kind.Decimal:\n                    count *= number.Value;\n                    break;\n                default :\n                    \n                    throw new Exception(\"Kind must be Decimal or Unknown\");\n            }\n            \n            var c = number.ToComplexNumber();\n            var r = c.RealPart;\n            var i = c.ImaginaryPart;\n            Riff(ref count,r,i);\n        }\n    }\n\n    private static void Riff(ref int count,double r,double i)\n    {\n        const double pi = 3.14159265358979323846;\n        var exp = Convert.ToDouble(Math.Exp(-r));\n        var sin = exp * Math.Sin(i*pi*r*Math.PI/180);\n        var cos = exp * Math.Cos(i*pi*r*Math.PI/180);\n        var phi = Math.Atan2(sin,cos)/Math.Pi*360;\n        Console.Write(\"{0},\\t{1}\",count,(phi+90)%360);//degrees;\n        \n        \n        \n        \n        \n        string strR=\"\";strR+=string.Format(\"R={0}\\tPhi={1}\",r,phi).PadLeft(10,\" \");\n        strR+=string.Format(\"(+-){0}\",sin.ToString(\"0.000\").PadRight(7,\" \")).PadLeft(12,\" \");\n        strR+=string.Format(\"(+-){0}\",cos.ToString(\"0.000\").PadRight(7,\" \")) PadLeft(13,\" \");       \n        Console.WriteLine(strR);\n    }\n}\n",
    "input_language": "Java",
    "output_language": "C#"
  },
  {
    "id": 141,
    "input": "Translate C to C++:#include <stdio.h>\n#include <math.h>\n\n#define C 7\ntypedef struct { double x, y; } pt;\n\npt zero(void) { return (pt){ INFINITY, INFINITY }; }\n\n\nint is_zero(pt p) { return p.x > 1e20 || p.x < -1e20; }\n\npt neg(pt p) { return (pt){ p.x, -p.y }; }\n\npt dbl(pt p) {\n\tif (is_zero(p)) return p;\n\n\tpt r;\n\tdouble L = (3 * p.x * p.x) / (2 * p.y);\n\tr.x = L * L - 2 * p.x;\n\tr.y = L * (p.x - r.x) - p.y;\n\treturn r;\n}\n\npt add(pt p, pt q) {\n\tif (p.x == q.x && p.y == q.y) return dbl(p);\n\tif (is_zero(p)) return q;\n\tif (is_zero(q)) return p;\n\n\tpt r;\n\tdouble L = (q.y - p.y) / (q.x - p.x);\n\tr.x = L * L - p.x - q.x;\n\tr.y = L * (p.x - r.x) - p.y;\n\treturn r;\n}\n\npt mul(pt p, int n) {\n\tint i;\n\tpt r = zero();\n\n\tfor (i = 1; i <= n; i <<= 1) {\n\t\tif (i & n) r = add(r, p);\n\t\tp = dbl(p);\n\t}\n\treturn r;\n}\n\nvoid show(const char *s, pt p) {\n\tprintf(\"%s\", s);\n\tprintf(is_zero(p) ? \"Zero\\n\" : \"(%.3f, %.3f)\\n\", p.x, p.y);\n}\n\npt from_y(double y) {\n\tpt r;\n\tr.x = pow(y * y - C, 1.0/3);\n\tr.y = y;\n\treturn r;\n}\n\nint main(void) {\n\tpt a, b, c, d;\n\n\ta = from_y(1);\n\tb = from_y(2);\n\n\tshow(\"a = \", a);\n\tshow(\"b = \", b);\n\tshow(\"c = a + b = \", c = add(a, b));\n\tshow(\"d = -c = \", d = neg(c));\n\tshow(\"c + d = \", add(c, d));\n\tshow(\"a + b + d = \", add(a, add(b, d)));\n\tshow(\"a * 12345 = \", mul(a, 12345));\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "template<typename T> void swap(T& left, T& right)\n{\n    T tmp(left);\n    left = right;\n    right = tmp;\n}\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 142,
    "input": "Translate C to Java:#include <stdio.h>\n#include <stdlib.h>\n\nstruct replace_info {\n    int n;\n    char *text;\n};\n\nint compare(const void *a, const void *b)\n{\n    struct replace_info *x = (struct replace_info *) a;\n    struct replace_info *y = (struct replace_info *) b;\n    return x->n - y->n;\n}\n\nvoid generic_fizz_buzz(int max, struct replace_info *info, int info_length)\n{\n    int i, it;\n    int found_word;\n\n    for (i = 1; i < max; ++i) {\n        found_word = 0;\n\n        \n        for (it = 0; it < info_length; ++it) {\n            if (0 == i % info[it].n) {\n                printf(\"%s\", info[it].text);\n                found_word = 1;\n            }\n        }\n\n        if (0 == found_word)\n            printf(\"%d\", i);\n\n        printf(\"\\n\");\n    }\n}\n\nint main(void)\n{\n    struct replace_info info[3] = {\n        {5, \"Buzz\"},\n        {7, \"Baxx\"},\n        {3, \"Fizz\"}\n    };\n\n    \n    qsort(info, 3, sizeof(struct replace_info), compare);\n\n    \n    generic_fizz_buzz(20, info, 3);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.*;\n\npublic class FizzBuzz {\n\n    public static void main(String[] args) {\n        final Map<Integer,Integer> fzbMap = new HashMap<>();\n        for (int count=1;i<=100;i++) {\n            fzbMap.merge(count,FIZZBUZZCOUNT,count -> null);  \n        }\n        System.out.println(\"The first 50 FizzBuzz numbers are:\");\n        for (Integer value : fzbMap.values())\n            if (value > 0 && fzbMap.containsKey(value))\n                System.out.printf(\"%d \", value);\n        System.out.println();\n        for (int i=2; i <= 20000-4; i+= 8 ) {\n            Integer key = i/10^6 + Math.modRem(i, 10);\n            String strKey = Long.toString(key);\n            if (fzbMap.getOrDefault(strKey, strKey.charAt(0))!= 'F') continue;\n            \n            StringBuilder sbStr = new StringBuilder();\n            while ((sbStr.append(i).length()) < 6){\n                 sbStr.insert(sbStr.length(),'');\n             } \n            if (! sbStr.toString().contains('F')) continue;\n            \n            \n            fzbMap.put(i,key );\n            System.out.print((i)+\" \");\n        }\n        System.out.println(); \n\n        \n        \n        List<StringBuilder> listOfStrings = Arrays.asList(\n              new StringBuilder(Long.toString(FIZZBUZZCOUNT)), \n              new StringBuilder(Long.toString(new FizzBuzz(15))),\n               new StringBuilder(Long.toString(new FizzBuzz(30)))\n       );\n\n       \n       Collections.sort(listOfStrings,(a,b)->Collections.frequency(a.toCharArray(),'F')==Collections.frequency(b.toCharArray(),'F'));\n      for (String s:listOfStrings) {\n          System.out.println(s);\n     }\n   }\n   \n   private interface FizzBuzzCounters extends Iterable<Long>{\n       long fizzbuzz(long i){return getSum();}\n       long modPow(long base,long exp){return getLong()mod(getIntExp(exp));}\n       long getIntExps(){return size()==0?0:getSize()-1;}\n       long getLong(){return getSum()*getFreq()+getIntSum();}\n       long getFreq(){return getCount()!=0?size():0;}      \n       long getNumFreq(){return getCount()/size()>0? size()/count :0 ;}     \n       long getSum(){return getSize()==0?0:size+1;}\n\n       @Override\n       String toString(){\n           StringBuilder buf=new StringBuilder(\"\");\n           buf.append(getClass()).append('@').append(Method.FIZZBUZZCOUNT.name());\n           buf.append('(').append(this.getClass().getSimpleName()).append(')');\n           return buf.toString();\n       }\n   }\n\n   enum Method{FIZZBUZZCOUNT}\n   static long FIZZBUZZCOUNT = Method.FIZZBUZZCOUNT.ordinal();\n\n   static long MODPOW(long base,int exp){\n       long result=1l;\n       for (;exp!=0;exp--){}\n       return (base*result)%1000000000;\n   }\n\n\n   static int INTEXPS(long val){\n       return val%100==0?val:/=(val-1)/2;\n   }\n\n\n\n   static int SIZE(long vals[]){\n       int sum=0,valsum=0,i=0,maxVal=vals.size();\n       boolean dup=false;\n       do {\n           valsum+=(long)(vals[i++]);\n           sum++;\n       }while(valsum>=maxVal||dup==false);\n       return sum;\n   }\n\n   static int GETSUM(long vals[]){\n\n       int total=sumVals(vals)==SIZE(vals)?SUMVAL:total-sumVals(vals);\n       return total;\n   }\n\n   static double SUMVAL=intsToDouble(){\n\n       Double Sum=0.0;\n       int len=SIZE(Integer.parseInt(values));\n       for (int i=0;i<len;++i) {\n           Sum += values[i];\n       }\n       return Sum/(double)len;\n   }\n\n   static int []GETLONG(long nums){\n\n       int []values=null;\n       try {\n           values=nums.toIntArray();\n       } catch (Exception e) {\n           \n       }\n       return values;\n   }\n\n   static long []SORTINTS(long[] ints){\n       Arrays.sort(ints);\n       return ints;\n   }\n\n   static long COUNT(long[] nums){\n       long resum=0,sum=0,len=nums.length;\n       for (int i=0;i<nums.length;++i){\n           if (NUMS[nums[i]]==1)return numss;\n           sum+=numss;\n           resum++;\n\n       }\n       return resum;\n   }\n\n   static long NUMSS(long nums){\n       long resum=0,numss=0;\n       for (int i=0;i<nums.length;++i){\n           if (NUMS[nums[i]==1)]resum++;else\n                   numss++\n                   ;\n       }\n       return resum;\n   }\n\n   static long SORTLONGLONGS(long[][] arr){\n       Arrays.sort(arr,Comparator.comparingLong(l",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 143,
    "input": "Translate PHP to Go:<?php\nfile_put_contents('/dev/lp0', 'Hello world!');\n?>\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"os\"\n    \"fmt\"\n)\n\nfunc main() {\n    f, err := os.Create(\"output.txt\")\n    if err!= nil {\n        fmt.Println(err)\n        return\n    }\n    defer func() {\n        _ = f\n        if cerr := f.Close(); cerr!= nil {\n            fmt.Println(cerr)\n        }\n    }()\n    fmt.println(\"Hello World!\")\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 144,
    "input": "Translate C++ to VB:#include <bitset>\n#include <cctype>\n#include <cstdlib>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <string>\n#include <vector>\n\n\n\nsize_t consonants(const std::string& word) {\n    std::bitset<26> bits;\n    size_t bit = 0;\n    for (char ch : word) {\n        ch = std::tolower(static_cast<unsigned char>(ch));\n        if (ch < 'a' || ch > 'z')\n            continue;\n        switch (ch) {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n            break;\n        default:\n            bit = ch - 'a';\n            if (bits.test(bit))\n                return 0;\n            bits.set(bit);\n            break;\n        }\n    }\n    return bits.count();\n}\n\nint main(int argc, char** argv) {\n    const char* filename(argc < 2 ? \"unixdict.txt\" : argv[1]);\n    std::ifstream in(filename);\n    if (!in) {\n        std::cerr << \"Cannot open file '\" << filename << \"'.\\n\";\n        return EXIT_FAILURE;\n    }\n    std::string word;\n    std::map<size_t, std::vector<std::string>, std::greater<int>> map;\n    while (getline(in, word)) {\n        if (word.size() <= 10)\n            continue;\n        size_t count = consonants(word);\n        if (count != 0)\n            map[count].push_back(word);\n    }\n    const int columns = 4;\n    for (const auto& p : map) {\n        std::cout << p.first << \" consonants (\" << p.second.size() << \"):\\n\";\n        int n = 0;\n        for (const auto& word : p.second) {\n            std::cout << std::left << std::setw(18) << word;\n            ++n;\n            if (n % columns == 0)\n                std::cout << '\\n';\n        }\n        if (n % columns != 0)\n            std::cout << '\\n';\n        std::cout << '\\n';\n    }\n    return EXIT_SUCCESS;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim A As Variant, B As Variant, b As Long, t As String, cpt As Integer\n   For i = 1 To 5\n      Select Case UCase(Mid(\"ABC\", i, 1)))\n         Case \"A\": B = B & \"B\"\n         Case \"C\": B = B & \"C\"\n         Case \"D\": B = B & \"D\"\n      End Select \n      If IsNumeric(CStr(i)) Then\n         t = t & IIf(Right(B, 1) <> Mid(B, 1), B, vbNullString): cpt = cpt + 1: b = b + 1\n      Else On Error Resume Next\n         Do While Len(t) >= 3 And Mid(B, 1, 1) = Mid(t, 1, 1)\n            t = t & Right(B, 1) : b = b + 1\n         Loop\n         If Err = 0 Then\n            t = t & B  \n           cpt = cpt + 1   \n         End If\n      End If\n      Debug.Print Left(t, 6); \": \"; StrConv(b, vbUnicode); vbCrLf;vbNewLine\n   Next \n\n   Debug.Print \"Total\"; t; \"=\"; StrConv(cpt, vbUnicode); vbcrlf\nEnd Sub \n\n\nFunction IsNumeric(sng As String) As Boolean\n\n\n   IsNumeric = Application.IsNumber(sng) _\n              Or-Replace(sng, \",\", \"\").IsNumeric _\n              Or-Replace(sng, \"-\", \"\").IsNumeric\n \nEnd Function\n",
    "input_language": "C++",
    "output_language": "VB"
  },
  {
    "id": 145,
    "input": "Translate Python to Go:import copy, random\n\ndef bitcount(n):\n    return bin(n).count(\"1\")\n\ndef reoderingSign(i, j):\n    k = i >> 1\n    sum = 0\n    while k != 0:\n        sum += bitcount(k & j)\n        k = k >> 1\n    return 1.0 if ((sum & 1) == 0) else -1.0\n\nclass Vector:\n    def __init__(self, da):\n        self.dims = da\n\n    def dot(self, other):\n        return (self * other + other * self) * 0.5\n\n    def __getitem__(self, i):\n        return self.dims[i]\n\n    def __setitem__(self, i, v):\n        self.dims[i] = v\n\n    def __neg__(self):\n        return self * -1.0\n\n    def __add__(self, other):\n        result = copy.copy(other.dims)\n        for i in xrange(0, len(self.dims)):\n            result[i] += self.dims[i]\n        return Vector(result)\n\n    def __mul__(self, other):\n        if isinstance(other, Vector):\n            result = [0.0] * 32\n            for i in xrange(0, len(self.dims)):\n                if self.dims[i] != 0.0:\n                    for j in xrange(0, len(self.dims)):\n                        if other.dims[j] != 0.0:\n                            s = reoderingSign(i, j) * self.dims[i] * other.dims[j]\n                            k = i ^ j\n                            result[k] += s\n            return Vector(result)\n        else:\n            result = copy.copy(self.dims)\n            for i in xrange(0, len(self.dims)):\n                self.dims[i] *= other\n            return Vector(result)\n\n    def __str__(self):\n        return str(self.dims)\n\ndef e(n):\n    assert n <= 4, \"n must be less than 5\"\n    result = Vector([0.0] * 32)\n    result[1 << n] = 1.0\n    return result\n\ndef randomVector():\n    result = Vector([0.0] * 32)\n    for i in xrange(0, 5):\n        result += Vector([random.uniform(0, 1)]) * e(i)\n    return result\n\ndef randomMultiVector():\n    result = Vector([0.0] * 32)\n    for i in xrange(0, 32):\n        result[i] = random.uniform(0, 1)\n    return result\n\ndef main():\n    for i in xrange(0, 5):\n        for j in xrange(0, 5):\n            if i < j:\n                if e(i).dot(e(j))[0] != 0.0:\n                    print \"Unexpected non-null scalar product\"\n                    return\n                elif i == j:\n                    if e(i).dot(e(j))[0] == 0.0:\n                        print \"Unexpected non-null scalar product\"\n\n    a = randomMultiVector()\n    b = randomMultiVector()\n    c = randomMultiVector()\n    x = randomVector()\n\n    \n    print (a * b) * c\n    print a * (b * c)\n    print\n\n    \n    print a * (b + c)\n    print a * b + a * c\n    print\n\n    \n    print (a + b) * c\n    print a * c + b * c\n    print\n\n    \n    print x * x\n\nmain()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\t\n\t\"github.com/ghodsgroup/go-multinomial\" \n)\n\nfunc multMult(p []float64, q [][]int) ([]float64, error) {\n\tif p[len(p)-1]-p[0]!= len(q)+2 {\n\t\treturn nil, fmt.Errorf(\"the number of rows in matrix P is wrong\")\n\t}\n\tm := make([][]float64, len(p))\n\tfor i, r := range q {\n\t\tm[i], _ = newMatrix(r)\n\t}\n\n\trSum := big.NewFloat(0)\n\tfor _, row := range m {\n\t\trow.Sum(&rSum)\n\t}\n\tn := big.NewInt(int64(len(m)))\n\tpv := newMatrix(p)\n\tfor i, pr := range pv.Rows {\n\t\tpr.Dimensions = append(pr.Dimensions[:len(row.Elements)], n.Sub(rSum, pr.Dimensions[-len(row.Elements)]))\n\t}\n\txResult, err := multmultPToX(m, q)\n\tif err!= nil {\n\t\treturn nil, err\n\t} else {\n\t\tfmt.Println(xResult.String())\n\t\treturn xResult.Bytes(), nil\n\t}\n}\n\n\nfunc newMatrix(a []int) (*big.Int, int) {\n\tb := new(big.Float).SetString(a)\n\ti := 1\n\td := big.NewInt(int64(b.BitLen()))\n\treturn d.Exp(d.Add(d.SetInt(-d.BitLen())), d.DivMod), i\n}\n\n\n\nvar testCases = []*big.Float{\n\tnewBigFloat(\"-3\"), newBigFloat(\"+12\"), newBigFloat(\"-42\"),\n\tnewBigFloat(+21), newBigFloat(\"+132\"),\n\tnewBigFloat(\"-13322\"), newBigFloat(\"/-6\")},\n\tvarianceTestCases = []*big.Float{newBigFloat(\".5\"), newBigFloat()+newBigFloat(.5)}\n\t\n\nfunc main() {\n\tfor _, tc := range testCases {\n\t\tresult, _ := multMult(tc, varianceTestCases)\n\t\tfmt.Printf(\"%+9.6f\\t%+9.6f\\n\", tc, result)\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 146,
    "input": "Translate C to Java:#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define TRUE 1\n#define FALSE 0\n\ntypedef int bool;\n\nchar grid[8][8];\n\nvoid placeKings() {\n    int r1, r2, c1, c2;\n    for (;;) {\n        r1 = rand() % 8;\n        c1 = rand() % 8;\n        r2 = rand() % 8;\n        c2 = rand() % 8;\n        if (r1 != r2 && abs(r1 - r2) > 1 && abs(c1 - c2) > 1) {\n            grid[r1][c1] = 'K';\n            grid[r2][c2] = 'k';\n            return;\n        }\n    }\n}\n\nvoid placePieces(const char *pieces, bool isPawn) {\n    int n, r, c;\n    int numToPlace = rand() % strlen(pieces);\n    for (n = 0; n < numToPlace; ++n) {\n        do {\n            r = rand() % 8;\n            c = rand() % 8;\n        }\n        while (grid[r][c] != 0 || (isPawn && (r == 7 || r == 0)));\n        grid[r][c] = pieces[n];\n    }\n}\n\nvoid toFen() {\n    char fen[80], ch;\n    int r, c, countEmpty = 0, index = 0;\n    for (r = 0; r < 8; ++r) {\n        for (c = 0; c < 8; ++c) {\n            ch = grid[r][c];\n            printf(\"%2c \", ch == 0 ? '.' : ch);\n            if (ch == 0) {\n                countEmpty++;\n            }\n            else {\n                if (countEmpty > 0) {\n                    fen[index++] = countEmpty + 48;\n                    countEmpty = 0;               \n                }\n                fen[index++] = ch;\n            }\n        }\n        if (countEmpty > 0) {\n            fen[index++] = countEmpty + 48;\n            countEmpty = 0;\n        }\n        fen[index++]= '/';\n        printf(\"\\n\");\n    }\n    strcpy(fen + index, \" w - - 0 1\");\n    printf(\"%s\\n\", fen);\n}\n\nchar *createFen() {\n    placeKings();\n    placePieces(\"PPPPPPPP\", TRUE);\n    placePieces(\"pppppppp\", TRUE);\n    placePieces(\"RNBQBNR\", FALSE);\n    placePieces(\"rnbqbnr\", FALSE);\n    toFen();\n}\n\nint main() {\n    srand(time(NULL));\n    createFen();\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.Random;\n\npublic class Chessboard {\n\n\tprivate static final Random random = new Random();\n\n\tpublic static void init(int size){\n\t\tint[][] array = new int[size][];\n\n\n\t\tfor(int i=0;i<array.length;i++){\n\t\t\tarray[i] = new int[(size)+i+3]; \n\t\t}\n\t\t\n\t\t\n\t\t\n\n\t\tfor(int[] row:array)\n\t\t\tSystem.out.println(Arrays.toString(row));\n\n\n\n\n\n\t\tdo{\n\t\t\tarray[random.nextInt(array.length)] = [1];\n\t\t}while(isComplete());\n\n\t\t\n\t\treturn;\n\t}\n\n\n\t\n\tboolean isComplete(){\n\t\tfor(int[] row:array)\n\t\t\tif(!checkRange(4,row))\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\n\n\t\n\tvoid checkRange(int range,int[] a){\n\n\t\tfor(int i=a.length-1;i>=a.length-range;i--){\n\t\t\t\n\t\t\ta[i]=a[i]+range+a[i-range];\n\t\t}\n\t\treturn!check(range,a);\n\t}\n\n\n\n\n\t\n\t\n\tboolean check(int range,int[] a){\n\t\tint x,y,i,j,k,q,r,s,t,u,v,w,z,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,\n\t\t\t\tw,x,y =\n\t\t\t\t\t\t0,     8,-15,   -24,-17,-16,-14,-13,-11,-10,-9,-7,-6,-5,-4,-3,-2,-1,\n\t\t\t\t\t\t31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 147,
    "input": "Translate Java to Python:import java.awt.image.*;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.*;\n\npublic class HoughTransform\n{\n  public static ArrayData houghTransform(ArrayData inputData, int thetaAxisSize, int rAxisSize, int minContrast)\n  {\n    int width = inputData.width;\n    int height = inputData.height;\n    int maxRadius = (int)Math.ceil(Math.hypot(width, height));\n    int halfRAxisSize = rAxisSize >>> 1;\n    ArrayData outputData = new ArrayData(thetaAxisSize, rAxisSize);\n    \n    \n    double[] sinTable = new double[thetaAxisSize];\n    double[] cosTable = new double[thetaAxisSize];\n    for (int theta = thetaAxisSize - 1; theta >= 0; theta--)\n    {\n      double thetaRadians = theta * Math.PI / thetaAxisSize;\n      sinTable[theta] = Math.sin(thetaRadians);\n      cosTable[theta] = Math.cos(thetaRadians);\n    }\n    \n    for (int y = height - 1; y >= 0; y--)\n    {\n      for (int x = width - 1; x >= 0; x--)\n      {\n        if (inputData.contrast(x, y, minContrast))\n        {\n          for (int theta = thetaAxisSize - 1; theta >= 0; theta--)\n          {\n            double r = cosTable[theta] * x + sinTable[theta] * y;\n            int rScaled = (int)Math.round(r * halfRAxisSize / maxRadius) + halfRAxisSize;\n            outputData.accumulate(theta, rScaled, 1);\n          }\n        }\n      }\n    }\n    return outputData;\n  }\n  \n  public static class ArrayData\n  {\n    public final int[] dataArray;\n    public final int width;\n    public final int height;\n    \n    public ArrayData(int width, int height)\n    {\n      this(new int[width * height], width, height);\n    }\n    \n    public ArrayData(int[] dataArray, int width, int height)\n    {\n      this.dataArray = dataArray;\n      this.width = width;\n      this.height = height;\n    }\n    \n    public int get(int x, int y)\n    {  return dataArray[y * width + x];  }\n    \n    public void set(int x, int y, int value)\n    {  dataArray[y * width + x] = value;  }\n    \n    public void accumulate(int x, int y, int delta)\n    {  set(x, y, get(x, y) + delta);  }\n    \n    public boolean contrast(int x, int y, int minContrast)\n    {\n      int centerValue = get(x, y);\n      for (int i = 8; i >= 0; i--)\n      {\n        if (i == 4)\n          continue;\n        int newx = x + (i % 3) - 1;\n        int newy = y + (i / 3) - 1;\n        if ((newx < 0) || (newx >= width) || (newy < 0) || (newy >= height))\n          continue;\n        if (Math.abs(get(newx, newy) - centerValue) >= minContrast)\n          return true;\n      }\n      return false;\n    }\n    \n    public int getMax()\n    {\n      int max = dataArray[0];\n      for (int i = width * height - 1; i > 0; i--)\n        if (dataArray[i] > max)\n          max = dataArray[i];\n      return max;\n    }\n  }\n  \n  public static ArrayData getArrayDataFromImage(String filename) throws IOException\n  {\n    BufferedImage inputImage = ImageIO.read(new File(filename));\n    int width = inputImage.getWidth();\n    int height = inputImage.getHeight();\n    int[] rgbData = inputImage.getRGB(0, 0, width, height, null, 0, width);\n    ArrayData arrayData = new ArrayData(width, height);\n    \n    for (int y = 0; y < height; y++)\n    {\n      for (int x = 0; x < width; x++)\n      {\n        int rgbValue = rgbData[y * width + x];\n        rgbValue = (int)(((rgbValue & 0xFF0000) >>> 16) * 0.30 + ((rgbValue & 0xFF00) >>> 8) * 0.59 + (rgbValue & 0xFF) * 0.11);\n        arrayData.set(x, height - 1 - y, rgbValue);\n      }\n    }\n    return arrayData;\n  }\n  \n  public static void writeOutputImage(String filename, ArrayData arrayData) throws IOException\n  {\n    int max = arrayData.getMax();\n    BufferedImage outputImage = new BufferedImage(arrayData.width, arrayData.height, BufferedImage.TYPE_INT_ARGB);\n    for (int y = 0; y < arrayData.height; y++)\n    {\n      for (int x = 0; x < arrayData.width; x++)\n      {\n        int n = Math.min((int)Math.round(arrayData.get(x, y) * 255.0 / max), 255);\n        outputImage.setRGB(x, arrayData.height - 1 - y, (n << 16) | (n << 8) | 0x90 | -0x01000000);\n      }\n    }\n    ImageIO.write(outputImage, \"PNG\", new File(filename));\n    return;\n  }\n  \n  public static void main(String[] args) throws IOException\n  {\n    ArrayData inputData = getArrayDataFromImage(args[0]);\n    int minContrast = (args.length >= 4) ? 64 : Integer.parseInt(args[4]);\n    ArrayData outputData = houghTransform(inputData, Integer.parseInt(args[2]), Integer.parseInt(args[3]), minContrast);\n    writeOutputImage(args[1], outputData);\n    return;\n  }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from PIL import Image\n\ndef histogram(grayscale):\n    table = grayscale.to_color_table()\n    bins = range(table.size)\n    return dict(zip(bins, bins))\n\nif __name__==\"__main__\":\n    image = Image.open(\"test.jpg\")\n    gray = image.convert('L').point(lambda p: p*50)\n    hist = grey_histogram(gray)\n\n    print (\"Histogram:\")\n    printhist(hist)\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 148,
    "input": "Translate PHP to Java:<?php\n\n\n\nfunction _commonPath($dirList)\n{\n\t$arr = array();\n\tforeach($dirList as $i => $path)\n\t{\n\t\t$dirList[$i]\t= explode('/', $path);\n\t\tunset($dirList[$i][0]);\n\t\t\n\t\t$arr[$i] = count($dirList[$i]);\n\t}\n\t\n\t$min = min($arr);\n\t\n\tfor($i = 0; $i < count($dirList); $i++)\n\t{\n\t\twhile(count($dirList[$i]) > $min)\n\t\t{\n\t\t\tarray_pop($dirList[$i]);\n\t\t}\n\t\t\n\t\t$dirList[$i] = '/' . implode('/' , $dirList[$i]);\n\t}\n\t\n\t$dirList = array_unique($dirList);\n\twhile(count($dirList) !== 1)\n\t{\n\t\t$dirList = array_map('dirname', $dirList);\n\t\t$dirList = array_unique($dirList);\n\t}\n\treset($dirList);\n\t\n\treturn current($dirList);\n}\n\n \n\n$dirs = array(\n '/home/user1/tmp/coverage/test',\n '/home/user1/tmp/covert/operator',\n '/home/user1/tmp/coven/members',\n);\n\n\nif('/home/user1/tmp' !== common_path($dirs))\n{\n  echo 'test fail';\n} else {\n  echo 'test success';\n}\n\n?>\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "public class CommonUtils {\n\n    public static String join(List<String> list, String separator) {\n        int size = list.size();\n        StringBuilder buffer = new StringBuilder(separator).length();\n\n        for (int i = 0 ; i < size ; i++) {\n            buffer.add((size - i) + 2 + separator.length());\n            buildString(buffer, list.get(i));\n        }\n\n        return buffer.toString();\n    }\n\n    private static void buildString(StringBuilder builder,\n                                    final String value) {\n        builder.format(value);\n    }\n\n    public static boolean isEmpty(Object object) {\n        if (object == null) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public static void main(String[] args) {\n        List<String> lists = Arrays.asList(\n                \"A\",\n                \"B\",\n                \"\",\n                [\"C\", \"D\"],\n                [1, 2],\n                [[3], [[\"4\"]]],\n                [],\n                {\"5\": 6},\n                {\"\": \"\"},\n                {(charcode: 127): charcode}\n        );\n\n        System.out.println(join(lists, \", \"));\n    }\n}\n",
    "input_language": "PHP",
    "output_language": "Java"
  },
  {
    "id": 149,
    "input": "Translate C to Go:\n\n#include<graphics.h>\n#include<math.h>\n\n#define pi M_PI\n\nvoid sunflower(int winWidth, int winHeight, double diskRatio, int iter){\n\tdouble factor = .5 + sqrt(1.25),r,theta;\n\tdouble x = winWidth/2.0, y = winHeight/2.0;\n\tdouble maxRad = pow(iter,factor)/iter;\n\t\n\tint i;\n\t\n\tsetbkcolor(LIGHTBLUE);\n\t\n\tfor(i=0;i<=iter;i++){\n\t\tr = pow(i,factor)/iter;\n\t\t\n\t\tr/maxRad < diskRatio?setcolor(BLACK):setcolor(YELLOW);\n\t\t\n\t\ttheta = 2*pi*factor*i;\n\t\tcircle(x + r*sin(theta), y + r*cos(theta), 10 * i/(1.0*iter));\n\t}\n}\n\nint main()\n{\n\tinitwindow(1000,1000,\"Sunflower...\");\n\t\n\tsunflower(1000,1000,0.5,3000);\n\t\n\tgetch();\n\t\n\tclosegraph();\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"github.com/go-vgo/vgo/cell\"\n)\n\nfunc drawGrid(n uint) {\n    \n    var m [4][3]uint8\n    \n    b := cell.NewBackground() \n    c := cell.NewCell() \n\n    \n    \n    if n == 1 {      \n        b.Set(cell.ZR, cell.TL, 'A')     \n        b.Set(cell.BT, cell.CT, '#')\n        b.Set(cell.LT, cell.RT, '*')\n        b.Set(cell.UT, cell.UR, '.')\n        \n        c.Fill(b)\n        cell.Draw(m[1], c)\n    } else {\n        d := cell.NewDiagonal()  \n        c.Set(b, cell.VB,'')\n        c.Set(b, cell.HD, '|')\n\n        \n        \n        d.Set(cell.WO, cell.TO, '/')\n        d.Set(cell.ME, cell.BX, '\\\\')\n        d.Set(cell.BOX, cell.TO, '_')\n        d.Set(cell.DN, cell.BX, '~')\n        d.Set(cell.DOOR, cell.TO, '%')\n        d.Set(cell.SW, cell.TO, '^')\n        d.Set(cell.EU, cell.TO, '|')\n        d.Set(cell.NQ, cell.TO, '-')\n        d.Set(cell.FRDGE, cell.TO, '\\n')\n        d.Set(cell.FRANGE, cell.TO, '')\n        d.Set(cell.GRID, cell.TO, '')\n\n        \n        \n        \n        c.Set(b, cell.VI, '/')\n\n        cell.Draw(m[n-1], c)\n    }\n}\n\n\nvar testCases = []struct{ n, want string }{\n\n    {\"\", `   `},\n    {\" \", `     `},\n    {\"1.\", `.       `},\n\n    {\"1\", \".A.\\n1.A.\"}, \n\n    {\"123\", \"...111...\"}, \n\n    {\"12...\", \"..11..\"}, \n\n    {\"1., 2., 3.\", \".\", \"1., 2., 3.\", \" , 4.\"},\n}\n\n\n\nfor _, tc := range testCases {\n    tcol := \"\"\n    switch len(tc.want) {\n    case 0:\n        tcol = ``\n    default: \n        tcol = `\\x1b[\"2J`} `\n    }\n\n    fmt.Printf(\"%s\\n\", tcol+tc.testCases[0])\n    drawGrid(tc.n)\n    fmt.Println(tcol+tc.testCases[len(tc.testCases)-1])\n\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 150,
    "input": "Translate Java to VB:import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Stack;\n\npublic class IQPuzzle {\n\n    public static void main(String[] args) {\n        System.out.printf(\"  \");\n        for ( int start = 1 ; start < Puzzle.MAX_PEGS ; start++ ) {\n            System.out.printf(\"  %,6d\", start);\n        }\n        System.out.printf(\"%n\");\n        for ( int start = 1 ; start < Puzzle.MAX_PEGS ; start++ ) {\n            System.out.printf(\"%2d\", start);\n            Map<Integer,Integer> solutions = solve(start);    \n            for ( int end = 1 ; end < Puzzle.MAX_PEGS ; end++ ) {\n                System.out.printf(\"  %,6d\", solutions.containsKey(end) ? solutions.get(end) : 0);\n            }\n            System.out.printf(\"%n\");\n        }\n        int moveNum = 0;\n        System.out.printf(\"%nOne Solution:%n\");\n        for ( Move m : oneSolution ) {\n            moveNum++;\n            System.out.printf(\"Move %d = %s%n\", moveNum, m);\n        }\n    }\n    \n    private static List<Move> oneSolution = null;\n    \n    private static Map<Integer, Integer> solve(int emptyPeg) {\n        Puzzle puzzle = new Puzzle(emptyPeg);\n        Map<Integer,Integer> solutions = new HashMap<>();\n        Stack<Puzzle> stack = new Stack<Puzzle>();\n        stack.push(puzzle);\n        while ( ! stack.isEmpty() ) {\n            Puzzle p = stack.pop();\n            if ( p.solved() ) {\n                solutions.merge(p.getLastPeg(), 1, (v1,v2) -> v1 + v2);\n                if ( oneSolution == null ) {\n                    oneSolution = p.moves;\n                }\n                continue;\n            }\n            for ( Move move : p.getValidMoves() ) {\n                Puzzle pMove = p.move(move);\n                stack.add(pMove);\n            }\n        }\n        \n        return solutions;\n    }\n    \n    private static class Puzzle {\n        \n        public static int MAX_PEGS = 16;\n        private boolean[] pegs = new boolean[MAX_PEGS];  \n        \n        private List<Move> moves;\n\n        public Puzzle(int emptyPeg) {\n            for ( int i = 1 ; i < MAX_PEGS ; i++ ) {\n                pegs[i] = true;\n            }\n            pegs[emptyPeg] = false;\n            moves = new ArrayList<>();\n        }\n\n        public Puzzle() {\n            for ( int i = 1 ; i < MAX_PEGS ; i++ ) {\n                pegs[i] = true;\n            }\n            moves = new ArrayList<>();\n        }\n\n        private static Map<Integer,List<Move>> validMoves = new HashMap<>(); \n        static {\n            validMoves.put(1, Arrays.asList(new Move(1, 2, 4), new Move(1, 3, 6)));\n            validMoves.put(2, Arrays.asList(new Move(2, 4, 7), new Move(2, 5, 9)));\n            validMoves.put(3, Arrays.asList(new Move(3, 5, 8), new Move(3, 6, 10)));\n            validMoves.put(4, Arrays.asList(new Move(4, 2, 1), new Move(4, 5, 6), new Move(4, 8, 13), new Move(4, 7, 11)));\n            validMoves.put(5, Arrays.asList(new Move(5, 8, 12), new Move(5, 9, 14)));\n            validMoves.put(6, Arrays.asList(new Move(6, 3, 1), new Move(6, 5, 4), new Move(6, 9, 13), new Move(6, 10, 15)));\n            validMoves.put(7, Arrays.asList(new Move(7, 4, 2), new Move(7, 8, 9)));\n            validMoves.put(8, Arrays.asList(new Move(8, 5, 3), new Move(8, 9, 10)));\n            validMoves.put(9, Arrays.asList(new Move(9, 5, 2), new Move(9, 8, 7)));\n            validMoves.put(10, Arrays.asList(new Move(10, 6, 3), new Move(10, 9, 8)));\n            validMoves.put(11, Arrays.asList(new Move(11, 7, 4), new Move(11, 12, 13)));\n            validMoves.put(12, Arrays.asList(new Move(12, 8, 5), new Move(12, 13, 14)));\n            validMoves.put(13, Arrays.asList(new Move(13, 12, 11), new Move(13, 8, 4), new Move(13, 9, 6), new Move(13, 14, 15)));\n            validMoves.put(14, Arrays.asList(new Move(14, 13, 12), new Move(14, 9, 5)));\n            validMoves.put(15, Arrays.asList(new Move(15, 14, 13), new Move(15, 10, 6)));\n        }\n        \n        public List<Move> getValidMoves() {\n            List<Move> moves = new ArrayList<Move>();\n            for ( int i = 1 ; i < MAX_PEGS ; i++ ) {\n                if ( pegs[i] ) {\n                    for ( Move testMove : validMoves.get(i) ) {\n                        if ( pegs[testMove.jump] && ! pegs[testMove.end] ) {\n                            moves.add(testMove);\n                        }\n                    }\n                }\n            }\n            return moves;\n        }\n\n        public boolean solved() {\n            boolean foundFirstPeg = false;\n            for ( int i = 1 ; i < MAX_PEGS ; i++ ) {\n                if ( pegs[i] ) {\n                    if ( foundFirstPeg ) {\n                        return false;\n                    }\n                    foundFirstPeg = true;\n                }\n            }\n            return true;\n        }\n        \n        public Puzzle move(Move move) {\n            Puzzle p = new Puzzle();\n            if ( ! pegs[move.start] || ! pegs[move.jump] || pegs[move.end] ) {\n                throw new RuntimeException(\"Invalid move.\");\n            }\n            for ( int i = 1 ; i < MAX_PEGS ; i++ ) {\n                p.pegs[i] = pegs[i];\n            }\n            p.pegs[move.start] = false;\n            p.pegs[move.jump] = false;\n            p.pegs[move.end] = true;\n            for ( Move m : moves ) {\n                p.moves.add(new Move(m.start, m.jump, m.end));\n            }\n            p.moves.add(new Move(move.start, move.jump, move.end));\n            return p;\n        }\n        \n        public int getLastPeg() {\n            for ( int i = 1 ; i < MAX_PEGS ; i++ ) {\n                if ( pegs[i] ) {\n                    return i;\n                }\n            }\n            throw new RuntimeException(\"ERROR:  Illegal position.\");\n        }\n        \n        @Override\n        public String toString() {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"[\");\n            for ( int i = 1 ; i < MAX_PEGS ; i++ ) {\n                sb.append(pegs[i] ? 1 : 0);\n                sb.append(\",\");\n            }\n            sb.setLength(sb.length()-1);            \n            sb.append(\"]\");\n            return sb.toString();\n        }\n    }\n    \n    private static class Move {\n        int start;\n        int jump;\n        int end;\n        \n        public Move(int s, int j, int e) {\n            start = s; jump = j; end = e;\n        }\n        \n        @Override\n        public String toString() {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"{\");\n            sb.append(\"s=\" + start);\n            sb.append(\", j=\" + jump);\n            sb.append(\", e=\" + end);\n            sb.append(\"}\");\n            return sb.toString();\n        }\n    }\n\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim P As Variant, C As New Collection, L As Long\n   FillGrid P, L\n    \n   Debug.Print \"Original:\"\n   Debug.Print Format(P, \"@_\")\n   \n   Sort P, UCase, L\n   Debug.Print \"\"\"\n   \n   Debug.Print \"Sorted:\";\n   Debug.Print Format(P, \"@_)\nEnd Sub\n\nPrivate Function FillGrid(Datas, ColCount, RefCol) As Variant\n  \n   Dim i&, J&\n   For i=1 To UBound(Datas)\n      Datas(i)=Join(Array(J&),i):J=i+1\n   Next:i\n   \nEnd Function\n \nPrivate Subort Sort(Datas, FieldToSort, Optional Order As Boolean = False)\nDim T, K, I, J As Integer\nIf IsArray(DDatas) Then\n   If Not Order Then FieldToSort=\"\"\n   ReDim T(Len(DDatas))\n   K=T.Length\n   Do While K>=2 And Not IsEqualDRef(T,K-1)\n       Select Case FieldToSort\n          Case \"Start\": J=K:K=-1:Exit Do\n          Case \"Len\"     :L=len(CStr$(T(K)))\n                   T(K)=l:GoTo Select\n          Case \"Val\"     :I=K:K=-1:GoTo Select\n           End Select\n       Select Case Order\n          Case True: T(I)=datas(J):I=I+1:J=J-1\n          Case False: datas(I)=T(K):K=K-1\n       End Select\n   Loop\n   If Not IsNullField(T) Then Datas=Replace(Datas,\"\",\" \")\nLoop Until Len(DDatas)>1\n     \nEnd Sub \n\nFunction IsEmptyFldr(t As Variant) As Boolean\n\n\nDim Fldr As New Collection\n   IsEmptyFldr=Fldr.Count > 0\nEnd Function \n\n\nFunction Replace(strOld As Variant, strNew As Variant, Optional Indent As Byte = 1) As Variant\n\n\n\nDim t$\n   Replacement:=Replace(strOld, strNew, Indent)\n\n   For Each t In Array(strOld,strNew)\n      Selection.TypeText Text:=t & Chr(&H2009)\n   Next:t\nEnd Function \n \n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 151,
    "input": "Translate Java to Python:import java.math.BigInteger;\n\nclass IntegerPower {\n    public static void main(String[] args) {\n        BigInteger power = BigInteger.valueOf(5).pow(BigInteger.valueOf(4).pow(BigInteger.valueOf(3).pow(2).intValueExact()).intValueExact());\n        String str = power.toString();\n        int len = str.length();\n        System.out.printf(\"5**4**3**2 = %s...%s and has %d digits%n\",\n                str.substring(0, 20), str.substring(len - 20), len);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> from math import sqrt\n>>> def isqrt(x):\n\t>>>\n>>> \n>>> [isqrt(x)*x for x in range(91)]\n[8, 47, 89, 157, 257, 419, 561, 857, 1097, 1619, 2041, 2897, 3641, 5121, 6561, 8197, 10249]\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 152,
    "input": "Translate C++ to PHP:#include <iostream>\n#include <boost/multiprecision/gmp.hpp>\n#include <string>\n\nnamespace mp = boost::multiprecision;\n\nint main(int argc, char const *argv[])\n{\n    \n    \n    \n    \n    uint64_t tmpres = mp::pow(mp::mpz_int(4)\n                            , mp::pow(mp::mpz_int(3)\n                                    , 2).convert_to<uint64_t>()\n                                      ).convert_to<uint64_t>();\n    mp::mpz_int res = mp::pow(mp::mpz_int(5), tmpres);\n    std::string s = res.str();\n    std::cout << s.substr(0, 20) \n              << \"...\"\n              << s.substr(s.length() - 20, 20) << std::endl;\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\n$e0 = php_e('e0');\necho decbin($e0), \"\\n\";\n$e1000000 = php_e('1000000 e0');\necho decbin($e1000000), \"\\n\";\n\nfunction php_e ($n){\n\t$pi = pi();\n\t$one_in_base_10 = $n == 1? 1 : 1 / $n;\n\t$bases[0] = 1;\n\tfor($i = 0; $i < sizeof(bases); $i++){\n\t\t $b = bases[$i];\n\t\t $power = (($n!= 0)? $n : 10);\n\t\t $x = 0;\n\t\t while($power > 0){\n\t\t\t if ($i === sizeof(bases)-1 || (bases[$i] < bases[$i-1])) throw_once('Invalid base number in base function.');\n\t\t\t $x += $bases[$i] ** ($power-$i);\n\t\t\t $power >>= 1;\n\t\t }\n\t\t $x *= $one_in_base_10;\n\t\t $b -= $x;\n\t}\n\treturn base10($b);\n};\n\nforeach([1, 2, 3, 10, 17, 18, 19, 20]) as $n{\n\t$e = php_e($n);\n\techo decoct($e), \"\\n\";\n}\n",
    "input_language": "C++",
    "output_language": "PHP"
  },
  {
    "id": 153,
    "input": "Translate C to Go:#include <locale.h>\n#include <stdio.h>\n\nint main()\n{\n  unsigned long long int trillion = 1000000000000;\n\n  setlocale(LC_NUMERIC,\"\");\n\n  printf(\"Locale : %s, One Trillion : %'llu\\n\", setlocale(LC_CTYPE,NULL),trillion);\n\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc main() {\n    \n    x := new(big.Int)\n    \n    fmt.Println(x.SetString(1, 10))\n    \n    \n    var p big.Int\n    \n    fmt.Println(p.ToString())\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 154,
    "input": "Translate C++ to Go:#include <iostream>\n\nbool ispr(unsigned int n) {\n    if ((n & 1) == 0 || n < 2) return n == 2;\n    for (unsigned int j = 3; j * j <= n; j += 2)\n      if (n % j == 0) return false; return true; }\n\nint main() {\n  unsigned int c = 0, nc, pc = 9, i, a, b, l,\n    ps[128]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, nxt[128];\n  while (true) {\n    nc = 0;\n    for (i = 0; i < pc; i++) {\n        if (ispr(a = ps[i]))\n          printf(\"%8d%s\", a, ++c % 5 == 0 ? \"\\n\" : \" \");\n        for (b = a * 10, l = a % 10 + b++; b < l; b++)\n          nxt[nc++] = b;\n      }\n      if (nc > 1) for(i = 0, pc = nc; i < pc; i++) ps[i] = nxt[i];\n      else break;\n    }\n    printf(\"\\n%d descending primes found\", c);\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc reverse(n uint64) uint64 {\n\tb := uint32(1)\n\tr := uint64(0)\n\tfor r <= n { \n\t\tr *= 10\n\t\tf := uint64(n % 10)\n\t\tn /= 10\n\t\tif f!= 0 && r >= f*10-a {\n\t\t\tr++\n\t\t} else {\n\t\t\tr = n\n\t\t\tbreak\n\t\t}\n\t}\n\treturn r\n}\n\n\nvar pows [20]int\n\nconst muint64 uint64 \n\nfunc commatize(s string) string {\n\tpowStr := fmt.Sprintf(\"k(%v)\", s)\n\tpows[len(pows)-1]\n\ti := len(pows) - 1\n\tfor j := powStr.length(); i >= 0; i-- {\n\t\tj -= powStr.length()\n\t\tif j < 0 {  \n\t\tpowStr = powStr[0:i-j+2] + j + \"...\"\n\t\treturn powStr\n\t\t}\n\t}\n\tpanic(\"failed\")\n}\n\n\n\ntype primeCount struct {\n\tdigits []pows\n\tmulti bool\n}\n\nfunc newPrimeCounts(m uint64) (*primeCount, error) {\n\tvar maxDigits uint64\n\tfor d := 1; ; d++ {\n\t\tmaxDigits = uint64(d)\n\t\tif!m || maxDigits>m/10 ||\n\t\t\tlen(primes[d])>maxDigits {\n\t\t\tprimes[d].digits = append([]pows{d}, maxDigits-d )\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\tq := make(chan uint64)\n\t\tgo func(q uint64) {\n\t\t\t\n\t\t\ts := strconv.FormatUint(uint64(maxDigits), 10)\n\t\t\tfor _, digit := range primes[d].digits {\n\t\t\t\tswitch q {\n\t\t\t\tcase 0:\n\t\t\t\t\tfmt.Printf(\"%s: \", s)\n\t\t\t\tcase 1:\n\t\t\t\t\tfmt.Print(s)\n\t\t\t\tdefault:\n\t\t\t\t\tfmt.Fprintf(q, \"%2d-k%c\", q, digit)\n\t\t\t\t}\n\t\t\t}(q)\n\t\t}(q)\n\t\t\n\t\t\n\t\tc := newPrimeCounts(d)\n\t\tdefer c.digits[d]\n\n\t\tselect <-c.digits[d]\n\t}\n\t\n\tif len(c.digits)>0 {\n\t\treturn c, nil\n\t}\n\tpanic(\"Failed to find digits of k(100)\")\n}\n\nfunc printAll(trials uint64, count *primeCount) {\n\ttrialNumber := trials / uint64(len(*count.digits))\n\tif trialNumber%len(*count.digits)==0 {\n\t\tfmt.Println(\"\")\n\t}\n\tfmt.Printf(\"%-18s %2d -> %v\\n\",\n\t\tcommatize(strconv.Itoa(int(trialNumber))),\n\t\tcount.multi-trials/count.digits[trialNumber],\n\t\tcommatize(fmt.Sprint(count)))\n}\n\n\n\n\nfunc main() {\n\tconst limit = 25e6\n\t\n\t_, _ = newPrimeCounts(limit)\n\tprintAll(limit, primedocs)\n\tnewPrimeCounts(limit)\n\tprintAll(limit, nondocs)\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 155,
    "input": "Translate C to VB:#include <stdio.h>\n#include <math.h>\n#include <unistd.h>\n\nconst char *shades = \".:!*oe&#%@\";\n\ndouble light[3] = { -50, 0, 50 };\nvoid normalize(double * v)\n{\n\tdouble len = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);\n\tv[0] /= len; v[1] /= len; v[2] /= len;\n}\n\ndouble dot(double *x, double *y)\n{\n\tdouble d = x[0]*y[0] + x[1]*y[1] + x[2]*y[2];\n\treturn d < 0 ? -d : 0;\n}\n\ntypedef struct { double cx, cy, cz, r; } sphere_t;\n\n\nsphere_t pos = { 20, 20, 0, 20 }, neg = { 1, 1, -6, 20 };\n\n\nint hit_sphere(sphere_t *sph, double x, double y, double *z1, double *z2)\n{\n\tdouble zsq;\n\tx -= sph->cx;\n\ty -= sph->cy;\n\tzsq = sph->r * sph->r - (x * x + y * y);\n\tif (zsq < 0) return 0;\n\tzsq = sqrt(zsq);\n\t*z1 = sph->cz - zsq;\n\t*z2 = sph->cz + zsq;\n\treturn 1;\n}\n\nvoid draw_sphere(double k, double ambient)\n{\n\tint i, j, intensity, hit_result;\n\tdouble b;\n\tdouble vec[3], x, y, zb1, zb2, zs1, zs2;\n\tfor (i = floor(pos.cy - pos.r); i <= ceil(pos.cy + pos.r); i++) {\n\t\ty = i + .5;\n\t\tfor (j = floor(pos.cx - 2 * pos.r); j <= ceil(pos.cx + 2 * pos.r); j++) {\n\t\t\tx = (j - pos.cx) / 2. + .5 + pos.cx;\n\n\t\t\t\n\t\t\tif (!hit_sphere(&pos, x, y, &zb1, &zb2))\n\t\t\t\thit_result = 0;\n\n\t\t\t\n\t\t\telse if (!hit_sphere(&neg, x, y, &zs1, &zs2))\n\t\t\t\thit_result = 1;\n\n\t\t\t\n\t\t\telse if (zs1 > zb1) hit_result = 1;\n\n\t\t\t\n\t\t\telse if (zs2 > zb2) hit_result = 0;\n\n\t\t\t\n\t\t\telse if (zs2 > zb1) hit_result = 2;\n\t\t\telse\t\t    hit_result = 1;\n\n\t\t\tswitch(hit_result) {\n\t\t\tcase 0:\n\t\t\t\tputchar('+');\n\t\t\t\tcontinue;\n\t\t\tcase 1:\n\t\t\t\tvec[0] = x - pos.cx;\n\t\t\t\tvec[1] = y - pos.cy;\n\t\t\t\tvec[2] = zb1 - pos.cz;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvec[0] = neg.cx - x;\n\t\t\t\tvec[1] = neg.cy - y;\n\t\t\t\tvec[2] = neg.cz - zs2;\n\t\t\t}\n\n\t\t\tnormalize(vec);\n\t\t\tb = pow(dot(light, vec), k) + ambient;\n\t\t\tintensity = (1 - b) * (sizeof(shades) - 1);\n\t\t\tif (intensity < 0) intensity = 0;\n\t\t\tif (intensity >= sizeof(shades) - 1)\n\t\t\t\tintensity = sizeof(shades) - 2;\n\t\t\tputchar(shades[intensity]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n}\n\nint main()\n{\n\tdouble ang = 0;\n\n\twhile (1) {\n\t\tprintf(\"\\033[H\");\n\t\tlight[1] = cos(ang * 2);\n\t\tlight[2] = cos(ang);\n\t\tlight[0] = sin(ang);\n\t\tnormalize(light);\n\t\tang += .05;\n\n\t\tdraw_sphere(2, .3);\n\t\tusleep(100000);\n\t}\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Imports System.Drawing\n\nModule Module1\n\n    Dim p As Point\n    Sub SetPoint(x As Integer, y As Integer)\n\n        If Not Nothing Then p = New Point(x, y)\n\n\n    End Sub\n\n\n    Function Circle(pivot As Point, cX As Single, cY As Single,\n                    radius As Double) As IEnumerable(Of Point)\n\n        \n        While True\n        \n            Yield With(New Point(cX, cY))\n\n                cX += 1 / 4 * (-p.X + pivot.X)\n                cY += 1 / 4 * (p.Y - pivot.Y)\n\n\n\n                \n                Do Until Math.Abs(Math.Pow((cX - p.X), 2) +\n                                Math.Pow((cY - p.Y), 2)) < radius Then\n            \n                    \n                    cX += 1 / 64 * (p.X - cX)\n                    cY += 1 / 64 * (p.Y - cY)\n\n\n\n\n                End If\n\n\n\n            End Select\n\n\n\n\n        End While\n\n    End Function\n\n    \n    Function Line(startpoint As Point, endpoint As Point) As IEnumerable(Of Point)\n\n        \n        While True\n        \n        \n            \n            yield startpoint\n            For Each point In Circle(startpoint, p.x, p.y)\n                startpoint = point\n            Next\n            endwhile\n\n            \n            \n            startpoint.x += endpoint.x\n            startpoint.y += endpoint.y\n\n            \n\n            endpoint.x += 1 / 16 * (startpoint.x -\n                                   endpoint.x)\n            endpoint.y += 1 / 16 * (startpoint.y -\n                                   endpoint.y)\n\n\n\n\n\n        End While\n\n    End Function\n\n    Sub Main()\n\n        Const MAX_ITERS As Integer = 20000\n\n        \n        \n        Dim bmp As Bitmap = new Bitmap(600, 400)\n\n        \n\n        \n        \n        \n        Dim points As List(Of Point) = Line(SetPoint(-300, -150),\n                                              SetPoint(170, 120))\n\n\n        Dim color As Color\n        For Each point In points\n            color = bmp.GetPixel(point.X, point.Y)\n            Console.WriteLine(\"{0},{1}\", point.X, point.Y)\n            bmp.SetPixel(point.X, point.Y, color)\n        Next\n\n        bmp.Save(\"test.png\")\n\n    End Sub\n\nEnd Module\n",
    "input_language": "C",
    "output_language": "VB"
  },
  {
    "id": 156,
    "input": "Translate C to Go:\n\n\n#include <stdio.h>\n\nint Gcd(int v1, int v2)\n{\n\t\n\tint a, b, r;\n\tif (v1 < v2)\n\t{\n\t\ta = v2;\n\t\tb = v1;\n\t}\n\telse\n\t{\n\t\ta = v1;\n\t\tb = v2;\n\t}\n\tdo\n\t{\n\t\tr = a % b;\n\t\tif (r == 0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta = b;\n\t\t\tb = r;\n\t\t}\n\t} while (1 == 1);\n\treturn b;\n}\n\nint NotInList(int num, int numtrip, int *tripletslist)\n{\n\t\n\tfor (int i = 0; i < numtrip; i++)\n\t{\n\t\tif (num == tripletslist[i])\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n} \t\n\nint main()\n{\n\tint coprime[50];\n\tint gcd1, gcd2;\n\tint ntrip = 2;\n\tint n = 3;\n\t\n\t\n\tcoprime[0] = 1;\n\tcoprime[1] = 2;\n\n\twhile ( n < 50)\n\t{\n\t\tgcd1 = Gcd(n, coprime[ntrip-1]);\n\t\tgcd2 = Gcd(n, coprime[ntrip-2]);\n\t\t\n\t\tif (gcd1 == 1 && gcd2 == 1 && NotInList(n, ntrip, coprime))\n\t\t{\n\t\t\tcoprime[ntrip++] = n;\n\t\t\t\n\t\t\tn = 3;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\n\t\t\tn++;\n\t\t}\n\t}\n\t\n\t\n\tprintf(\"\\n\");\n\tfor (int i = 0; i < ntrip; i++)\n\t{\n\t\tprintf(\"%2d \", coprime[i]);\n\t\tif ((i+1) % 10 == 0)\n\t\t{\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\t\n\tprintf(\"\\n\\nNumber of elements in coprime triplets: %d\\n\\n\", ntrip);\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc gcd(a, b uint64) uint64 {\n    var ua, tb uint64\n\n    if a > b {\n        ua, tb = a, b\n    } else {\n        ua, tb = b, a\n    }\n\n    \n    for u := uint64(1); u <= ua; u++ {\n        if!(u >= tb && t-a*uint64(u) == 0) {\n            break \n        }\n    }\n\n    return uint64(tb / ua)\n}\n\n\ntype triplet struct{ c uint64 }\n\n\nvar tc []triplet\n\n\nconst maxTripletCount = 25 \n\nfunc init() {\n    tc = make([]triplet, maxTripletCount)\n}\n\n\n\nfunc newTriplet(c uint64) {\n    \n    \n    \n    d := &tc[c]\n    d.c = c\n    \n    \n    \n    for _, d1 := range tc {\n        if d.a == d1.a || d.b == d1.b {\n            \n            continue  \n        }\n        \n        f := float64(d.a-d1.a)+float64(d.b-d1.b)/2.0\n        if g := gcd(f, d1.c/d.c); g!= 1 { break } \n    \n    }\n}\n\n\n\n\nfunc printAll(triplets []*triplet) {\n    \n    \n    \n    \n    fmt.Println(\"First\", len(tc), \"triad numbers:\")\n    last := len(tc)-1\n    for i := 0; i < last; i += 6 {\n        fmt.Printf(\"%4s\\t%7s\\t%8s -> (%5s,%5s,%5s)\\n\",\n            tc[i].c,\n            tc[i+1],\n            tc[i+2],\n            tc[i+3],\n            tc[i+4],\n            tc[i+5])\n\n    }\n}\n\n\n\n\n\nfunc commatize(s string) string {\n    le := len(s)\n    for i := le - sizeof(uint64); i >= 0; i -= sizeof(uint64) => j {\n        s[j] = '0' + s[j]\n    }\n    return s[:le]\n}\n\nfunc main() {\n    fmt.Print(\"Enter up to ten thousand prime factors of integers from 0 to 9:\\n\")\n    var primes [10000]bool\n    for _ ; true; _ = fmt.Scanln(&primes) {\n        \n        \n        var triples []*triplet\n        \n        \n        \n        \n        for c := uint64(1); c < 500000; c++ {\n            \n            \n            newTriplet(c)\n        }\n        \n\n        \n        \n        count := 0\n        for _, p := range tc {\n            if p.c == 1 { continue }\n        }\n        for _, e := range tc[p.c/2:p.c+1] {\n            for _, q := range tc[e*p.pq/e] {\n                for _, r := range tc[q*r.q/rp] {\n                    if p.d == q.r && q.r == r.p && r.d == e.p &&\n                       !primes.(bool)(commatize(p.tostring())) ==\n                        commatize(q.tostring()) +\n                            commatize(r.tostring())+\n                            commatize(e.tostring())\n                    do {break} \n                }\n            }\n        }\n        if count < 200 {\n            continue\n        }\n        fmt.Println(count, \": \", p.c, \"->\", commatize(primes.(bool)p.tostring()),\n            commatize(commatize(q.tostring())),\n            commatize(commatize(r.tostring())), commatize(commatize(e.tostring())))\n        count++\n    }\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 157,
    "input": "Translate C to C#:#include <stdio.h>\n#define LIMIT 100000\n\nint digitset(int num, int base) {\n    int set;\n    for (set = 0; num; num /= base)\n        set |= 1 << num % base;\n    return set;\n}\n\nint main() {\n    int i, c = 0;\n    for (i = 0; i < LIMIT; i++)\n        if (digitset(i,10) == digitset(i,16))\n            printf(\"%6d%c\", i, ++c%10 ? ' ' : '\\n');\n    printf(\"\\n\");\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace ThueMorseSequence {\n    class Program {\n        static void Main(string[] args) {\n            Sequence(5);\n        }\n\n        public static void Sequence(int steps) {\n            var s = String.Format(\"{0}:\", (char)0).Replace(\"[\", \"{\").Replace(\"]\", \"}\");\n            var it = Enumerable.Range(0, steps + 1).AsParallel().GetEnumerator();\n            while (it.MoveNext()) {\n                s = string.Concat(s[1], s[0]);\n            }\n            Console.WriteLine(s);\n        }\n    }\n}\n",
    "input_language": "C",
    "output_language": "C#"
  },
  {
    "id": 158,
    "input": "Translate C++ to Java:#include <iostream>\n\nint main()\n{\n  int a, b;\n  std::cin >> a >> b;\n  std::cout << \"a+b = \" << a+b << \"\\n\";\n  std::cout << \"a-b = \" << a-b << \"\\n\";\n  std::cout << \"a*b = \" << a*b << \"\\n\";\n  std::cout << \"a/b = \" << a/b << \", remainder \" << a%b << \"\\n\";\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.Scanner;\n\npublic class Sum2 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in); \n        System.out.println(in.nextInt() + in.nextInt()); \n    }\n}\n",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 159,
    "input": "Translate C to VB:#include <stdio.h>\n\nvoid recurse(unsigned int i)\n{\n  printf(\"%d\\n\", i);\n  recurse(i+1); \n}\n\nint main()\n{\n  recurse(0);\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Sub bar2()\n    Dim x As Integer\n    x = 0\n    Bar \"x before\", x\n    x = 5\n    Bar \"\"\n    Bar \"x after initialization\", x\n    x = 10_000\n    Bar \"\"\n    Bar \"x after assignment\", x\nEnd Sub\n",
    "input_language": "C",
    "output_language": "VB"
  },
  {
    "id": 160,
    "input": "Translate Java to Go:public class VLQCode\n{\n  public static byte[] encode(long n)\n  {\n    int numRelevantBits = 64 - Long.numberOfLeadingZeros(n);\n    int numBytes = (numRelevantBits + 6) / 7;\n    if (numBytes == 0)\n      numBytes = 1;\n    byte[] output = new byte[numBytes];\n    for (int i = numBytes - 1; i >= 0; i--)\n    {\n      int curByte = (int)(n & 0x7F);\n      if (i != (numBytes - 1))\n        curByte |= 0x80;\n      output[i] = (byte)curByte;\n      n >>>= 7;\n    }\n    return output;\n  }\n  \n  public static long decode(byte[] b)\n  {\n    long n = 0;\n    for (int i = 0; i < b.length; i++)\n    {\n      int curByte = b[i] & 0xFF;\n      n = (n << 7) | (curByte & 0x7F);\n      if ((curByte & 0x80) == 0)\n        break;\n    }\n    return n;\n  }\n  \n  public static String byteArrayToString(byte[] b)\n  {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < b.length; i++)\n    {\n      if (i > 0)\n        sb.append(\", \");\n      String s = Integer.toHexString(b[i] & 0xFF);\n      if (s.length() < 2)\n        s = \"0\" + s;\n      sb.append(s);\n    }\n    return sb.toString();\n  }\n  \n  public static void main(String[] args)\n  {\n    long[] testNumbers = { 2097152, 2097151, 1, 127, 128, 589723405834L };\n    for (long n : testNumbers)\n    {\n      byte[] encoded = encode(n);\n      long decoded = decode(encoded);\n      System.out.println(\"Original input=\" + n + \", encoded = [\" + byteArrayToString(encoded) + \"], decoded=\" + decoded + \", \" + ((n == decoded) ? \"OK\" : \"FAIL\"));\n    }\n  }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\n\t\"golang.org/x/net/websocket\"\n)\n\nfunc connect(w *websocket.Conn, host string) error {\n\treturn w.Write([]byte(`HTTP/1.1 200 OK\nContent-Type:text/html\nCache-Control:no-cache\nPragma:no-transform\nServer:gRPC-WS/1.0\nDateThu Jan 01 00:00:00 1970 GMT\nConnection:close\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http:\n<head>\n<title>Simple Web Socket Example</title>\n</head>\n\n<body>\n<div id=\"app\"></div>\n<script type=\"text/javascript\" src=\"/tmp/ws-example.js\">\n\n</script>\n\n\n<script language=\"javascript\" >\nvar url = \"'\"+host+\"'\";\nsetInterval(function(){\n\tvar socket = new WebSocket(url);\n\n\tsocket.onopen   = function(event){\n\t    alert( \"Connected!\" );\n\t    \n\t    var textAreaElement = document.getElementById(\"app\");\n\t    textareaElement.value += event.data + \"\\r\\n\";\n\t}\n\t \n\tsocket.onerror   = function(event){\n\t    alert( \"Error:\" + event.data );\n\t}\n\t \n/socket/onclose   = function(event){\n\t    alert( \"Closed!\" )\n\t}\n\t \n/socket/handlemessage = function(dataEvent){\n\t    var textAreaElement = document.getElementById(\"app\");\n\n\t    switch( dataEvent.type ){\n\t        case websocket.TextMessageEventText :\n\t            textAreaElement.value+=dataEvent.text+\"\\r\\n\";\n\t            break;\n\n\t        \n\t        case websocket.CloseEventClose :\n\t            console.log('Handshaking closed.');\n\t            break;\n\t    }\n\t}\t\n\nsocket.connect();\n\n},100);\n\n\nfunction handleWebSocketData(e) {\n\n\tswitch( e.type ) {\n\t\t\n\t\tcase 'TEXT' :\n\t\t\tconsole.log( 'Received TEXT message.' );\n\n\t\t\tbreak;\n\n\t\t\n\t\tcase 'CLOSED':\n\t\t\tlog.info ('Socket connection was closed.');\n\n\t\t\tbreak;\n\n\t\t\n\t\tdefault :\n\t\t\t\n\t\t\tlog.debug ('Unknown WebSocket message type:', e.type );\n\n            break;\n\t}\n}\n\n\nwindow.setInterval(handleWebSocketData,500); \n\ndocument.addEventListener('DOMContentLoaded', handleWebSocketData);\n\nlog && require('./exit_app')\n\n\n\n\n\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 161,
    "input": "Translate PHP to Python:\nfunction RGBtoHSV($r, $g, $b) {\n\t$r = $r/255.; // convert to range 0..1\n\t$g = $g/255.;\n\t$b = $b/255.;\n\t$cols = array(\"r\" => $r, \"g\" => $g, \"b\" => $b);\n\tasort($cols, SORT_NUMERIC);\n\t$min = key(array_slice($cols, 1)); // \"r\", \"g\" or \"b\"\n\t$max = key(array_slice($cols, -1)); // \"r\", \"g\" or \"b\"\n\n\tif($cols[$min] == $cols[$max]) {\n\t\t$h = 0;\n\t} else {\n\t\tif($max == \"r\") {\n\t\t\t$h = 60. * ( 0 + ( ($cols[\"g\"]-$cols[\"b\"]) / ($cols[$max]-$cols[$min]) ) );\n\t\t} elseif ($max == \"g\") {\n\t\t\t$h = 60. * ( 2 + ( ($cols[\"b\"]-$cols[\"r\"]) / ($cols[$max]-$cols[$min]) ) );\n\t\t} elseif ($max == \"b\") {\n\t\t\t$h = 60. * ( 4 + ( ($cols[\"r\"]-$cols[\"g\"]) / ($cols[$max]-$cols[$min]) ) );\n\t\t}\n\t\tif($h < 0) {\n\t\t\t$h += 360;\n\t\t}\n\t}\n\n\tif($cols[$max] == 0) {\n\t\t$s = 0;\n\t} else {\n\t\t$s = ( ($cols[$max]-$cols[$min])/$cols[$max] );\n\t\t$s = $s * 255;\n\t}\n\n\t$v = $cols[$max];\n\t$v = $v * 255;\n\n\treturn(array($h, $s, $v));\n}\n\n$filename = \"image.png\";\n$dimensions = getimagesize($filename);\n$w = $dimensions[0]; // width\n$h = $dimensions[1]; // height\n\n$im = imagecreatefrompng($filename);\n\nfor($hi=0; $hi < $h; $hi++) {\n\n\tfor($wi=0; $wi < $w; $wi++) {\n\t\t$rgb = imagecolorat($im, $wi, $hi);\n\n\t\t$r = ($rgb >> 16) & 0xFF;\n\t\t$g = ($rgb >> 8) & 0xFF;\n\t\t$b = $rgb & 0xFF;\n\t\t$hsv = RGBtoHSV($r, $g, $b);\n\n\t\t$brgb = imagecolorat($im, $wi, $hi+1);\n\t\t$br = ($brgb >> 16) & 0xFF;\n\t\t$bg = ($brgb >> 8) & 0xFF;\n\t\t$bb = $brgb & 0xFF;\n\t\t$bhsv = RGBtoHSV($br, $bg, $bb);\n\n\t\tif($hsv[2]-$bhsv[2] > 20) { \n                    imagesetpixel($im, $wi, $hi, imagecolorallocate($im, 255, 0, 0));\n\t\t} \n                else {\n\t\t    imagesetpixel($im, $wi, $hi, imagecolorallocate($im, 0, 0, 0));\n\t\t}\n\t\t\t\n        }\n        \n}\n\nheader('Content-Type: image/jpeg');\nimagepng($im);\nimagedestroy($im);\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import Image, ImageDraw\n \nimg = Image.new(\"RGB\", (256, 256))\ndrawingTool = Image.Draw.ImageDraw.Draw(img)\nx = y = 0\nwhile x < 256:\n    while y < 256:\n        color = img.getPixel(x, y)\n        r,g,b = color.split()\n        b /= 3\n        drawingTool.point((x, y), (r, r, r))\n        y += 1 if g <= b else -1\n    x += 1\n    y = 0\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 162,
    "input": "Translate Java to Python:import static java.lang.Math.*;\nimport java.util.Arrays;\nimport java.util.function.BiFunction;\n\npublic class DemingsFunnel {\n\n    public static void main(String[] args) {\n        double[] dxs = {\n            -0.533, 0.270, 0.859, -0.043, -0.205, -0.127, -0.071, 0.275,\n            1.251, -0.231, -0.401, 0.269, 0.491, 0.951, 1.150, 0.001,\n            -0.382, 0.161, 0.915, 2.080, -2.337, 0.034, -0.126, 0.014,\n            0.709, 0.129, -1.093, -0.483, -1.193, 0.020, -0.051, 0.047,\n            -0.095, 0.695, 0.340, -0.182, 0.287, 0.213, -0.423, -0.021,\n            -0.134, 1.798, 0.021, -1.099, -0.361, 1.636, -1.134, 1.315,\n            0.201, 0.034, 0.097, -0.170, 0.054, -0.553, -0.024, -0.181,\n            -0.700, -0.361, -0.789, 0.279, -0.174, -0.009, -0.323, -0.658,\n            0.348, -0.528, 0.881, 0.021, -0.853, 0.157, 0.648, 1.774,\n            -1.043, 0.051, 0.021, 0.247, -0.310, 0.171, 0.000, 0.106,\n            0.024, -0.386, 0.962, 0.765, -0.125, -0.289, 0.521, 0.017,\n            0.281, -0.749, -0.149, -2.436, -0.909, 0.394, -0.113, -0.598,\n            0.443, -0.521, -0.799, 0.087};\n\n        double[] dys = {\n            0.136, 0.717, 0.459, -0.225, 1.392, 0.385, 0.121, -0.395,\n            0.490, -0.682, -0.065, 0.242, -0.288, 0.658, 0.459, 0.000,\n            0.426, 0.205, -0.765, -2.188, -0.742, -0.010, 0.089, 0.208,\n            0.585, 0.633, -0.444, -0.351, -1.087, 0.199, 0.701, 0.096,\n            -0.025, -0.868, 1.051, 0.157, 0.216, 0.162, 0.249, -0.007,\n            0.009, 0.508, -0.790, 0.723, 0.881, -0.508, 0.393, -0.226,\n            0.710, 0.038, -0.217, 0.831, 0.480, 0.407, 0.447, -0.295,\n            1.126, 0.380, 0.549, -0.445, -0.046, 0.428, -0.074, 0.217,\n            -0.822, 0.491, 1.347, -0.141, 1.230, -0.044, 0.079, 0.219,\n            0.698, 0.275, 0.056, 0.031, 0.421, 0.064, 0.721, 0.104,\n            -0.729, 0.650, -1.103, 0.154, -1.720, 0.051, -0.385, 0.477,\n            1.537, -0.901, 0.939, -0.411, 0.341, -0.411, 0.106, 0.224,\n            -0.947, -1.424, -0.542, -1.032};\n\n        experiment(\"Rule 1:\", dxs, dys, (z, dz) -> 0.0);\n        experiment(\"Rule 2:\", dxs, dys, (z, dz) -> -dz);\n        experiment(\"Rule 3:\", dxs, dys, (z, dz) -> -(z + dz));\n        experiment(\"Rule 4:\", dxs, dys, (z, dz) -> z + dz);\n    }\n\n    static void experiment(String label, double[] dxs, double[] dys,\n            BiFunction<Double, Double, Double> rule) {\n\n        double[] resx = funnel(dxs, rule);\n        double[] resy = funnel(dys, rule);\n        System.out.println(label);\n        System.out.printf(\"Mean x, y:    %.4f, %.4f%n\", mean(resx), mean(resy));\n        System.out.printf(\"Std dev x, y: %.4f, %.4f%n\", stdDev(resx), stdDev(resy));\n        System.out.println();\n    }\n\n    static double[] funnel(double[] input, BiFunction<Double, Double, Double> rule) {\n        double x = 0;\n        double[] result = new double[input.length];\n\n        for (int i = 0; i < input.length; i++) {\n            double rx = x + input[i];\n            x = rule.apply(x, input[i]);\n            result[i] = rx;\n        }\n        return result;\n    }\n\n    static double mean(double[] xs) {\n        return Arrays.stream(xs).sum() / xs.length;\n    }\n\n    static double stdDev(double[] xs) {\n        double m = mean(xs);\n        return sqrt(Arrays.stream(xs).map(x -> pow((x - m), 2)).sum() / xs.length);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def demings_rule_1(dx,dys):\n    \"One sum\"\n    \n    \n    dxy_sum= lambda x,y : x+y if (x==dx or y==dy) else 0\n    \n    return reduce(dxy_sum, [(dx,x),(dy,y)], 0)\n\n    \n    print \"\\n\\nFor a single term:\"\n    r=demings_rule_1(5,-15)\n    assert r == -10\n\n   \n    print \"For two terms:\" \n    r=r[0]+r[1]\n    assert abs(r-17)==1\n\n\nprint \"\\n\\nFor multiple terms:\"\nfor n in range(1,6):  \n    dr=demings_functor(n)\n    r=dr([5,(n+5)])\n    print str(n)+\"th rule: \"+str(r)\n\n\ndef demings_functor(a):\n    'Sum of powers'\n    return sum(pow(x,a) for x in xrange(10))\n\n\nif __name__==\"__main__\":\n    pass\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 163,
    "input": "Translate C to VB:#include <stdio.h>\n\nint main(int argc, char **argv) {\n\n   int user1 = 0, user2 = 0;\n   printf(\"Enter two integers.  Space delimited, please:  \");\n   scanf(\"%d %d\",&user1, &user2);\n   int array[user1][user2];\n   array[user1/2][user2/2] = user1 + user2;\n   printf(\"array[%d][%d] is %d\\n\",user1/2,user2/2,array[user1/2][user2/2]);\n\n   return 0;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim arr\n    If Array-Length(Array(1, 2, 3, 4, 5)) > 0 Then\n        Debug.Print \"All elements of an array are objects\"\n    Else\n        Debug.Print \"Array contains no object values.\"\n    End If\nEnd Sub\n",
    "input_language": "C",
    "output_language": "VB"
  },
  {
    "id": 164,
    "input": "Translate PHP to Go:<?php\n  $code = 'echo \"hello world\"';\n  eval($code);\n  $code = 'return \"hello world\"';\n  print eval($code);\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"os/exec\"\n)\n\nfunc main() {\n    output, err := exec.Command(\"ls\", \"-l\").CombinedOutput()\n    if err!= nil {\n        fmt.Println(err)\n    }\n    fmt.Print(string(output))\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 165,
    "input": "Translate C to PHP:#include <stdio.h>\n#include <string.h>\n\n\nvoid longmulti(const char *a, const char *b, char *c)\n{\n\tint i = 0, j = 0, k = 0, n, carry;\n\tint la, lb;\n\n\t\n\tif (!strcmp(a, \"0\") || !strcmp(b, \"0\")) {\n\t\tc[0] = '0', c[1] = '\\0';\n\t\treturn;\n\t}\n\n\t\n\tif (a[0] == '-') { i = 1; k = !k; }\n\tif (b[0] == '-') { j = 1; k = !k; }\n\n\t\n\tif (i || j) {\n\t\tif (k) c[0] = '-';\n\t\tlongmulti(a + i, b + j, c + k);\n\t\treturn;\n\t}\n\n\tla = strlen(a);\n\tlb = strlen(b);\n\tmemset(c, '0', la + lb);\n\tc[la + lb] = '\\0';\n\n#\tdefine I(a) (a - '0')\n\tfor (i = la - 1; i >= 0; i--) {\n\t\tfor (j = lb - 1, k = i + j + 1, carry = 0; j >= 0; j--, k--) {\n\t\t\tn = I(a[i]) * I(b[j]) + I(c[k]) + carry;\n\t\t\tcarry = n / 10;\n\t\t\tc[k] = (n % 10) + '0';\n\t\t}\n\t\tc[k] += carry;\n\t}\n#\tundef I\n\tif (c[0] == '0') memmove(c, c + 1, la + lb);\n\n\treturn;\n}\n\nint main()\n{\n\tchar c[1024];\n\tlongmulti(\"-18446744073709551616\", \"-18446744073709551616\", c);\n\tprintf(\"%s\\n\", c);\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\nfunction isPrime($n)\n{\n    if ($n <= 3) {\n        return $n > 1;\n    } elseif (($n % 2 == 0) or ($n % 3 == 0)) {\n        return false;\n    }\n    $i = 5;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            return false;\n        }\n        $i+=2;\n        if ($n % $i == 0) {\n            return false;\n        }\n        $i+=4;\n    }\n    return true;\n}\n\n\n$queue = [];\n$primes = [];\n\nfor ($i = 1 ; $i <= 9 ; $i++) {\n    $prime = is_prime($i);\n    if ($prime) {\n        $queue[] = $i;\n    }\n    \n}\n\nwhile ($queue) {\n    foreach ($queue as $number) {\n        $flag = false;\n        \n        for ($i = 0 ; $i < 50 ; $i++) {\n            if ($number === $queue[$i]) continue;\n            \n        $num = str_pad($number, 7,'', STR_PAD_LEFT);\n        if (is_numeric(substr($num, 0, 2))) {\n            break;\n        }\n        \n        \n        if ($flag!== is_prime($num)) {\n            continue;\n        }\n        \n        echo \"$num \";\n        $primes[] = $number;\n        $queue[] = $num;\n    }\n}\necho \"\\n\";\nforeach ($primes as $value) {\n    print \"$value \";\n}\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 166,
    "input": "Translate C to Python:#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define BUFFER_SIZE 128\n\ntypedef unsigned char character;\ntypedef character *string;\n\ntypedef struct node_t node;\nstruct node_t {\n    enum tag_t {\n        NODE_LEAF,\n        NODE_TREE,\n        NODE_SEQ,\n    } tag;\n\n    union {\n        string str;\n        node *root;\n    } data;\n\n    node *next;\n};\n\nnode *allocate_node(enum tag_t tag) {\n    node *n = malloc(sizeof(node));\n    if (n == NULL) {\n        fprintf(stderr, \"Failed to allocate node for tag: %d\\n\", tag);\n        exit(1);\n    }\n    n->tag = tag;\n    n->next = NULL;\n    return n;\n}\n\nnode *make_leaf(string str) {\n    node *n = allocate_node(NODE_LEAF);\n    n->data.str = str;\n    return n;\n}\n\nnode *make_tree() {\n    node *n = allocate_node(NODE_TREE);\n    n->data.root = NULL;\n    return n;\n}\n\nnode *make_seq() {\n    node *n = allocate_node(NODE_SEQ);\n    n->data.root = NULL;\n    return n;\n}\n\nvoid deallocate_node(node *n) {\n    if (n == NULL) {\n        return;\n    }\n\n    deallocate_node(n->next);\n    n->next = NULL;\n\n    if (n->tag == NODE_LEAF) {\n        free(n->data.str);\n        n->data.str = NULL;\n    } else if (n->tag == NODE_TREE || n->tag == NODE_SEQ) {\n        deallocate_node(n->data.root);\n        n->data.root = NULL;\n    } else {\n        fprintf(stderr, \"Cannot deallocate node with tag: %d\\n\", n->tag);\n        exit(1);\n    }\n\n    free(n);\n}\n\nvoid append(node *root, node *elem) {\n    if (root == NULL) {\n        fprintf(stderr, \"Cannot append to uninitialized node.\");\n        exit(1);\n    }\n    if (elem == NULL) {\n        return;\n    }\n\n    if (root->tag == NODE_SEQ || root->tag == NODE_TREE) {\n        if (root->data.root == NULL) {\n            root->data.root = elem;\n        } else {\n            node *it = root->data.root;\n            while (it->next != NULL) {\n                it = it->next;\n            }\n            it->next = elem;\n        }\n    } else {\n        fprintf(stderr, \"Cannot append to node with tag: %d\\n\", root->tag);\n        exit(1);\n    }\n}\n\nsize_t count(node *n) {\n    if (n == NULL) {\n        return 0;\n    }\n\n    if (n->tag == NODE_LEAF) {\n        return 1;\n    }\n    if (n->tag == NODE_TREE) {\n        size_t sum = 0;\n        node *it = n->data.root;\n        while (it != NULL) {\n            sum += count(it);\n            it = it->next;\n        }\n        return sum;\n    }\n    if (n->tag == NODE_SEQ) {\n        size_t prod = 1;\n        node *it = n->data.root;\n        while (it != NULL) {\n            prod *= count(it);\n            it = it->next;\n        }\n        return prod;\n    }\n\n    fprintf(stderr, \"Cannot count node with tag: %d\\n\", n->tag);\n    exit(1);\n}\n\nvoid expand(node *n, size_t pos) {\n    if (n == NULL) {\n        return;\n    }\n\n    if (n->tag == NODE_LEAF) {\n        printf(n->data.str);\n    } else if (n->tag == NODE_TREE) {\n        node *it = n->data.root;\n        while (true) {\n            size_t cnt = count(it);\n            if (pos < cnt) {\n                expand(it, pos);\n                break;\n            }\n            pos -= cnt;\n            it = it->next;\n        }\n    } else if (n->tag == NODE_SEQ) {\n        size_t prod = pos;\n        node *it = n->data.root;\n        while (it != NULL) {\n            size_t cnt = count(it);\n\n            size_t rem = prod % cnt;\n            expand(it, rem);\n\n            it = it->next;\n        }\n    } else {\n        fprintf(stderr, \"Cannot expand node with tag: %d\\n\", n->tag);\n        exit(1);\n    }\n}\n\nstring allocate_string(string src) {\n    size_t len = strlen(src);\n    string out = calloc(len + 1, sizeof(character));\n    if (out == NULL) {\n        fprintf(stderr, \"Failed to allocate a copy of the string.\");\n        exit(1);\n    }\n    strcpy(out, src);\n    return out;\n}\n\nnode *parse_seq(string input, size_t *pos);\n\nnode *parse_tree(string input, size_t *pos) {\n    node *root = make_tree();\n\n    character buffer[BUFFER_SIZE] = { 0 };\n    size_t bufpos = 0;\n    size_t depth = 0;\n    bool asSeq = false;\n    bool allow = false;\n\n    while (input[*pos] != 0) {\n        character c = input[(*pos)++];\n        if (c == '\\\\') {\n            c = input[(*pos)++];\n            if (c == 0) {\n                break;\n            }\n            buffer[bufpos++] = '\\\\';\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        } else if (c == '{') {\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n            asSeq = true;\n            depth++;\n        } else if (c == '}') {\n            if (depth-- > 0) {\n                buffer[bufpos++] = c;\n                buffer[bufpos] = 0;\n            } else {\n                if (asSeq) {\n                    size_t new_pos = 0;\n                    node *seq = parse_seq(buffer, &new_pos);\n                    append(root, seq);\n                } else {\n                    append(root, make_leaf(allocate_string(buffer)));\n                }\n                break;\n            }\n        } else if (c == ',') {\n            if (depth == 0) {\n                if (asSeq) {\n                    size_t new_pos = 0;\n                    node *seq = parse_seq(buffer, &new_pos);\n                    append(root, seq);\n                    bufpos = 0;\n                    buffer[bufpos] = 0;\n                    asSeq = false;\n                } else {\n                    append(root, make_leaf(allocate_string(buffer)));\n                    bufpos = 0;\n                    buffer[bufpos] = 0;\n                }\n            } else {\n                buffer[bufpos++] = c;\n                buffer[bufpos] = 0;\n            }\n        } else {\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        }\n    }\n\n    return root;\n}\n\nnode *parse_seq(string input, size_t *pos) {\n    node *root = make_seq();\n\n    character buffer[BUFFER_SIZE] = { 0 };\n    size_t bufpos = 0;\n\n    while (input[*pos] != 0) {\n        character c = input[(*pos)++];\n        if (c == '\\\\') {\n            c = input[(*pos)++];\n            if (c == 0) {\n                break;\n            }\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        } else if (c == '{') {\n            node *tree = parse_tree(input, pos);\n            if (bufpos > 0) {\n                append(root, make_leaf(allocate_string(buffer)));\n                bufpos = 0;\n                buffer[bufpos] = 0;\n            }\n            append(root, tree);\n        } else {\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        }\n    }\n\n    if (bufpos > 0) {\n        append(root, make_leaf(allocate_string(buffer)));\n        bufpos = 0;\n        buffer[bufpos] = 0;\n    }\n\n    return root;\n}\n\nvoid test(string input) {\n    size_t pos = 0;\n    node *n = parse_seq(input, &pos);\n    size_t cnt = count(n);\n    size_t i;\n\n    printf(\"Pattern: %s\\n\", input);\n\n    for (i = 0; i < cnt; i++) {\n        expand(n, i);\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n\n    deallocate_node(n);\n}\n\nint main() {\n    test(\"~/{Downloads,Pictures}/*.{jpg,gif,png}\");\n    test(\"It{{em,alic}iz,erat}e{d,}, please.\");\n    test(\"{,{,gotta have{ ,\\\\, again\\\\, }}more }cowbell!\");\n\n    \n    \n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import groupby\n\ndef splitter(text):\n    return ''.join(x for x,y in groupby(\n        sorted(text),\n        key=lambda ch: ord(ch)\n    ) if ch!=''\n\n    )\n\ntest_text = \n\nprint(f\"Input: {text}\\nOutput:\\n  {splitter(test_text)}\")\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 167,
    "input": "Translate Java to Go:public class Pali23 {\n\tpublic static boolean isPali(String x){\n\t\treturn x.equals(new StringBuilder(x).reverse().toString());\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\t\n\t\tfor(long i = 0, count = 0; count < 6;i++){\n\t\t\tif((i & 1) == 0 && (i != 0)) continue; \n\t\t\t\n\t\t\t\n\t\t\tif(isPali(Long.toBinaryString(i)) && isPali(Long.toString(i, 3))){\n\t\t\t\tSystem.out.println(i + \", \" + Long.toBinaryString(i) + \", \" + Long.toString(i, 3));\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc main() {\n    \n    var limit int64 = 22\n    \n    \n    \n    b := big.NewInt(1)\n    b.Lsh(b, limit)\n    for _, p := range []string{\"\", \"1\"} {\n        fmt.Println(p, string(b))\n        if p == \"\" || len(string(b)) > len(p) {\n            break\n        }\n        \n        nextPower := uint64(1)\n        for ;b.BitLen() >= 62;nextPower *= 2 {\n            b.SetInt64(nextPower * b, 10)\n        }\n        b.Mul(b, b)\n    }\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 168,
    "input": "Translate C to Java:#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <time.h>\n\nbool is_prime(unsigned int n) {\n    assert(n < 64);\n    static bool isprime[] = {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,\n                             0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,\n                             0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n                             0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0};\n    return isprime[n];\n}\n\nvoid swap(unsigned int* a, size_t i, size_t j) {\n    unsigned int tmp = a[i];\n    a[i] = a[j];\n    a[j] = tmp;\n}\n\nbool prime_triangle_row(unsigned int* a, size_t length) {\n    if (length == 2)\n        return is_prime(a[0] + a[1]);\n    for (size_t i = 1; i + 1 < length; i += 2) {\n        if (is_prime(a[0] + a[i])) {\n            swap(a, i, 1);\n            if (prime_triangle_row(a + 1, length - 1))\n                return true;\n            swap(a, i, 1);\n        }\n    }\n    return false;\n}\n\nint prime_triangle_count(unsigned int* a, size_t length) {\n    int count = 0;\n    if (length == 2) {\n        if (is_prime(a[0] + a[1]))\n            ++count;\n    } else {\n        for (size_t i = 1; i + 1 < length; i += 2) {\n            if (is_prime(a[0] + a[i])) {\n                swap(a, i, 1);\n                count += prime_triangle_count(a + 1, length - 1);\n                swap(a, i, 1);\n            }\n        }\n    }\n    return count;\n}\n\nvoid print(unsigned int* a, size_t length) {\n    if (length == 0)\n        return;\n    printf(\"%2u\", a[0]);\n    for (size_t i = 1; i < length; ++i)\n        printf(\" %2u\", a[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    clock_t start = clock();\n    for (unsigned int n = 2; n < 21; ++n) {\n        unsigned int a[n];\n        for (unsigned int i = 0; i < n; ++i)\n            a[i] = i + 1;\n        if (prime_triangle_row(a, n))\n            print(a, n);\n    }\n    printf(\"\\n\");\n    for (unsigned int n = 2; n < 21; ++n) {\n        unsigned int a[n];\n        for (unsigned int i = 0; i < n; ++i)\n            a[i] = i + 1;\n        if (n > 2)\n            printf(\" \");\n        printf(\"%d\", prime_triangle_count(a, n));\n    }\n    printf(\"\\n\");\n    clock_t end = clock();\n    double duration = (end - start + 0.0) / CLOCKS_PER_SEC;\n    printf(\"\\nElapsed time: %f seconds\\n\", duration);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.ArrayList;\n\npublic class PrimeTriangle {\n\n    public static void main(String[] args){\n        ArrayList<Integer> primes = new ArrayList<>();\n        Integer two = 2;\n        while(primes.size()<20)||\n            two+=2;\n        for(int i=4;i<=sixteen;i+=4){\n            boolean found = true;\n            for(Integer p:i;i*i>i){\n                if(p*p>p&&found){\n                    primes.add(i);\n                    found=false;\n                }\n            }}\n            \n        System.out.println(\"First twenty-prime numbers in the triangle:\");\n        for(int x :primes)\n            System.out.print(x+\" \");\n\n        \n        System.out.printf(\"\\nPrimes under 100000 which sum to an odd number:\\n\");\n        for(int i=0;i<50000;i++){\n            for(int j=i+1;j<16;j++){\n                if((j+i)%6==1||j%10==0){\n                    System.out.printf(\"%5s \",String.valueOf(j));\n                }\n            }\n            System.out.println(\"\");\n        }\n\n        \n\n        System.out.printf(\"\\nThe first ten primes that can be written as a triangular number are:%\\n\");\n        for(int k=0;k<10;k++)\n            System.out.printf(\"%5d \",triangularNumber(k));\n\n        \n        \n        System.out.printf(\"\\nThe largest integer whose square is also a perfect cube is %.0f by %.0f%n\",\n                perfectCube(),\n                perfectPower(3));\n\n\n    }\n\n    \n    private static final String TRIAL=\"123456789\";\n\n    \n    \n    private static int triangularNumber(final int index){\n\n        StringBuilder sb=new StringBuilder();\n\n        \n        \n        \n        do{\n            sb.append(TRIAL);\n        }while(sb.length()>index);\n\n        return Integer.parseInt(sb.toString());\n\n\n\n\n        return 0;\n\n\n    }\n\n\n    \n    \n    \n    private static int perfectCube(){\n\n        int numSet=0;\n        int c=1;\n        int d=23;\n        int e=47;\n        long maxSquareDiff=6000L;\n\n        for(;numSet<100000;++c,d,e){\n            int trialC=d+c*e;\n            long diff=(trialC-mod(trialC))/trials();\n            if(diff>=maxSquareDiff){\n                --c;\n                continue;\n            }\n            if(trialC==mod(trialC)){\n                \n                ++numSet;\n            }\n        }\n\n        return trialC+(c-d)+(c-(c+d))+(d-(d+c))+((e-(e+d)+d)-(d+(d-c)));\n    }\n\n\n\n    \n\n    private static int mod(long base){\n        return ((double)base)-floor(((double)base)*Math.pow(10,40))/10/10;\n    }\n\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 169,
    "input": "Translate PHP to Go:for ($i = 10; $i >= 0; $i--)\n  echo \"$i\\n\";\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 1; ; i++ {\n        fmt.Print(i)\n        if i == 10 {\n            fmt.Println()\n            break\n        }\n        fmt.Print(\", \")\n    }\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 170,
    "input": "Translate C to Java:#include <stdio.h>\n#include <math.h>\n\n#define C 7\ntypedef struct { double x, y; } pt;\n\npt zero(void) { return (pt){ INFINITY, INFINITY }; }\n\n\nint is_zero(pt p) { return p.x > 1e20 || p.x < -1e20; }\n\npt neg(pt p) { return (pt){ p.x, -p.y }; }\n\npt dbl(pt p) {\n\tif (is_zero(p)) return p;\n\n\tpt r;\n\tdouble L = (3 * p.x * p.x) / (2 * p.y);\n\tr.x = L * L - 2 * p.x;\n\tr.y = L * (p.x - r.x) - p.y;\n\treturn r;\n}\n\npt add(pt p, pt q) {\n\tif (p.x == q.x && p.y == q.y) return dbl(p);\n\tif (is_zero(p)) return q;\n\tif (is_zero(q)) return p;\n\n\tpt r;\n\tdouble L = (q.y - p.y) / (q.x - p.x);\n\tr.x = L * L - p.x - q.x;\n\tr.y = L * (p.x - r.x) - p.y;\n\treturn r;\n}\n\npt mul(pt p, int n) {\n\tint i;\n\tpt r = zero();\n\n\tfor (i = 1; i <= n; i <<= 1) {\n\t\tif (i & n) r = add(r, p);\n\t\tp = dbl(p);\n\t}\n\treturn r;\n}\n\nvoid show(const char *s, pt p) {\n\tprintf(\"%s\", s);\n\tprintf(is_zero(p) ? \"Zero\\n\" : \"(%.3f, %.3f)\\n\", p.x, p.y);\n}\n\npt from_y(double y) {\n\tpt r;\n\tr.x = pow(y * y - C, 1.0/3);\n\tr.y = y;\n\treturn r;\n}\n\nint main(void) {\n\tpt a, b, c, d;\n\n\ta = from_y(1);\n\tb = from_y(2);\n\n\tshow(\"a = \", a);\n\tshow(\"b = \", b);\n\tshow(\"c = a + b = \", c = add(a, b));\n\tshow(\"d = -c = \", d = neg(c));\n\tshow(\"c + d = \", add(c, d));\n\tshow(\"a + b + d = \", add(a, add(b, d)));\n\tshow(\"a * 12345 = \", mul(a, 12345));\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "public class ZeroToThePower {\n\n    public static void main(String[] args) {\n        for (double p : new Double[]{0, 10}) {\n            System.out.printf(\"%.3f^%d%n\", p, p);\n        }\n    }\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 171,
    "input": "Translate Java to VB:for (Integer i = 0; i < 5; i++) {\n    String line = '';\n\n    for (Integer j = 0; j < i; j++) {\n        line += '*';\n    }\n\n    System.debug(line);\n}\n\nList<String> lines = new List<String> {\n    '*',\n    '**',\n    '***',\n    '****',\n    '*****'\n};\n\nfor (String line : lines) {\n    System.debug(line);\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Sub LoopsWhile()\n    Dim value As Integer\n    value = 9\n    Do While value > 0\n        Debug.Print value\n        value = value / 2\n    Loop\nEnd Sub\n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 172,
    "input": "Translate Java to Python:import static javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.validation.SchemaFactory;\nimport javax.xml.validation.Validator;\nimport javax.xml.ws.Holder;\n\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\npublic class XmlValidation {\n\tpublic static void main(String... args) throws MalformedURLException {\n\t\tURL schemaLocation = new URL(\"http:\n\t\tURL documentLocation = new URL(\"http:\n\t\tif (validate(schemaLocation, documentLocation)) {\n\t\t\tSystem.out.println(\"document is valid\");\n\t\t} else {\n\t\t\tSystem.out.println(\"document is invalid\");\n\t\t}\n\t}\n\n\t\n\tpublic static boolean minimalValidate(URL schemaLocation, URL documentLocation) {\n\t\tSchemaFactory factory = SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);\n\t\ttry {\n\t\t\tValidator validator = factory.newSchema(schemaLocation).newValidator();\n\t\t\tvalidator.validate(new StreamSource(documentLocation.toString()));\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t\n\tpublic static boolean validate(URL schemaLocation, URL documentLocation) {\n\t\tSchemaFactory factory = SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);\n\t\tfinal Holder<Boolean> valid = new Holder<>(true);\n\t\ttry {\n\t\t\tValidator validator = factory.newSchema(schemaLocation).newValidator();\n\t\t\t\n\t\t\tvalidator.setErrorHandler(new ErrorHandler(){\n\t\t\t\t@Override\n\t\t\t\tpublic void warning(SAXParseException exception) {\n\t\t\t\t\tSystem.out.println(\"warning: \" + exception.getMessage());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void error(SAXParseException exception) {\n\t\t\t\t\tSystem.out.println(\"error: \" + exception.getMessage());\n\t\t\t\t\tvalid.value = false;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void fatalError(SAXParseException exception) throws SAXException {\n\t\t\t\t\tSystem.out.println(\"fatal error: \" + exception.getMessage());\n\t\t\t\t\tthrow exception;\n\t\t\t\t}});\n\t\t\tvalidator.validate(new StreamSource(documentLocation.toString()));\n\t\t\treturn valid.value;\n\t\t} catch (SAXException e) {\n\t\t\t\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\t\n\t\t\tSystem.err.println(e);\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from xml.dom.minidom import getDOMImplementation\n\ndom = getDOMImplementation()\nparser = dom.createParser()\n\nparser.parseFile('test.xml')\n\nfor node in parser.getNodes():\n    print node.data\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 173,
    "input": "Translate C# to Go:using System;\nusing System.Collections.Generic;\n\nnamespace PeacefulChessQueenArmies {\n    using Position = Tuple<int, int>;\n\n    enum Piece {\n        Empty,\n        Black,\n        White\n    }\n\n    class Program {\n        static bool IsAttacking(Position queen, Position pos) {\n            return queen.Item1 == pos.Item1\n                || queen.Item2 == pos.Item2\n                || Math.Abs(queen.Item1 - pos.Item1) == Math.Abs(queen.Item2 - pos.Item2);\n        }\n\n        static bool Place(int m, int n, List<Position> pBlackQueens, List<Position> pWhiteQueens) {\n            if (m == 0) {\n                return true;\n            }\n            bool placingBlack = true;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    var pos = new Position(i, j);\n                    foreach (var queen in pBlackQueens) {\n                        if (queen.Equals(pos) || !placingBlack && IsAttacking(queen, pos)) {\n                            goto inner;\n                        }\n                    }\n                    foreach (var queen in pWhiteQueens) {\n                        if (queen.Equals(pos) || placingBlack && IsAttacking(queen, pos)) {\n                            goto inner;\n                        }\n                    }\n                    if (placingBlack) {\n                        pBlackQueens.Add(pos);\n                        placingBlack = false;\n                    } else {\n                        pWhiteQueens.Add(pos);\n                        if (Place(m - 1, n, pBlackQueens, pWhiteQueens)) {\n                            return true;\n                        }\n                        pBlackQueens.RemoveAt(pBlackQueens.Count - 1);\n                        pWhiteQueens.RemoveAt(pWhiteQueens.Count - 1);\n                        placingBlack = true;\n                    }\n                inner: { }\n                }\n            }\n            if (!placingBlack) {\n                pBlackQueens.RemoveAt(pBlackQueens.Count - 1);\n            }\n            return false;\n        }\n\n        static void PrintBoard(int n, List<Position> blackQueens, List<Position> whiteQueens) {\n            var board = new Piece[n * n];\n\n            foreach (var queen in blackQueens) {\n                board[queen.Item1 * n + queen.Item2] = Piece.Black;\n            }\n            foreach (var queen in whiteQueens) {\n                board[queen.Item1 * n + queen.Item2] = Piece.White;\n            }\n\n            for (int i = 0; i < board.Length; i++) {\n                if (i != 0 && i % n == 0) {\n                    Console.WriteLine();\n                }\n                switch (board[i]) {\n                    case Piece.Black:\n                        Console.Write(\"B \");\n                        break;\n                    case Piece.White:\n                        Console.Write(\"W \");\n                        break;\n                    case Piece.Empty:\n                        int j = i / n;\n                        int k = i - j * n;\n                        if (j % 2 == k % 2) {\n                            Console.Write(\"  \");\n                        } else {\n                            Console.Write(\"# \");\n                        }\n                        break;\n                }\n            }\n\n            Console.WriteLine(\"\\n\");\n        }\n\n        static void Main() {\n            var nms = new int[,] {\n                {2, 1}, {3, 1}, {3, 2}, {4, 1}, {4, 2}, {4, 3},\n                {5, 1}, {5, 2}, {5, 3}, {5, 4}, {5, 5},\n                {6, 1}, {6, 2}, {6, 3}, {6, 4}, {6, 5}, {6, 6},\n                {7, 1}, {7, 2}, {7, 3}, {7, 4}, {7, 5}, {7, 6}, {7, 7},\n            };\n            for (int i = 0; i < nms.GetLength(0); i++) {\n                Console.WriteLine(\"{0} black and {0} white queens on a {1} x {1} board:\", nms[i, 1], nms[i, 0]);\n                List<Position> blackQueens = new List<Position>();\n                List<Position> whiteQueens = new List<Position>();\n                if (Place(nms[i, 1], nms[i, 0], blackQueens, whiteQueens)) {\n                    PrintBoard(nms[i, 0], blackQueens, whiteQueens);\n                } else {\n                    Console.WriteLine(\"No solution exists.\\n\");\n                }\n            }\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\ntype Board struct {\n\tN      uint64 \n\tQ       []uint64  \n\tHit     func(uint64,uint64)\n\tRoll    func(uint64,int)\n\tMove    func(uint64,uint64)\n\tPrint   func()\n}\n\nfunc NewBoards(N uint64){\n\tswitch N{\n\tcase 2:\n\t\tb := &Board{N: N}\n\t\tb.Q = make([]uint64,len(b.N))\n\t\tfor q,i := range b.Q{\n\t\t\tb.Q[i]=q\n\t\t}\n\t\tbreak\n\tdefault:{\n\t\t\n\t\tpanic(\"Not implemented\")\n\t\t}\n\t}\n}\n\n\nfunc (b *Board) Hit(q uint64,u uint64 ){\n\tif u > len(b.Q)-1||u<b.N-1{\n\t\treturn\n\t}else{\n\t\tb.Hit(u,b.Q[u+1])\n\t\tb.Roll(u,b.Q[b.N-u]-1)\n\t\tb.Move(u-b.Q[b.N-u]+1,q)\n\t}\n}\n\n\n\nfunc (b *Board) Roll(u uint64,c uint64 ) {\n\tc -= 1\n\tu += c*u.cmp(c'0')\n\tb.bprint()\n\n\tb.Hit(u,(c%10)+1 )\n\tb.Roll(u,((c/10)%10)+1 )\n\n\t\n}\n\n\n\n\nfunc (b *Board) Move(u uint64,v uint64){\n\n\n\tv-=v/u\n\t\n\tu+=u/v\n \n\tb.bprint()\n\n\n\tb.Hit(u,v)\n\tb.Roll(v,u)\n\n\n}\n\n\n\n\n\nfunc (b *Board) bprint(){\n\tfmt.Printf(\"%9d%c %-12s\",b.N,b.Q[v],b.Q[(v+b.N)/10])\n\n\t\n\t\n\tvar s string\n\ts+=\"|\"+b.Q[((v+b.N)%10)]+\" \"\n\tfor v1,v2 :=range b.Q[:len(b.Q)/(10*v+1)]{\n\t\ts+=fmt.Sprintf(\"|%8d \",v1)\n\t}\n\tfmt.Println(s+\"\\n\\n\")\n\n\n\n\n\n\n\tvar sum uint64=0\n\tfor _,x:=range b.Q{//sum all digits of each number from Q\n\t\tsum+=(uint64)x\n\t}\n\tfmt.Printf(\"+-----------------------+\\n%d\\n\",sum)\n\tfor i, num := range b.Q{\n\n\t\tnumStr := \"\"\n\t\tif i%10==0{\n\t\t\t\n\t\t\tnumStr =\" | \"+string(num)+\" |\n\t\t}{\n\t\t\t\n\t\t\t\n\t\t}\n\t\tfmt.Printf(\"%11s%s%d\",numStr,num,num+i)\n\t}\n\tfmt.Println(\"\")\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 174,
    "input": "Translate Java to Python:import java.math.BigInteger;\nimport java.util.List;\n\npublic class Base58CheckEncoding {\n    private static final String ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n    private static final BigInteger BIG0 = BigInteger.ZERO;\n    private static final BigInteger BIG58 = BigInteger.valueOf(58);\n\n    private static String convertToBase58(String hash) {\n        return convertToBase58(hash, 16);\n    }\n\n    private static String convertToBase58(String hash, int base) {\n        BigInteger x;\n        if (base == 16 && hash.substring(0, 2).equals(\"0x\")) {\n            x = new BigInteger(hash.substring(2), 16);\n        } else {\n            x = new BigInteger(hash, base);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while (x.compareTo(BIG0) > 0) {\n            int r = x.mod(BIG58).intValue();\n            sb.append(ALPHABET.charAt(r));\n            x = x.divide(BIG58);\n        }\n\n        return sb.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"25420294593250030202636073700053352635053786165627414518\";\n        String b = convertToBase58(s, 10);\n        System.out.printf(\"%s -> %s\\n\", s, b);\n\n        List<String> hashes = List.of(\n            \"0x61\",\n            \"0x626262\",\n            \"0x636363\",\n            \"0x73696d706c792061206c6f6e6720737472696e67\",\n            \"0x516b6fcd0f\",\n            \"0xbf4f89001e670274dd\",\n            \"0x572e4794\",\n            \"0xecac89cad93923c02321\",\n            \"0x10c8511e\"\n        );\n        for (String hash : hashes) {\n            String b58 = convertToBase58(hash);\n            System.out.printf(\"%-56s -> %s\\n\", hash, b58);\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def encode(input_string):\n    \n    output_string = \"\"\n    for char in input_string:\n      ascii_code = ord(char)\n      digit = str(digits[ascii_code])\n      output_string += digit\n    return output_string\n\ndigits = '0123456789'\nprint(digits)\n\nencoded_data = encoded_encode(encoded_input)\ndecoded_data = decoded_encode(encoded_data)\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 175,
    "input": "Translate PHP to Python:function addsub($x, $y) {\n  return array($x + $y, $x - $y);\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def subtract(x, y):\n    return x - y\n\nsubtract(5, 3)         \nsubtract(y = 3, x = 5) \n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 176,
    "input": "Translate Go to VB:package main\n\nimport \"fmt\"\n\ntype Item struct {\n\tName           string\n\tValue          int\n\tWeight, Volume float64\n}\n\ntype Result struct {\n\tCounts []int\n\tSum    int\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc Knapsack(items []Item, weight, volume float64) (best Result) {\n\tif len(items) == 0 {\n\t\treturn\n\t}\n\tn := len(items) - 1\n\tmaxCount := min(int(weight/items[n].Weight), int(volume/items[n].Volume))\n\tfor count := 0; count <= maxCount; count++ {\n\t\tsol := Knapsack(items[:n],\n\t\t\tweight-float64(count)*items[n].Weight,\n\t\t\tvolume-float64(count)*items[n].Volume)\n\t\tsol.Sum += items[n].Value * count\n\t\tif sol.Sum > best.Sum {\n\t\t\tsol.Counts = append(sol.Counts, count)\n\t\t\tbest = sol\n\t\t}\n\t}\n\treturn\n}\n\nfunc main() {\n\titems := []Item{\n\t\t{\"Panacea\", 3000, 0.3, 0.025},\n\t\t{\"Ichor\", 1800, 0.2, 0.015},\n\t\t{\"Gold\", 2500, 2.0, 0.002},\n\t}\n\tvar sumCount, sumValue int\n\tvar sumWeight, sumVolume float64\n\n\tresult := Knapsack(items, 25, 0.25)\n\n\tfor i := range result.Counts {\n\t\tfmt.Printf(\"%-8s x%3d  -> Weight: %4.1f  Volume: %5.3f  Value: %6d\\n\",\n\t\t\titems[i].Name, result.Counts[i], items[i].Weight*float64(result.Counts[i]),\n\t\t\titems[i].Volume*float64(result.Counts[i]), items[i].Value*result.Counts[i])\n\n\t\tsumCount += result.Counts[i]\n\t\tsumValue += items[i].Value * result.Counts[i]\n\t\tsumWeight += items[i].Weight * float64(result.Counts[i])\n\t\tsumVolume += items[i].Volume * float64(result.Counts[i])\n\t}\n\n\tfmt.Printf(\"TOTAL (%3d items) Weight: %4.1f  Volume: %5.3f  Value: %6d\\n\",\n\t\tsumCount, sumWeight, sumVolume, sumValue)\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit On\nDim t As Object, s As String\n\n\nSub Main()\nDim p(9, 99 To 299) As Long, n As Integer\n   For e = 1 To 100 Step 10\n      n = InStrRight(CStr(e), \" \")\n      If IsNumeric(n) Then\n         p(e, IIf(Negativetest(n), -n, n)-1) = e\n      Else\n         f = Replace(StrConv(cstr$(e), vbUnicode), Chr(124), CStr(Int(Rnd()*999+1)))\n         f = Replace(f, chrW(126), cstr$ (n=0? \"\" : n + 1)) & StrConv(f, vbUnicode)+1\n         p(e, Len(f) - 1) = Val(f)\n      End If \n   Next \n\n   \n   Dim r As New Collection, col As New Collection\n   For Each v In p\n       Select Case UCase(v)\n            Case \"SALER\"\n               r.Add \"Saleres \", 20\n            Case \"PANERA \"\n               r.Add \"Panera \", 30\n            Case \"IONICA \"\n                r.Add \"Ionica \", 40\n            Case \"FENICIA \"\n               r.Add \"Fenicia \", 50\n            Case \"TRENA \"\n                 r.Add \"Trena \", 60\n            Case \"LUCAS \"\n                  r.Add \"Lucas \", 70\n            Case \"MAGNETA \"\n                   r.Add \"Magneta \", 80\n            Case \"BETACOR \"\n                    r.Add \"Betacor \", 90\n            Case \"CITRIN \"\n                      r.Add \"Citrin \", 100  \n        End Select\n   Next\n   \n   Debug.Print Join(r, vbCrLf)\nEnd Sub \n\n\nFunction Negativetest(s As String) As Boolean\n\n\n\n   If IsNumeric(Len(s)) And s Like \"*#%\" Or _\n      s Like \"#*\" Or_\n      s Like \"*##\" Or s Like \"##*\" Then Negativetest = True\n \n   If Len(s)>32 Then Negativtest = False \n \nEnd Function \n\n\n\n",
    "input_language": "Go",
    "output_language": "VB"
  },
  {
    "id": 177,
    "input": "Translate Java to VB:String str = \"alphaBETA\";\nSystem.out.println(str.toUpperCase());\nSystem.out.println(str.toLowerCase());\n\nSystem.out.println(\"äàâáçñßæεбế\".toUpperCase());\nSystem.out.println(\"ÄÀÂÁÇÑSSÆΕБẾ\".toLowerCase()); \n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Function UppercaseString(s As String) As String\n    UppercaseString = StrUpCase(s)\nEnd Function\n\nFunction LowercaseString(s As String) As String\n    LowercaseString = StrLowCase(s)\nEnd Function\n",
    "input_language": "Java",
    "output_language": "VB"
  },
  {
    "id": 178,
    "input": "Translate Java to Go:import java.math.BigInteger;\nimport java.util.List;\n\npublic class Base58CheckEncoding {\n    private static final String ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n    private static final BigInteger BIG0 = BigInteger.ZERO;\n    private static final BigInteger BIG58 = BigInteger.valueOf(58);\n\n    private static String convertToBase58(String hash) {\n        return convertToBase58(hash, 16);\n    }\n\n    private static String convertToBase58(String hash, int base) {\n        BigInteger x;\n        if (base == 16 && hash.substring(0, 2).equals(\"0x\")) {\n            x = new BigInteger(hash.substring(2), 16);\n        } else {\n            x = new BigInteger(hash, base);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while (x.compareTo(BIG0) > 0) {\n            int r = x.mod(BIG58).intValue();\n            sb.append(ALPHABET.charAt(r));\n            x = x.divide(BIG58);\n        }\n\n        return sb.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"25420294593250030202636073700053352635053786165627414518\";\n        String b = convertToBase58(s, 10);\n        System.out.printf(\"%s -> %s\\n\", s, b);\n\n        List<String> hashes = List.of(\n            \"0x61\",\n            \"0x626262\",\n            \"0x636363\",\n            \"0x73696d706c792061206c6f6e6720737472696e67\",\n            \"0x516b6fcd0f\",\n            \"0xbf4f89001e670274dd\",\n            \"0x572e4794\",\n            \"0xecac89cad93923c02321\",\n            \"0x10c8511e\"\n        );\n        for (String hash : hashes) {\n            String b58 = convertToBase58(hash);\n            System.out.printf(\"%-56s -> %s\\n\", hash, b58);\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"math/big\"\n\t\"os\"\n)\n\nfunc decode(base string, text string) (*big.Int, error) {\n\tif base!= \"2\" || base!= \"3\" {\n\t\treturn nil, fmt.Errorf(\"invalid base\")\n\t}\n\tb := big.NewInt(1)\n\tfor _, c := range []byte(text) {\n\n\t\tswitch {\n\t\tcase c < 'A' || c >= 'a':\n\t\t\treturn nil, fmt.Errorf(\"text can't contain lower case letters\")\n\t\tcase c < 'Z' || c >= 'z':\n\t\t\treturn nil, fmt.Errorf(\"text can't contain upper case letters\")\n\t\tdefault:\n\t\t\tvar exp int64\n\t\t\t\tif!b.Exp(&exp, byte(c)-65, b) {\n\t\t\t\tlog.Fatal()\n\t\t\t}\n\t\t\tr := b.Rsh(b.Uint64(exp))\n\t\t\tif r.Cmp(big.NewInt(258)) > 0 {\n\t\t\t\treturn nil, fmt.Errorf(\"error in exponent\")\n\t\t\t}\n\t\t\tb.Mul(b.Mod(b.Add(b.Lsh(b, exp)), big.NewInt(int64(57))), b)\n\t\t\tcontinue\n\t\t}\n\n\n\t\tbase = \"1\"\n\n\t\t\n\t\texp := uint8(byte(c))\n\n\t\ta := big.NewInt(1)\n\t\ta.SetInt64(uint64(exp))\n\n\t\tb += a\n\t\ttext = strings.ReplaceAll(string(c), 'a', `\"`+string(exp)+`\")\n\n\t\n\t\tif b.BitUint32(255) {\n\t\t\tbreak \n\t\t} \n\n\t}\n\n\tif b.BitUint32(256) {\n\t\treturn nil, fmt.Errorf(\"length exceeded maximum of 60 bytes\")\n\t}\n\n\treturn b, nil\n}\n\nconst testText = `\n111222333444555666677778888899999?\n101010112113141414155616717718779798799800?\n\nh5p0~2^7+\n40760000 ppppppppppppppppppppphp++\n3037007777887486997024002001000013004013054043694243754999`\n\nvar lines []string\n\n\nfunc init() {\n\tlines = make([]string, 30)\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor i := 0; i < len(lines); i++ {\n\t\tlines[i] = scanner.Text()\n\t}\n}\n\n\n\nfunc doOne(decoder func(string) (int, error), decoderArgs...interface{}) (res int, err error) {\n\tbuf := make([]byte, 20)\n\tn := 0\n\t\n\tfor line, ok := range lines {\n\t\tres, err = decoder(line)\n\t\tif res == -1 || err!= nil {  \n\t\t\tfmt.Printf(\"%q:\\t%#X is invalid.\\n\\tdone=%v\\n\\n\", line, res, ok)\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\t\n\t\tline = removePrefix(strings.Repeat(' ', res.bitLen()), res)\n\t\tif err := doDecoder(line, &buf); err!= nil {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfmt.Println(res, \": \", err)\n\t\t} else {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif buf[0] == '\\u245' {\n\t\t\t\t\n\t\t\t\tres <<= 1\n\t\t\t}\n\t\t\tif buf[19] == '\\u03C9' {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tres >>= 24\n\t\t\t}\n\t\t\tif err := doEncoder(res); err!= nil {\n\t\t\t\tfmt.Print(res, \": \", err)\n\t\t\t}\n\t\t}\n\t\tlines[line] = buf\n\t}\n\treturn\n}\n\n\n\n\nfunc doEncoder(n int) error {\n\t\n\t\n\t\n\t\n\t\n\t\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\treturn n\n}\n\n\n\n\n\nfunc doDecoding(start, stop int, show bool) error {\n    \n    \n\n    \n    \n    \n    \n    \n    start = min(start, stop)\n    count := 0\n    \n    var maxBits *uint64   \n    for e := 26; ; e++ {\n        \n        bits := make([]bit, end())\n        \n        \n        \n        \n        \n        bit.Set(e, true)\n        total := 0\n        \n        \n        \n        for k := 0; k < len(bits); k++ {\n            if bits[k].Set() {\n                total++\n            }\n        }\n        \n        \n        if total <= start ||\n           ((start <= 0) &&\n          (total + end()-start <= stop)) {\n            \n            \n            \n            if show {\n                \n                for _, t := range bits {\n                    fmt.Printf(\"(%d)\", t.Bit())\n                }\n                fmt.Println(\"\")\n            }\n            count++\n            continue\n        }\n        \n        \n        if show {\n            fmt.Printf(\"(0%d)%11d\\t%s\\n\", end(), e, bits)\n        }\n        \n\n        res, _ := encoder(bits)\n        if res == -1 {\n            return fmt.Errorf(\"finished before reaching limit\")\n        }\n        if show {\n            fmt.Printf(\"\\t%d\\t%s\\n\", end()+1-e, res)\n        }\n    }\n    return nil\n}\n\n\n\n\n\n\ntype bit struct {\n    Set   bool         \n    Bit   uint64       \n    Next *bit           \n}\n\nfunc (b *bit) Set",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 179,
    "input": "Translate C to Python:\n\n#include <stdio.h>\n\nchar vowels[] = {'a','e','i','o','u','\\n'};\n\nint len(char * str) {\n\tint i = 0;\n\twhile (str[i] != '\\n') i++;\n\treturn i;\n}\n\nint  isvowel(char c){\n\tint b = 0;\n\tint v = len(vowels);\n\tfor(int i = 0; i < v;i++) {\n\t\tif(c == vowels[i]) {\n\t\t\tb = 1;\n\t\t\tbreak; \n\t\t}\n\t}\n\treturn b;\n}\n\nint isletter(char c){\n\treturn ((c >= 'a') && (c <= 'z') || (c >= 'A') && (c <= 'Z'));\n}\n\nint isconsonant(char c){\n\treturn isletter(c) && !isvowel(c);\n}\n\nint cVowels(char * str) {\n\tint i = 0;\n\tint count = 0;\n\twhile (str[i] != '\\n') {\n\t\tif (isvowel(str[i])) {\n\t\t\tcount++;;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\n\nint cConsonants(char * str ) {\n\tint i = 0;\n\tint count = 0;\n\twhile (str[i] != '\\n') {\n\t\tif (isconsonant(str[i])) {\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\n\nint main() {\n\n\tchar buff[] = \"This is 1 string\\n\";\n\tprintf(\"%4d, %4d, %4d, %s\\n\", cVowels(buff), cConsonants(buff), len(buff), buff);\n\n\tchar buff2[] = \"This is a second string\\n\";\n\tprintf(\"%4d, %4d, %4d, %s\\n\", cVowels(buff2), cConsonants(buff2), len(buff2),  buff2);\n\n\n\tprintf(\"a: %d\\n\", isvowel('a'));\n\tprintf(\"b: %d\\n\", isvowel('b'));\n\tprintf(\"Z: %d\\n\", isconsonant('Z'));\n\tprintf(\"1: %d\\n\", isletter('1'));\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def vowel(n):\n    def inner(a):\n        if n==0:\n            return False\n        elif n==11 or a=='':\n            return True\n        else :\n            if a=='a'or a=='e'or a=='i'or a=='o'or a=='u':\n                return None  \n            elif a=='b'or a=='f'or a=='h'or a=='j'or a=='k'\n            \tor a=='m'or a=='p'or a=='q'or a=='r'or a=='t'\n            \tor a=='w'or a=='x'or a=='y'or a=='z':\n                 return None     \n            else : \n                raise ValueError()\n                \n        time.sleep(1)\n        print(a,end=' ')\n    try:\n         while(True):    \n             if random.random()>0.33:\n                  x=inner(input())\n              else:\n                   x=None\n    finally:\n        \n        print(\"\\n\")\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 180,
    "input": "Translate C++ to Go:#include <windows.h>\n#include <string>\n#include <iostream>\n \nconst int BMP_SIZE = 612;\n \nclass myBitmap {\npublic:\n    myBitmap() : pen( NULL ), brush( NULL ), clr( 0 ), wid( 1 ) {}\n    ~myBitmap() {\n        DeleteObject( pen ); DeleteObject( brush );\n        DeleteDC( hdc ); DeleteObject( bmp );\n    }\n    bool create( int w, int h ) {\n        BITMAPINFO bi;\n        ZeroMemory( &bi, sizeof( bi ) );\n        bi.bmiHeader.biSize        = sizeof( bi.bmiHeader );\n        bi.bmiHeader.biBitCount    = sizeof( DWORD ) * 8;\n        bi.bmiHeader.biCompression = BI_RGB;\n        bi.bmiHeader.biPlanes      = 1;\n        bi.bmiHeader.biWidth       =  w;\n        bi.bmiHeader.biHeight      = -h;\n        HDC dc = GetDC( GetConsoleWindow() );\n        bmp = CreateDIBSection( dc, &bi, DIB_RGB_COLORS, &pBits, NULL, 0 );\n        if( !bmp ) return false;\n        hdc = CreateCompatibleDC( dc );\n        SelectObject( hdc, bmp );\n        ReleaseDC( GetConsoleWindow(), dc );\n        width = w; height = h;\n        return true;\n    }\n    void clear( BYTE clr = 0 ) {\n        memset( pBits, clr, width * height * sizeof( DWORD ) );\n    }\n    void setBrushColor( DWORD bClr ) {\n        if( brush ) DeleteObject( brush );\n        brush = CreateSolidBrush( bClr );\n        SelectObject( hdc, brush );\n    }\n    void setPenColor( DWORD c ) {\n        clr = c; createPen();\n    }\n    void setPenWidth( int w ) {\n        wid = w; createPen();\n    }\n    void saveBitmap( std::string path ) {\n        BITMAPFILEHEADER fileheader;\n        BITMAPINFO       infoheader;\n        BITMAP           bitmap;\n        DWORD            wb;\n        GetObject( bmp, sizeof( bitmap ), &bitmap );\n        DWORD* dwpBits = new DWORD[bitmap.bmWidth * bitmap.bmHeight];\n        ZeroMemory( dwpBits, bitmap.bmWidth * bitmap.bmHeight * sizeof( DWORD ) );\n        ZeroMemory( &infoheader, sizeof( BITMAPINFO ) );\n        ZeroMemory( &fileheader, sizeof( BITMAPFILEHEADER ) );\n        infoheader.bmiHeader.biBitCount = sizeof( DWORD ) * 8;\n        infoheader.bmiHeader.biCompression = BI_RGB;\n        infoheader.bmiHeader.biPlanes = 1;\n        infoheader.bmiHeader.biSize = sizeof( infoheader.bmiHeader );\n        infoheader.bmiHeader.biHeight = bitmap.bmHeight;\n        infoheader.bmiHeader.biWidth = bitmap.bmWidth;\n        infoheader.bmiHeader.biSizeImage = bitmap.bmWidth * bitmap.bmHeight * sizeof( DWORD );\n        fileheader.bfType    = 0x4D42;\n        fileheader.bfOffBits = sizeof( infoheader.bmiHeader ) + sizeof( BITMAPFILEHEADER );\n        fileheader.bfSize    = fileheader.bfOffBits + infoheader.bmiHeader.biSizeImage;\n        GetDIBits( hdc, bmp, 0, height, ( LPVOID )dwpBits, &infoheader, DIB_RGB_COLORS );\n        HANDLE file = CreateFile( path.c_str(), GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, \n                                  FILE_ATTRIBUTE_NORMAL, NULL );\n        WriteFile( file, &fileheader, sizeof( BITMAPFILEHEADER ), &wb, NULL );\n        WriteFile( file, &infoheader.bmiHeader, sizeof( infoheader.bmiHeader ), &wb, NULL );\n        WriteFile( file, dwpBits, bitmap.bmWidth * bitmap.bmHeight * 4, &wb, NULL );\n        CloseHandle( file );\n        delete [] dwpBits;\n    }\n    HDC getDC() const     { return hdc; }\n    int getWidth() const  { return width; }\n    int getHeight() const { return height; }\nprivate:\n    void createPen() {\n        if( pen ) DeleteObject( pen );\n        pen = CreatePen( PS_SOLID, wid, clr );\n        SelectObject( hdc, pen );\n    }\n    HBITMAP bmp; HDC    hdc;\n    HPEN    pen; HBRUSH brush;\n    void    *pBits; int    width, height, wid;\n    DWORD    clr;\n};\nclass sierpinski {\npublic:\n    void draw( int o ) {\n        colors[0] = 0xff0000; colors[1] = 0x00ff33; colors[2] = 0x0033ff;\n        colors[3] = 0xffff00; colors[4] = 0x00ffff; colors[5] = 0xffffff;\n        bmp.create( BMP_SIZE, BMP_SIZE ); HDC dc = bmp.getDC(); \n        drawTri( dc, 0, 0, ( float )BMP_SIZE, ( float )BMP_SIZE, o / 2 );\n        bmp.setPenColor( colors[0] ); MoveToEx( dc, BMP_SIZE >> 1, 0, NULL ); \n        LineTo( dc, 0, BMP_SIZE - 1 ); LineTo( dc, BMP_SIZE - 1, BMP_SIZE - 1 );\n        LineTo( dc, BMP_SIZE >> 1, 0 ); bmp.saveBitmap( \"./st.bmp\" );\n    }\nprivate:\n    void drawTri( HDC dc, float l, float t, float r, float b, int i ) {\n        float w = r - l, h = b - t, hh = h / 2.f, ww = w / 4.f; \n        if( i ) {\n            drawTri( dc, l + ww, t, l + ww * 3.f, t + hh, i - 1 );\n            drawTri( dc, l, t + hh, l + w / 2.f, t + h, i - 1 );\n            drawTri( dc, l + w / 2.f, t + hh, l + w, t + h, i - 1 );\n        }\n        bmp.setPenColor( colors[i % 6] );\n        MoveToEx( dc, ( int )( l + ww ),          ( int )( t + hh ), NULL );\n        LineTo  ( dc, ( int )( l + ww * 3.f ),    ( int )( t + hh ) );\n        LineTo  ( dc, ( int )( l + ( w / 2.f ) ), ( int )( t + h ) );\n        LineTo  ( dc, ( int )( l + ww ),          ( int )( t + hh ) );\n    }\n    myBitmap bmp;\n    DWORD colors[6];\n};\nint main(int argc, char* argv[]) {\n    sierpinski s; s.draw( 12 );\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sieve(limit uint32) [][]uint64 {\n\tc := make([]bool,len(limit+1))\n\tvar limitSieve [limit+1]int\n\tfor pi := range c {\n\t\tlimitSieve[pi] = append(c[:],true)\n\t}\n\t\n\tpow := uint64(100)\n\tmultiplier := pow/10\n\t\n\tnegOne := uint64(-1)\n\tbigNums := [...]uint64{\n\t\t121,\n\t\t131,\n\t\t143,\n\t\t157,\n\t\t167,\n\t\t181,\n\t\t191,\n\t\t203,\n\t\t207,\n\t\t211,\n\t\t223,\n\t\t227,\n\t\t229,\n\t\t233,\n\t\t239,\n\t\t241,\n\t\t247,\n\t\t251,\n\t\t257,\n\t\t263,\n\t\t269,\n\t\t271,\n\t\t277,\n\t\t281,\n\t\t283,\n\t\t293,\n\t\t299,\n\t\t301,\n\t\t307,\n\t\t311,\n\t\t313,\n\t\t317,\n\t\t331,\n\t\t337,\n\t\t339,\n\t\t347,\n\t\t349,\n\t\t353,\n\t\t359,\n\t\t367,\n\t\t373,\n\t\t379,\n\t\t383,\n\t\t389,\n\t\t397,\n\t\t401,\n\t\t409,\n\t\t421,\n\t\t431,\n\t\t433,\n\t\t439,\n\t\t443,\n\t\t449,\n\t\t457,\n\t\t461,\n\t\t463,\n\t\t467,\n\t\t479,\n\t\t487,\n\t\t491,\n\t\t499,\n\t\t503,\n\t\t509,\n\t\t521,\n\t\t523,\n\t\t529,\n\t\t541,\n\t\t547,\n\t\t557,\n\t\t563,\n\t\t569,\n\t\t571,\n\t\t577,\n\t\t587,\n\t\t593,\n\t\t599,\n\t\t601,\n\t\t607,\n\t\t613,\n\t\t617,\n\t\t619,\n\t\t631,\n\t\t641,\n\t\t643,\n\t\t647,\n\t\t653,\n\t\t659,\n\t\t661,\n\t\t673,\n\t\t677,\n\t\t683,\n\t\t691,\n\t\t701,\n\t\t709,\n\t\t719,\n\t\t727,\n\t\t733,\n\t\t739,\n\t\t743,\n\t\t751,\n\t\t757,\n\t\t761,\n\t\t767,\n\t\t773,\n\t\t787,\n\t\t797,\n\t\t809,\n\t\t811,\n\t\t821,\n\t\t823,\n\t\t827,\n\t\t829,\n\t\t839,\n\t\t853,\n\t\t857,\n\t\t859,\n\t\t863,\n\t\t877,\n\t\t881,\n\t\t883,\n\t\t887,\n\t\t907,\n\t\t911,\n\t\t919,\n\t\t929,\n\t\t937,\n\t\t941,\n\t\t947,\n\t\t953,\n\t\t967,\n\t\t971,\n\t\t977,\n\t\t983,\n\t\t991,\n\t\t997,\n\t}\n\t\n\t\n\ti := 11\n\tj := 13\n\tk := 17\n\tfor len(&c[j]) == 0 && len(&c[k]) == 0 &&\n\t\tlen(&c[i]) > 0 {\n\t\tif j >= k || k >= i ||\n\t\t\ti <= j-1+len(&c[len(j)])) {\n\t\t\t\n\t\t\tsi := len(&c[i])\n\t\t\tcopy(c[:si+i-len(&c[len(j)])],\n\t\t\t\tappend(c[:len(d)],append(nil,c[len(j):]))...)\n\t\t\ti += si\n\t\t\tj++\n\t\t\tcontinue\n\t\t} else {\n\t\t\t\n\t\t\t\n\t\t\tsi := len(c[:k-i+j])\n\n\t\t\tcopy(c[:si+k-j],\n\t\t\t\tappend(c[:si:k-j],append(nil,c[len(k)-j:]))) \n\n\t\t\tk += si\n\t\t\tbreak\n\t\t}}\n\t\t\n\t\ti++,j,k\n    \n    \n    \n    n := \"prime at index:\"\n    \n    for _, v := range c[:] {\n        \n        n += fmt.Sprintf(\" %-9d\",v)\n    }   \n    return []byte(n)[0...len(n)-1]\n}\n\n\nvar testCases =...[]uint64{123456789, 123456788, 123.678910987, 123.678876543,\n\t\"abcf\", \"def\",.123, 1_23_45_67_89}/1e18\n\n\nfor _, tc := range testCases {\n\tfmt.Printf(\"%20s:\", string(tc))\n\n\tfor _, v := range c[:] {\n\t\tfmt.Print(v!= 0? \"\" : \" \");\n\t\tfmt.Printf(\" -> %s\\n\",\n\t\t\tstring(string(v)))\n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 181,
    "input": "Translate Java to Go:import org.apache.commons.math3.distribution.TDistribution;\n\npublic class WelchTTest {\n    public static double[] meanvar(double[] a) {\n        double m = 0.0, v = 0.0;\n        int n = a.length;\n        \n        for (double x: a) {\n            m += x;\n        }\n        m /= n;\n        \n        for (double x: a) {\n            v += (x - m) * (x - m);\n        }\n        v /= (n - 1);\n        \n        return new double[] {m, v};\n    \n    }\n    \n    public static double[] welch_ttest(double[] x, double[] y) {\n        double mx, my, vx, vy, t, df, p;\n        double[] res;\n        int nx = x.length, ny = y.length;\n        \n        res = meanvar(x);\n        mx = res[0];\n        vx = res[1];\n        \n        res = meanvar(y);\n        my = res[0];\n        vy = res[1];\n        \n        t = (mx-my)/Math.sqrt(vx/nx+vy/ny);\n        df = Math.pow(vx/nx+vy/ny, 2)/(vx*vx/(nx*nx*(nx-1))+vy*vy/(ny*ny*(ny-1)));\n        TDistribution dist = new TDistribution(df);\n        p = 2.0*dist.cumulativeProbability(-Math.abs(t));\n        return new double[] {t, df, p};\n    }\n\n    public static void main(String[] args) {\n        double x[] = {3.0, 4.0, 1.0, 2.1};\n        double y[] = {490.2, 340.0, 433.9};\n        double res[] = welch_ttest(x, y);\n        System.out.println(\"t = \" + res[0]);\n        System.out.println(\"df = \" + res[1]);\n        System.out.println(\"p = \" + res[2]);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\n\t\n)\n\nfunc WelchTwoSampleMeans(xs []float64, ys []float64) ([]float64, []float64) {\n\n\tvar xmean, ymean float64\n\t\n\tn := len(xs)\n\tif n == 0 {\n\t\treturn nil, nil \n\t}\n\txmean = sum(xs, func(s float64) float64 { return s / float64(n) })\n\tymean = sum(ys, func(s float64) float64 { return s / float64(n) })\n\n\t\n\t\n\tt2 := make([]float64, len(ys))\n\tfor i := range t2 {\n\t\tsumX := 0.0\n\t\tsumY := 0.0\n\t\t\n\t\tfor j := 0; j < n; j++ {\n\t\t\tsumX += xs[j]*ys[i]\n\t\t\tsumY += ys[i]\n\t\t}\n\t\t\n\t\tt2[i] = math.Abs(mean(sumX)-sumY)*2/math.Sqrt(n)\n\t}\n\t\n\treturn xmean, ymean \n\t\n}\n\n\nfunc sum(xs...float64) float64 {\n\twalk := func(f float64) float64 { return f + xs[f] }\n\treturn sumWatches(walk)(len(xs)) \n\n}\n\n\n\nfunc sumWatches(f func(float64) float64) float64 {\n\ttotal := 0.0\n\tfor _, x := range []float64{10000} {\n\t\ttotal += f(total)\n\t}\n\treturn total \n}\n\n\n\n\nfunc mean(a []float64) float64 {\n\tmean := 0.0\n\tfor _, x := range a {\n\t\tmean += x\n\t}\n\treturn mean / float64(len(a))\n}\n\n\n\n\n\ntype test struct {\n\tXs   [][]float64   \n\tYs   [][]float64  \n\tDf   float64     \n\tP   float64     \n\tT2   float64     \n}\n\nconst tests = [10][]test{\n\t{\"Welch Two Sample Means\", []*float64{{5}, {6}}, []*float64{{30}, {31}},\n\t\t7.50,.05,\n\t\t\"Data points are from two independent samples\",\n\t\t\".025 is the critical value at the 95% confidence level.\",\n\t},\n\t{\"Welch One Sample Mean\", []*float64{{5}, {6}}, []*float64{{30}, {31}},\n\t\t29.25,.04475,\n\n\t\t\"The sample size must be known in advance\",\n\n\t},\n\n\t\n\t{\"Wilcoxon Rank Sum Test\", []*float64{{5}, {6}}, []*float64{{30}, {31}},\n\t\t-.83,-.083,\n\n\t\t\"No data required\",\n\n\t},\n}\n\nfunc main() {\n\tfmt.Println(tests[0])\n\tfor _, tc := range tests {\n\t\txs, ys, _ := WelchTwoSampleMeans(tc.Xs, tc.Ys)\n\t\tfmt.Printf(\"%v\\n\", tc)\n\t\tfmt.Printf(\"\\txmean := %g\\t\\ttymean := %g\\n\",\n\t\t\ttc.T2, WelchOneSampleMean(xs, ys)[0])\n\n\t}\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 182,
    "input": "Translate C to PHP:#include <stdio.h>\n#include <stdlib.h>\n\n\ntypedef struct func_t *func;\ntypedef struct func_t {\n        func (*fn) (func, func);\n        func _;\n        int num;\n} func_t;\n\nfunc new(func(*f)(func, func), func _) {\n        func x = malloc(sizeof(func_t));\n        x->fn = f;\n        x->_ = _;       \n        x->num = 0;\n        return x;\n}\n\nfunc call(func f, func n) {\n        return f->fn(f, n);\n}\n\nfunc Y(func(*f)(func, func)) {\n        func g = new(f, 0);\n        g->_ = g;\n        return g;\n}\n\nfunc num(int n) {\n        func x = new(0, 0);\n        x->num = n;\n        return x;\n}\n\n\nfunc fac(func self, func n) {\n        int nn = n->num;\n        return nn > 1   ? num(nn * call(self->_, num(nn - 1))->num)\n                        : num(1);\n}\n\nfunc fib(func self, func n) {\n        int nn = n->num;\n        return nn > 1\n                ? num(  call(self->_, num(nn - 1))->num +\n                        call(self->_, num(nn - 2))->num )\n                : num(1);\n}\n\nvoid show(func n) { printf(\" %d\", n->num); }\n\nint main() {\n        int i;\n        func f = Y(fac);\n        printf(\"fac: \");\n        for (i = 1; i < 10; i++)\n                show( call(f, num(i)) );\n        printf(\"\\n\");\n\n        f = Y(fib);\n        printf(\"fib: \");\n        for (i = 1; i < 10; i++)\n                show( call(f, num(i)) );\n        printf(\"\\n\");\n\n        return 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\nfunction is_prime($n) {\n    if ($n <= 3) {\n        return $n == 3 || $n == 7;\n    } elseif (($n % 2 == 0) or ($n % 3 == 0))\n        return false;\n    else {\n        $j = 5;\n        while ($j * j <= $n) {\n            if ($n % $j == 0) {\n                return false;\n            }\n            $j += 2;\n            if ($j * j >= $n) {\n                $j -= 2;\n            }\n        }\n    return true;\n}\n?>\n\n$limit = 10000;\n$max_num = 0;\n\n\necho \"Fibonacci number sequence up to $limit :\nwhile (<count>) {\n    print $_[0];\n\"}\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 183,
    "input": "Translate C to Java:#include <stdlib.h>\n#include <time.h>\n#include <stdio.h>\n\nint main() {\n    int a[10][10], i, j;\n\n    srand(time(NULL));\n    for (i = 0; i < 10; i++)\n        for (j = 0; j < 10; j++)\n            a[i][j] = rand() % 20 + 1;\n\n    for (i = 0; i < 10; i++) {\n        for (j = 0; j < 10; j++) {\n            printf(\" %d\", a[i][j]);\n            if (a[i][j] == 20)\n                goto Done;\n        }\n        printf(\"\\n\");\n    }\nDone:\n    printf(\"\\n\");\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "public class TwentyOne {\n\n\tpublic static void main(String[] args) {\n\t\tfor(int n : new IntStream(21, 1).skip(4)).forEach(System.out::println);\n\t}\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 184,
    "input": "Translate C to Go:\n\n#include<graphics.h>\n\nvoid vibratingRectangles(int winWidth,int winHeight,int leastLength,int leastWidth,int num, int msec)\n{\n\tint color = 1,i,x = winWidth/2, y = winHeight/2;\n\t\n\twhile(!kbhit()){\n\t\tsetcolor(color++);\n\t\tfor(i=num;i>0;i--){\n\t\t\trectangle(x - i*leastLength,y - i*leastWidth,x + i*leastLength,y + i*leastWidth);\n\t\t\tdelay(msec);\n\t\t}\n\n\t\tif(color>MAXCOLORS){\n\t\t\tcolor = 1;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tinitwindow(1000,1000,\"Vibrating Rectangles...\");\n\t\n\tvibratingRectangles(1000,1000,30,15,20,500);\n\t\n\tclosegraph();\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"github.com/go-vgo/vgo/runtime\"\n)\n\nfunc vprint(s string) {\n    \n    if len(s) == 0 { \n        return  \n    }\n    \n    \n    \n    \n    \n    x := runtime.NewGoObject()        \n    xo := x.(*runtime.Object)       \n    x.SetField(&xo.Name, \"value\")   \n    s = *x.(string)                 \n    \n    fmt.Printf(\"%s: %v\\n\", s, x)\n}\n\n\nconst myvar = \"a\"\n\nfunc main() {\n    var a []byte\n    \n    \n    a[0] = 'b'\n    b := &a\n        \n    \n    vprint(\"original:\")\n    vprint(a[:len(a)])\n\n\n    \n    z := make([]byte, len(b)+3)\n    memcpy(z[b:], b[:b+len(b)], len(b))\n    vprint(\"\\ncpying slice variables together:\")\n    vprint(string(z))\n\n    \n    del(z)\n    copy(a, b+1)\n    vprint(\"\\ndeleted slice variable\")\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 185,
    "input": "Translate PHP to Python:<?php\nclass Example {\n  function foo($x) {\n    return 42 + $x;\n  }\n}\n\n$example = new Example();\n\n$name = 'foo';\necho $example->$name(5), \"\\n\";        // prints \"47\"\n\necho call_user_func(array($example, $name), 5), \"\\n\";\n?>\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def addN(n):\n     def adder(x):\n         return x + n\n     return adder\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 186,
    "input": "Translate Java to Python:import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class PalindromicGapfulNumbers {\n\n    public static void main(String[] args) {\n        System.out.println(\"First 20 palindromic gapful numbers ending in:\");\n        displayMap(getPalindromicGapfulEnding(20, 20));\n\n        System.out.printf(\"%nLast 15 of first 100 palindromic gapful numbers ending in:%n\");\n        displayMap(getPalindromicGapfulEnding(15, 100));\n\n        System.out.printf(\"%nLast 10 of first 1000 palindromic gapful numbers ending in:%n\");\n        displayMap(getPalindromicGapfulEnding(10, 1000));\n    }\n    \n    private static void displayMap(Map<Integer,List<Long>> map) {\n        for ( int key = 1 ; key <= 9 ; key++ ) {\n            System.out.println(key + \" : \" + map.get(key));\n        }\n    }\n    \n    public static Map<Integer,List<Long>> getPalindromicGapfulEnding(int countReturned, int firstHowMany) {\n        Map<Integer,List<Long>> map = new HashMap<>();\n        Map<Integer,Integer> mapCount = new HashMap<>();\n        for ( int i = 1 ; i <= 9 ; i++ ) {\n            map.put(i, new ArrayList<>());\n            mapCount.put(i, 0);\n        }\n        boolean notPopulated = true;\n        for ( long n = 101 ; notPopulated ; n = nextPalindrome(n) ) {\n            if ( isGapful(n) ) {\n                int index = (int) (n % 10);\n                if ( mapCount.get(index) < firstHowMany ) {\n                    map.get(index).add(n);\n                    mapCount.put(index, mapCount.get(index) + 1);\n                    if ( map.get(index).size() > countReturned ) {\n                        map.get(index).remove(0);\n                    }\n                }\n                boolean finished = true;\n                for ( int i = 1 ; i <= 9 ; i++ ) {\n                    if ( mapCount.get(i) < firstHowMany ) {\n                        finished = false;\n                        break;\n                    }\n                }\n                if ( finished ) {\n                    notPopulated = false;\n                }\n            }\n        }\n        return map;\n    }\n    \n    public static boolean isGapful(long n) {\n        String s = Long.toString(n);\n        return n % Long.parseLong(\"\" + s.charAt(0) + s.charAt(s.length()-1)) == 0;\n    }\n    \n    public static int length(long n) {\n        int length = 0;\n        while ( n > 0 ) {\n            length += 1;\n            n /= 10;\n        }\n        return length;\n    }\n    \n    public static long nextPalindrome(long n) {\n        int length = length(n);\n        if ( length % 2 == 0 ) {\n            length /= 2;\n            while ( length > 0 ) {\n                n /= 10;\n                length--;\n            }\n            n += 1;\n            if ( powerTen(n) ) {\n                return Long.parseLong(n + reverse(n/10));\n            }\n            return Long.parseLong(n + reverse(n));\n        }\n        length = (length - 1) / 2;\n        while ( length > 0 ) {\n            n /= 10;\n            length--;\n        }\n        n += 1;\n        if ( powerTen(n) ) {\n            return Long.parseLong(n + reverse(n/100));\n        }\n        return Long.parseLong(n + reverse(n/10));\n    }\n    \n    private static boolean powerTen(long n) {\n        while ( n > 9 && n % 10 == 0 ) {\n            n /= 10;\n        }\n        return n == 1;\n    }\n        \n    private static String reverse(long n) {\n        return (new StringBuilder(n + \"\")).reverse().toString();\n    }\n\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import groupby\n\ndef gaps(f):\n    'Return a list of gaps between each pair of numbers in f'\n    g = []\n    for e in groups_of_5(f):\n        d = len(e)\n        if d > len(g): \n            g = e[:]\n        elif d < len(g):  \n            g.append(d)\n    return g\n\n\nif __name__ == '__main__':\n    from doctest import master\n    master()\n    print('\\n'.join(' '.format(*gaps(txt))\n                     for txt, g in zip(['12', '13', '14'], gaps('12 13 14')))\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 187,
    "input": "Translate C# to Go:class Program\n{\n    static void Main(string[] args)\n    {\n        CultureInfo ci=CultureInfo.CreateSpecificCulture(\"en-US\");\n        string dateString = \"March 7 2009 7:30pm EST\";\n        string format = \"MMMM d yyyy h:mmtt z\";\n        DateTime myDateTime = DateTime.ParseExact(dateString.Replace(\"EST\",\"+6\"),format,ci) ;\n        DateTime newDateTime = myDateTime.AddHours(12).AddDays(1) ;\n        Console.WriteLine(newDateTime.ToString(format).Replace(\"-5\",\"EST\")); \n\n        Console.ReadLine();\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tfmt.Println(parse(\"January 31st\"))\n\tfmt.Println(parse(\"March 14th UTC\"))\n}\n\nfunc parse(s string) (dt *time.Time, err error) {\n\tif s == \"\" { \n\t\treturn nil, time.ErrInvalidFormat\n\t}\n\tt, err := time.Parse(\"Jan 2, 0003\", s)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\td, err := t.Date()\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tswitch d.Month().Int() {\n\tcase 1, 3, 05, 07, 09, 11:\n\t\treturn &d, nil\n\tdefault:\n\t\treturn d.Add(-1, time.Day), nil\n\t}\n}\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 188,
    "input": "Translate Go to VB:package main\n\nimport (\n    \"crypto/des\"\n    \"encoding/hex\"\n    \"fmt\"\n    \"log\"\n)\n\nfunc main() {\n    key, err := hex.DecodeString(\"0e329232ea6d0d73\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    c, err := des.NewCipher(key)\n    if err != nil {\n        log.Fatal(err)\n    }\n    src, err := hex.DecodeString(\"8787878787878787\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    dst := make([]byte, des.BlockSize)\n    c.Encrypt(dst, src)\n    fmt.Printf(\"%x\\n\", dst)\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim A As String, B As String\n   If Environ$(\"COMPUTORUNE\").Like \"*.zip\" Then A = \"C:\\SomeDir\\somefile.zip\"\n   Else A = \"C:\\SomeDir\\somefile\"\n   End If \n   Debug.Print EnviRoom(A)  \n   \nEnd Sub \n\nFunction EnviRoom(FrmName As String) As String\n    \n   Dim Env As String, MyDirectory As String, TempFile As String\n      Env = Environ$(\"http%3A%2F%2fwww.rosettacode.org%2facme.php\")\n      MyDirectory = Environ$(\"USERENV('HOME')\") : TempFile = Now(1).Format(\"YYYYMMDDHHmmstr\")\n      \n         EnviRoom = Left(Environ$(\"\"& FrmName & \"\"\"):MyDirectory & \"/\" & TempFile\n         \nEnd Function\n",
    "input_language": "Go",
    "output_language": "VB"
  },
  {
    "id": 189,
    "input": "Translate C++ to Go:#include <algorithm>\n#include <iostream>\n#include <string>\n\ndouble jaro(const std::string s1, const std::string s2) {\n    const uint l1 = s1.length(), l2 = s2.length();\n    if (l1 == 0)\n        return l2 == 0 ? 1.0 : 0.0;\n    const uint match_distance = std::max(l1, l2) / 2 - 1;\n    bool s1_matches[l1];\n    bool s2_matches[l2];\n    std::fill(s1_matches, s1_matches + l1, false);\n    std::fill(s2_matches, s2_matches + l2, false);\n    uint matches = 0;\n    for (uint i = 0; i < l1; i++)\n    {\n        const int end = std::min(i + match_distance + 1, l2);\n        for (int k = std::max(0u, i - match_distance); k < end; k++)\n            if (!s2_matches[k] && s1[i] == s2[k])\n            {\n                s1_matches[i] = true;\n                s2_matches[k] = true;\n                matches++;\n                break;\n            }\n    }\n    if (matches == 0)\n        return 0.0;\n    double t = 0.0;\n    uint k = 0;\n    for (uint i = 0; i < l1; i++)\n        if (s1_matches[i])\n        {\n            while (!s2_matches[k]) k++;\n            if (s1[i] != s2[k]) t += 0.5;\n            k++;\n        }\n\n    const double m = matches;\n    return (m / l1 + m / l2 + (m - t) / m) / 3.0;\n}\n\nint main() {\n    using namespace std;\n    cout << jaro(\"MARTHA\", \"MARHTA\") << endl;\n    cout << jaro(\"DIXON\", \"DICKSONX\") << endl;\n    cout << jaro(\"JELLYFISH\", \"SMELLYFISH\") << endl;\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc JaroDistance(str1, str2 string) float64 {\n\tif len(str1) == len(str2) {\n\t\t\n\t\treturn 0\n\t} else {\n\t\tdiff := len(strings.ToLower(stringResearcher(str1)) -\n\t\t\tlen(strings.ToLower(stringResearcher(str2))))\n\t\treturn diff / 2 \n\t}\n}\n\n\ntype stringResearcher func() string\n\n\nvar _ string \n\nfunc (str2 string) string() string { return \"\" }\n\n\nfunc main() {\n\tfmt.Println(JaroDistance(\"\", \"\") )\n\tfmt.Println(JaroDistance(\"abcABC\", \"aBCbABcABC\"))\n\tfmt.Println(JaroDistance(\"abBA\", \"IBBConfecto\"))\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 190,
    "input": "Translate PHP to C#:<?\nclass Foo {\n}\n$obj = new Foo();\n$obj->bar = 42;\n$obj->baz = true;\n\nvar_dump(get_object_vars($obj));\n?>\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace ArrayParameterized\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var array = new String[5];\n            array[0] = \"Yellow\";\n            array[1] = \"Green\";\n            array[2] = \"Blue\";\n            array[3] = \"Red\";\n            array[4] = \"Black\";\n\n            Console.WriteLine(array.Join(\",\", \".\"));\n            Console.ReadKey();\n        }\n    }\n}\n",
    "input_language": "PHP",
    "output_language": "C#"
  },
  {
    "id": 191,
    "input": "Translate Java to Go:import java.util.Random;\n\npublic class NestedLoopTest {\n    public static final Random gen = new Random();\n    public static void main(String[] args) {\n        int[][] a = new int[10][10];\n        for (int i = 0; i < a.length; i++)\n            for (int j = 0; j < a[i].length; j++)\n                a[i][j] = gen.nextInt(20) + 1;\n\n        Outer:for (int i = 0; i < a.length; i++) {\n            for (int j = 0; j < a[i].length; j++) {\n                System.out.print(\" \" + a[i][j]);\n                if (a[i][j] == 20)\n                    break Outer; \n            }\n            System.out.println();\n        }\n        System.out.println();\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tn := []string{\"abracadabra\", \"seesaw\", \"elk\", \"grrrrrr\"}\n\tfor _, s := range n {\n\t\tfmt.Println(s[2 : len(s)-1])\n\t}\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 192,
    "input": "Translate Go to VB:package main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"rcu\"\n    \"sort\"\n)\n\nfunc main() {\n    arithmetic := []int{1}\n    primes := []int{}\n    limit := int(1e6)\n    for n := 3; len(arithmetic) < limit; n++ {\n        divs := rcu.Divisors(n)\n        if len(divs) == 2 {\n            primes = append(primes, n)\n            arithmetic = append(arithmetic, n)\n        } else {\n            mean := float64(rcu.SumInts(divs)) / float64(len(divs))\n            if mean == math.Trunc(mean) {\n                arithmetic = append(arithmetic, n)\n            }\n        }\n    }\n    fmt.Println(\"The first 100 arithmetic numbers are:\")\n    rcu.PrintTable(arithmetic[0:100], 10, 3, false)\n\n    for _, x := range []int{1e3, 1e4, 1e5, 1e6} {\n        last := arithmetic[x-1]\n        lastc := rcu.Commatize(last)\n        fmt.Printf(\"\\nThe %sth arithmetic number is: %s\\n\", rcu.Commatize(x), lastc)\n        pcount := sort.SearchInts(primes, last) + 1\n        if !rcu.IsPrime(last) {\n            pcount--\n        }\n        comp := x - pcount - 1 \n        compc := rcu.Commatize(comp)\n        fmt.Printf(\"The count of such numbers <= %s which are composite is %s.\\n\", lastc, compc)\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Module ArithmeticPrimes\n\n    Function SumDigits(ByVal s As String) As Integer\n        Dim out As Long = 0\n        For Each c In s.OfType(Of Char).Where(Function(p) p <> \"\\0\").SelectFunction(i => i.ToString())\n            out += c.ToInteger()\n        Next\n        Return out\n    End Function\n\n\n    Sub Main()\n\n        \n        Dim limits = {500_000}, d = 2, maxDiv = 20\n        \n        Console.WriteLine(\"First 100 arithmetic progressions\")\n        Dim arithAsList = New List(Of Integer)(limits.ToArray()).Append(d).ToList\n        Dim primesFromArithmeticProgression = From a In arithAsList.Select(Function(a) (a +\n            sumOfDigits(a))).GroupBy(Function(g) g.Count).Elements.Where(Function(grp) grp.Count > maxDiv)(\n         Into Group) Select Group.First().ToArray\n        \n        \n        Dim sortedPrimes = primesFromArithmeticProgression.OrderBy(Function(group) group.Last()) _\n            .TakeWhile(Function(item) item.Length >= 8) \n        \n        \n        \n        If sortsCount > 50 Then SortsCount = 50\n        \n        Console.Write(\"First {0:n0}: \", sortsCount)\n        For Each prime In sortedPrimes\n            Console.Write(\"{0,-11}\", prime)\n            \n        Next\n        Console.WriteLine()\n        \n\n        \n        \n        \n        Dim counts = new Dictionary(Of Int, Integer)\n        For Each prime In sortedPrimes\n            Dim digits = SumDigits(CStr(prime))\n            If counts.ContainsKey(digits) Then\n                counts(digits)++\n            Else\n                counts.Add(digits, 1)\n            End If\n        Next\n        Dim topN = counts.Values.Take(10).Distinct().OrderByDescending(Function(k) k.Value).FirstOrDefault\n            \n        Console.Write($\"There are {topN.Item1} distinct positive integers under {topN.Item2} whose digits in base ten can be written as an arithmetic progression.\")\n        Console.WriteLine()\n        \n    \n    End Sub \n\nEnd Module\n",
    "input_language": "Go",
    "output_language": "VB"
  },
  {
    "id": 193,
    "input": "Translate C++ to Python:#include <iostream>\n#include <string>\n#include <map>\n\ntemplate<typename map_type>\nmap_type merge(const map_type& original, const map_type& update) {\n    map_type result(update);\n    result.insert(original.begin(), original.end());\n    return result;\n}\n\nint main() {\n    typedef std::map<std::string, std::string> map;\n    map original{\n        {\"name\", \"Rocket Skates\"},\n        {\"price\", \"12.75\"},\n        {\"color\", \"yellow\"}\n    };\n    map update{\n        {\"price\", \"15.25\"},\n        {\"color\", \"red\"},\n        {\"year\", \"1974\"}\n    };\n    map merged(merge(original, update));\n    for (auto&& i : merged)\n        std::cout << \"key: \" << i.first << \", value: \" << i.second << '\\n';\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> def setup():\n\tmerged = merge([b\"ABCD\", b\"ABCDE\", b\"DABCDE\"])\n\tprint(merged)\n\n\t\n>>> def merge(lists):\n\treturn reduce(lambda x,y: x+y, lists, [])\n\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 194,
    "input": "Translate PHP to Python:$allowed = ['zip', 'rar', '7z', 'gz', 'archive', 'A##', 'tar.bz2'];\n$lc_allowed = array_map('strtolower', $allowed);\n\n$tests = [\n    ['MyData.a##',true],\n    ['MyData.tar.Gz',true],\n    ['MyData.gzip',false],\n    ['MyData.7z.backup',false],\n    ['MyData...',false],\n    ['MyData',false],\n    ['archive.tar.gz', true]\n];\n\nforeach ($tests as $test) {\n    $ext = pathinfo($test[0], PATHINFO_EXTENSION);\n    if (in_array(strtolower($ext), $lc_allowed)) {\n        $result = 'true';\n    } else {\n        $result = 'false';\n    }\n    printf(\"%20s : %s \\n\", $test[0],$result);\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import re, sys\n\ndef extractExt(url):\n  m = re.search(r'\\.[A-Za-z0-9]+$', url)\n  return m.group(0) if m else \"\"\n\nif __name__ == '__main__':\n    exts = sorted(set(extractExt(url) for url in sys.argv[1:])\n    print (''.join(ext for ext in sorted(exts) if str(int(ext, 10)) <= int(sys.argv[-1], 10))))\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 195,
    "input": "Translate C++ to Python:#include <algorithm>\n#include <iostream>\n#include <map>\n#include <vector>\n\nstd::ostream &operator<<(std::ostream &os, std::vector<std::pair<int, int>> &v) {\n    for (auto &p : v) {\n        auto sum = p.first + p.second;\n        auto prod = p.first * p.second;\n        os << '[' << p.first << \", \" << p.second << \"] S=\" << sum << \" P=\" << prod;\n    }\n    return os << '\\n';\n}\n\nvoid print_count(const std::vector<std::pair<int, int>> &candidates) {\n    auto c = candidates.size();\n    if (c == 0) {\n        std::cout << \"no candidates\\n\";\n    } else if (c == 1) {\n        std::cout << \"one candidate\\n\";\n    } else {\n        std::cout << c << \" candidates\\n\";\n    }\n}\n\nauto setup() {\n    std::vector<std::pair<int, int>> candidates;\n\n    \n    for (int x = 2; x <= 98; x++) {\n        \n        for (int y = x + 1; y <= 98; y++) {\n            if (x + y <= 100) {\n                candidates.push_back(std::make_pair(x, y));\n            }\n        }\n    }\n\n    return candidates;\n}\n\nvoid remove_by_sum(std::vector<std::pair<int, int>> &candidates, const int sum) {\n    candidates.erase(std::remove_if(\n        candidates.begin(), candidates.end(),\n        [sum](const std::pair<int, int> &pair) {\n            auto s = pair.first + pair.second;\n            return s == sum;\n        }\n    ), candidates.end());\n}\n\nvoid remove_by_prod(std::vector<std::pair<int, int>> &candidates, const int prod) {\n    candidates.erase(std::remove_if(\n        candidates.begin(), candidates.end(),\n        [prod](const std::pair<int, int> &pair) {\n            auto p = pair.first * pair.second;\n            return p == prod;\n        }\n    ), candidates.end());\n}\n\nvoid statement1(std::vector<std::pair<int, int>> &candidates) {\n    std::map<int, int> uniqueMap;\n\n    std::for_each(\n        candidates.cbegin(), candidates.cend(),\n        [&uniqueMap](const std::pair<int, int> &pair) {\n            auto prod = pair.first * pair.second;\n            uniqueMap[prod]++;\n        }\n    );\n\n    bool loop;\n    do {\n        loop = false;\n        for (auto &pair : candidates) {\n            auto prod = pair.first * pair.second;\n            if (uniqueMap[prod] == 1) {\n                auto sum = pair.first + pair.second;\n                remove_by_sum(candidates, sum);\n\n                loop = true;\n                break;\n            }\n        }\n    } while (loop);\n}\n\nvoid statement2(std::vector<std::pair<int, int>> &candidates) {\n    std::map<int, int> uniqueMap;\n\n    std::for_each(\n        candidates.cbegin(), candidates.cend(),\n        [&uniqueMap](const std::pair<int, int> &pair) {\n            auto prod = pair.first * pair.second;\n            uniqueMap[prod]++;\n        }\n    );\n\n    bool loop;\n    do {\n        loop = false;\n        for (auto &pair : candidates) {\n            auto prod = pair.first * pair.second;\n            if (uniqueMap[prod] > 1) {\n                remove_by_prod(candidates, prod);\n\n                loop = true;\n                break;\n            }\n        }\n    } while (loop);\n}\n\nvoid statement3(std::vector<std::pair<int, int>> &candidates) {\n    std::map<int, int> uniqueMap;\n\n    std::for_each(\n        candidates.cbegin(), candidates.cend(),\n        [&uniqueMap](const std::pair<int, int> &pair) {\n            auto sum = pair.first + pair.second;\n            uniqueMap[sum]++;\n        }\n    );\n\n    bool loop;\n    do {\n        loop = false;\n        for (auto &pair : candidates) {\n            auto sum = pair.first + pair.second;\n            if (uniqueMap[sum] > 1) {\n                remove_by_sum(candidates, sum);\n\n                loop = true;\n                break;\n            }\n        }\n    } while (loop);\n}\n\nint main() {\n    auto candidates = setup();\n    print_count(candidates);\n\n    statement1(candidates);\n    print_count(candidates);\n\n    statement2(candidates);\n    print_count(candidates);\n\n    statement3(candidates);\n    print_count(candidates);\n\n    std::cout << candidates;\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import groupby\n\ndef countJewels(s, j):\n    def detail(xs):\n        xs = sorted(set(sum(xs[:1], xs[-1::-1]))))\n        return len({k: i for k,i in xs})\n    n = -1\n    try:\n        xs = list(map(lambda w: [], s.split()), s)\n        t = zip(*xs)\n        xs += ([tuple(t[i+1:] + t[:i]) for i in range(len(xs))])\n        n = max(detail(xs), n-1)\n    except Exception as e:\n        print(\"Error during counting of %s in %r\" %\n              (\"jews\", repr(e)))\n    finally:\n        assert n >= 0, 'counting from left'\n        return n\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    test_jewels('aAAbbbb', 'a')\n    test_jewels('AAABBBFFEEEIIIJJKKLLMMOOOSS', 'A')\n    test_jewels('ZZ', 'z')\n    print('\\nThe times taken: %g seconds' % (time.time()-start_time))\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 196,
    "input": "Translate Python to VB:from collections import namedtuple\nfrom pprint import pprint as pp\n\nOpInfo = namedtuple('OpInfo', 'prec assoc')\nL, R = 'Left Right'.split()\n\nops = {\n '^': OpInfo(prec=4, assoc=R),\n '*': OpInfo(prec=3, assoc=L),\n '/': OpInfo(prec=3, assoc=L),\n '+': OpInfo(prec=2, assoc=L),\n '-': OpInfo(prec=2, assoc=L),\n '(': OpInfo(prec=9, assoc=L),\n ')': OpInfo(prec=0, assoc=L),\n }\n\nNUM, LPAREN, RPAREN = 'NUMBER ( )'.split()\n\n\ndef get_input(inp = None):\n    'Inputs an expression and returns list of (TOKENTYPE, tokenvalue)'\n    \n    if inp is None:\n        inp = input('expression: ')\n    tokens = inp.strip().split()\n    tokenvals = []\n    for token in tokens:\n        if token in ops:\n            tokenvals.append((token, ops[token]))\n        \n        \n        else:    \n            tokenvals.append((NUM, token))\n    return tokenvals\n\ndef shunting(tokenvals):\n    outq, stack = [], []\n    table = ['TOKEN,ACTION,RPN OUTPUT,OP STACK,NOTES'.split(',')]\n    for token, val in tokenvals:\n        note = action = ''\n        if token is NUM:\n            action = 'Add number to output'\n            outq.append(val)\n            table.append( (val, action, ' '.join(outq), ' '.join(s[0] for s in stack), note) )\n        elif token in ops:\n            t1, (p1, a1) = token, val\n            v = t1\n            note = 'Pop ops from stack to output' \n            while stack:\n                t2, (p2, a2) = stack[-1]\n                if (a1 == L and p1 <= p2) or (a1 == R and p1 < p2):\n                    if t1 != RPAREN:\n                        if t2 != LPAREN:\n                            stack.pop()\n                            action = '(Pop op)'\n                            outq.append(t2)\n                        else:    \n                            break\n                    else:        \n                        if t2 != LPAREN:\n                            stack.pop()\n                            action = '(Pop op)'\n                            outq.append(t2)\n                        else:    \n                            stack.pop()\n                            action = '(Pop & discard \"(\")'\n                            table.append( (v, action, ' '.join(outq), ' '.join(s[0] for s in stack), note) )\n                            break\n                    table.append( (v, action, ' '.join(outq), ' '.join(s[0] for s in stack), note) )\n                    v = note = ''\n                else:\n                    note = ''\n                    break\n                note = '' \n            note = '' \n            if t1 != RPAREN:\n                stack.append((token, val))\n                action = 'Push op token to stack'\n            else:\n                action = 'Discard \")\"'\n            table.append( (v, action, ' '.join(outq), ' '.join(s[0] for s in stack), note) )\n    note = 'Drain stack to output'\n    while stack:\n        v = ''\n        t2, (p2, a2) = stack[-1]\n        action = '(Pop op)'\n        stack.pop()\n        outq.append(t2)\n        table.append( (v, action, ' '.join(outq), ' '.join(s[0] for s in stack), note) )\n        v = note = ''\n    return table\n\nif __name__ == '__main__':\n    infix = '3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3'\n    print( 'For infix expression: %r\\n' % infix )\n    rp = shunting(get_input(infix))\n    maxcolwidths = [len(max(x, key=len)) for x in zip(*rp)]\n    row = rp[0]\n    print( ' '.join('{cell:^{width}}'.format(width=width, cell=cell) for (width, cell) in zip(maxcolwidths, row)))\n    for row in rp[1:]:\n        print( ' '.join('{cell:<{width}}'.format(width=width, cell=cell) for (width, cell) in zip(maxcolwidths, row)))\n\n    print('\\n The final output RPN is: %r' % rp[-1][2])\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit On\nOption Infer On\nOption Strict On\n\n\nModule Curry\n    \n    Function Curry(Of T1, TResult)(func As Func(Of T1, TResult))\n\n        \n        Sub Invoke(self_Func As Func(Of T1, TResult), self_As_T1 As T1)\n\n            \n            Dim result As TResult = func(self_As_T1)\n\n            Return Invoke(result, self_As_T1)\n\n        End Sub\n\n\n\n        Function Curry(Of T1, T2, TResult)(func As Func(Of T1, Func(Of T2, TResult)), self_As_T1 As T1, self_As_T2 As T2)\n\n\n\n            \n            \n            Return Invoke(func(self_As_T1), self_As_T2)\n\n\n\n            \n\n        End Function\n\n    \nEnd Module\n\n\nSub Main()\n\n    \n    \n    Dim curry_fun_add = Curry(Of Integer, Integer, Integer).FunctionPair(\n      Function(a, b) a + b,\n      Function(a, b) a * b)\n\n\n    \n    \n    \n    Dim add_result_as_tuple = curry_fun_add(Function(a, b) a, Function(b, c) b + c)\n\n\n\n\n    \n    \n    \n    \n    Debug.Print \"Int32 sum of 10 with itself when called with Int64, UInt8, Char, String methods:\"\n    \n\n    Dim add_ints_and_chars_with_strings As Boolean = False\n    \n\n    If Application.Version.InternetExplorer.ApplicationVersion >= 50100 Then\n\n\n\n\n        Dim numbers_in_curries As New List(Of Integer()())({{100, 200}, {300, 400}})\n        \n\n        \n        \n        \n        For Each pair In numbers_in_curries\n        \n            Dim results_of_functions As New List(Of Integer())\n\n\n            \n            Add Function(int_a, int_b) To Results Of Functions:=(fun As Fun(Of Integer, Integer))(function_a => function_b := int_a * int_b): GoTo Continue\n\n           \n            Add Function(char_a, char_b) To Results Of Functions:=(char_a, char_b) <> \"\" : GoTo Continue\n\n           \n            Add Function(string_a, string_b) To Results Of Functions:=(string_a, string_b) <> \"\" : GoTo Continue\n                \n            Continue With fun\n                If.IsOperator Then Result = eval_function(fun)\n                \n                Else Throw CreateException(\"Not enough parameters for operator method\"\n                                  & vbCrLf & _\n                                  & \"(expected 2-3,\" &\n                                      Format(\"Parameter {0}\", 1) & \", got {2}.)\")\n\n            End If \n            \n           results_of_functions.Add(Result)\n        Next\n    End If \n\n    \n\n\n    Console.WriteLine(String.Join(vbCrLf, results_of_functions))\n\n\n    Private Sub create_exception(msg As String)\n        Throw CreateException(msg)\n    End Sub \n\n\n    Type Fun(Of T1, T2) As Func(Of T1, T2)\n\n\n\n\n\n      \n      \n      \n      \n      \n      Function IsOperator As Boolean\n      \n      Optional Operator As String = Nothing\n    End Class\n\n\n\n\n\n    Type Fun(Of T1, T2) As Func(Of T1, T2)(\n      Optional f As Fun(Of T1, T2)?\n    )\n\n      \n\n      \n      \n      \n      \n      \n      Function IsOperator(Optional value As Boolean = True) As Boolean\n  \n      OptionHandler(f As Fun(Of T1, T2)): GoTo Continue\n          \n          Raise Exception.CreateCreateException(\"Too many parameters for operation.\"\n                                          & vbNewLine &_\n                                          &_\" Expected exactly two.\")\n\n\n         \n              f(value.IsOperator = value)\n              \n          \n          \n          \n          Continue With f\n              If Not f Is Operator AndAlso Value IsNot Nothing Then\n                  Raise exception.CreateException($\"Expected only single parameter \"\n                                              & _ \"{0}\" &_ _.ToString())\n               End If  \n             f = Operator\n       End If \n        \n     \n       \n    End Function\n    \n    \n    Function Call(ByVal caller As Fun(Of T1, T2), ByVal params As Variant) As Variant:\n\n\n\n        \n        Dim args As Variant = Array(params)\n\n        \n        For i As Integer = 0 To UBound(args)\n            args(i) = caller.Invoke(args(i))\n        Next\n\n        Return args\n\n    End Function\n\n    \n    Function Curry(Of T1, T2, TResult)(f As Fun(Of T1, Fun(Of T2, TResult)),\n                                     self_As_T1 As T1,\n                                     self_As_T2 As T2)\n\n        \n        Return Invoke(f, self_As_T1, self_As_T2)\n\n    End Function\n\n    \n    Function Curry(Of T1, T2, T3, TResult)(f As Fun(Of T1, Fun(Of T2, Fun(Of T3, TResult))),\n                                       self_As_T1 As T1,\n                                       self_As_T2 As T2,\n                                       self_As_T3 As T3)\n\n        \n        Return Invoke(f, self_As_T1, self_As_T2, self_As_T3)\n\n    End Function\n\n    \n    Function Curry(Of T1, T2, T3, T4, TResult)(f As Fun(Of T1, Fun(Of T2, Fun(Of T3, Fun(Of T4, TResult))),\n                                           self_As_T1 As T1,\n                                           self_As_T2 As T2,\n                                           self_As",
    "input_language": "Python",
    "output_language": "VB"
  },
  {
    "id": 197,
    "input": "Translate C to Go:#!/usr/local/bin/script_gcc.sh\n\n#include <errno.h>\n#include <libgen.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n\n\n\ntypedef char  *STRING;\ntypedef enum{FALSE=0, TRUE=1} BOOL;\nconst STRING ENDCAT = NULL;\n\n\n#define DIALECT \"c\" \nconst STRING\n  CC=\"gcc\",\n  COPTS=\"-lm -x \"DIALECT,\n  IEXT=\".\"DIALECT,\n  OEXT=\".out\";\nconst BOOL OPT_CACHE = TRUE;\n\n\nchar strcat_out[BUFSIZ];\n\nSTRING STRCAT(STRING argv, ... ){\n  va_list ap;\n  va_start(ap, argv);\n  STRING arg;\n  strcat_out[0]='\\0';\n  for(arg=argv; arg != ENDCAT; arg=va_arg(ap, STRING)){\n     strncat(strcat_out, arg, sizeof strcat_out);\n  }\n  va_end(ap);\n  return strndup(strcat_out, sizeof strcat_out);\n}\n\nchar itoa_out[BUFSIZ];\n\nSTRING itoa_(int i){\n  sprintf(itoa_out, \"%d\", i);\n  return itoa_out;\n}\n\ntime_t modtime(STRING filename){\n  struct stat buf;\n  if(stat(filename, &buf) != EXIT_SUCCESS)perror(filename);\n  return buf.st_mtime;\n}\n\n\nBOOL compile(STRING srcpath, STRING binpath){\n  int out;\n  STRING compiler_command=STRCAT(CC, \" \", COPTS, \" -o \", binpath, \" -\", ENDCAT);\n  FILE *src=fopen(srcpath, \"r\"),\n       *compiler=popen(compiler_command, \"w\");\n  char buf[BUFSIZ];\n  BOOL shebang;\n\n  for(shebang=TRUE; fgets(buf, sizeof buf, src); shebang=FALSE)\n    if(!shebang)fwrite(buf, strlen(buf), 1, compiler);\n\n  out=pclose(compiler);\n  return out;\n}\n\nvoid main(int argc, STRING *argv, STRING *envp){\n\n  STRING binpath,\n         srcpath=argv[1],\n         argv0_basename=STRCAT(basename((char*)srcpath ), ENDCAT),\n         *dirnamew, *dirnamex;\n  argv++; \n\n\n  STRING paths[] = {\n    dirname(strdup(srcpath)), \n    STRCAT(getenv(\"HOME\"), \"/bin\", ENDCAT),\n    \"/usr/local/bin\",\n    \".\",\n    STRCAT(getenv(\"HOME\"), \"/tmp\", ENDCAT),\n    getenv(\"HOME\"),\n    STRCAT(getenv(\"HOME\"), \"/Desktop\", ENDCAT),\n\n    ENDCAT\n  };\n\n  for(dirnamew = paths; *dirnamew; dirnamew++){\n    if(access(*dirnamew, W_OK) == EXIT_SUCCESS) break;\n  }\n\n\n  if(OPT_CACHE == FALSE){\n    binpath=STRCAT(*dirnamew, \"/\", argv0_basename, itoa_(getpid()), OEXT, ENDCAT);\n    if(compile(srcpath, binpath) == EXIT_SUCCESS){\n      if(fork()){\n        sleep(0.1); unlink(binpath);\n      } else {\n        execvp(binpath, argv);\n      }\n    }\n  } else {\n\n    time_t modtime_srcpath = modtime(srcpath);\n    for(dirnamex = paths; *dirnamex; dirnamex++){\n      binpath=STRCAT(*dirnamex, \"/\", argv0_basename, OEXT, ENDCAT);\n      if((access(binpath, X_OK) == EXIT_SUCCESS) && (modtime(binpath) >= modtime_srcpath))\n        execvp(binpath, argv);\n    }\n  }\n\n  binpath=STRCAT(*dirnamew, \"/\", argv0_basename, OEXT, ENDCAT);\n  if(compile(srcpath, binpath) == EXIT_SUCCESS)\n    execvp(binpath, argv);\n\n  perror(STRCAT(binpath, \": executable not available\", ENDCAT));\n  exit(errno);\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc printUsage() {\n\tfmt.Println(`positional arguments:\n\tone   : first argument\noptional:\n\t-help` +\n\t`: Output version number, process flag and any remaining arguments`\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 198,
    "input": "Translate C++ to Go:#include <iomanip>\n#include <iostream>\n#include <vector>\n\nstd::vector<bool> prime_sieve(int limit) {\n    std::vector<bool> sieve(limit, true);\n    if (limit > 0)\n        sieve[0] = false;\n    if (limit > 1)\n        sieve[1] = false;\n    for (int i = 4; i < limit; i += 2)\n        sieve[i] = false;\n    for (int p = 3, sq = 9; sq < limit; p += 2) {\n        if (sieve[p]) {\n            for (int q = sq; q < limit; q += p << 1)\n                sieve[q] = false;\n        }\n        sq += (p + 1) << 2;\n    }\n    return sieve;\n}\n\nvoid print_non_twin_prime_sums(const std::vector<bool>& sums) {\n    int count = 0;\n    for (size_t i = 2; i < sums.size(); i += 2) {\n        if (!sums[i]) {\n            ++count;\n            std::cout << std::setw(4) << i << (count % 10 == 0 ? '\\n' : ' ');\n        }\n    }\n    std::cout << \"\\nFound \" << count << '\\n';\n}\n\nint main() {\n    const int limit = 100001;\n\n    std::vector<bool> sieve = prime_sieve(limit + 2);\n    \n    for (size_t i = 0; i < limit; ++i) {\n        if (sieve[i] && !((i > 1 && sieve[i - 2]) || sieve[i + 2]))\n            sieve[i] = false;\n    }\n\n    std::vector<bool> twin_prime_sums(limit, false);\n    for (size_t i = 0; i < limit; ++i) {\n        if (sieve[i]) {\n            for (size_t j = i; i + j < limit; ++j) {\n                if (sieve[j])\n                    twin_prime_sums[i + j] = true;\n            }\n        }\n    }\n\n    std::cout << \"Non twin prime sums:\\n\";\n    print_non_twin_prime_sums(twin_prime_sums);\n\n    sieve[1] = true;\n    for (size_t i = 1; i + 1 < limit; ++i) {\n        if (sieve[i])\n            twin_prime_sums[i + 1] = true;\n    }\n\n    std::cout << \"\\nNon twin prime sums (including 1):\\n\";\n    print_non_twin_prime_sums(twin_prime_sums);\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPrime(n uint64) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor _, d := range []uint64{2, 3, 5} {\n\t\tif n%d == 0 {\n\t\t\treturn false\n\t\t}\n\t\tfor ;d <= n%6; d+=2*d+1 {\n\t\t}\n\t}\n\treturn true\n}\n\n\nvar primes []uint64\nfunc nextSmaller(p uint64) uint64 {\n\tvar u uint64\n\tfor s := uint64(2); s < p-1/2; s *= 2 { \n\t\tu = s * s\n\t\tif!(u&p) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn u\n}\n\n\n\ntype TwinPrimesSet struct {\n\ts   []*prime\n\tpv *[len(prime]*2]\n\tmx [2]int\n\t\n\tshowf func(*printnonTwinPrimeSums)\n}\n\nconst showfmt = \"{:7b}{:11:n}\"\n\n\nfunc newTwinset(show fmt) (*Twinset, error) {\n\t\n\tq := make([]bool, len(prime))\n\tprimes := append(q[:len(prime)], q...)\n\tnq := make([]*prime, len(primes))\n\n\ti := 0\n\tj := 0\n\tfor k := range primes {\n\t\tif!primes[k]{:\n\t\t\tcontinue\n\t\ti++\n\t\tj++\n\n\t\t\n\t\tpv := make(map[int]bool)\n\t\tpv[nextSmaller(i)] = true\n\t\tpv[nextSmaller(j)] = true\n\t\t\n\t\t\n\t\t\n\t\tvmin := min(&pv)\n\t\tif vmin!= 0 {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tx := primes[j].next()\n\t\t\ty := primes[i].prev()\n\n\t\t\t\n\n\t\t\tpv[x], pv[y] = y, x\n\t\t\t\n\t\t\tk -= 2\n\t\t\tif k >= 0 {\n\t\t\t\tk /= 2\n\t\t\t\t\n\t\t\t\tif kv := pv[nextSmaller(k)]; kv!=nil{\n\t\t\t\t\tpv[vxmin] = kv\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif kv := pv[nextSmaller(kv)]; kv!=nil{\n\t\t\t\t\tpv[vkv] = kv\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\tbound := 1024 / 8 \n\n\tif len(primes)>bound*2 {\n\t\tbounds = len(primes)/32  \n\t}\n\t\n\tfor _, pr := range primes[:bounds] {\n\t\tif!prqs {\n\t\t\tprqs=true\n\t\t\ttvs.append(&twinset{s:pr})\n\t\t}\n\t}\n\tif!prqs {\n\t\tpanic(\"not enough primes\")\n\t}\n\t\n\tfor _, pr := range primes[bounds:] {\n\t\tif!prqs {\n\t\t\tcontinue\n\t\t}\n\t\ttvs.append(&twinset{s:pr})\n\n\t\t\n\t\tfor _, pq := range tvs.pv {\n\t\t\tif pq==pq.prv {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\ttvs.append(&twinset{s:pr}, &tvs.pv)\n\t}\n\t\n\tif!tvssigs {\n\t\ttvssigs=true\n\t\tfor _, tsv := range tvs.sigs {\n\t\t\tfmt.Printf(\"%12s\", tsv)\n\t\t}\n\t}\n\treturn &tvs, nil\n}\n\n\n\n\nfunc (ts *Twinset) sigs () ([]string, error){\n\tts.showf(func(fmt.Println(ts))){fmt.Printf(\":\")}; ts.showf(func(fmt.Println(ts)){for _, sv := range ts.sigs {}...}{fmt.String(\"\\n\")}}\n\treturn ts.sigs, nil\n}\n\n\n\n\n\nfunc (ts *Twinset) show () {\n\tconst max = 20\n\tcapacity := len(ts.sigs())\n\tfor a := capacity/max; a>=max&&capacity>0;a-=max\n\t\tfmt.Printf(\"(%c%c)%*s\\n\", chr('A'+a),chr('A')+capacities-a,' ',ts.sigs[a-max:])\n\tts.showf(func(fmt.Println(ts))(char(max)))\n\tts.showf(func(fmt.Println(ts))){}\n\tcapacity=0\n\tfor b := 26; b<=95;b++{} \n\t\tchar(b)-='A'\n\t\tts.sigs[capsize]=append(char,b)\n\t\tcapsize++\n\tts.showf(func(fmt.Println(ts)){\n\t\tfor _, sv := range ts.sigs {}\n\t\tfmt.Print(string(sv))}\n\t})\t\n}\n\n\n\n\n\n\nfunc (ts *Twinset) all(){\n\tfor _, c := range ts.sigs...\n\t\tfmt.Printf(\"%2s%s:%2d%n\",chr(c),'A',c)}\n\tfmt.Println(\"\")\n}\n\nfunc (ts *Twinset)sigs(){for _, cvr :=range ts.sigs...\n\tfmt.Printf(\"%c\\t%s\",cvr,cvr)}}\n\n\nfunc (ts *Twinset)pvt(vv []byte)[]*prime {\n\t\n\ta := len(vv)\n\tr := make([][*prime], a)\n\tfor i := 0;i<a;i++ { r",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 199,
    "input": "Translate C++ to VB:#include <cstdint>\n#include <iostream>\n#include <string>\n\nusing integer = uint64_t;\n\nbool square_free(integer n) {\n    if (n % 4 == 0)\n        return false;\n    for (integer p = 3; p * p <= n; p += 2) {\n        integer count = 0;\n        for (; n % p == 0; n /= p) {\n            if (++count > 1)\n                return false;\n        }\n    }\n    return true;\n}\n\nvoid print_square_free_numbers(integer from, integer to) {\n    std::cout << \"Square-free numbers between \" << from\n        << \" and \" << to << \":\\n\";\n    std::string line;\n    for (integer i = from; i <= to; ++i) {\n        if (square_free(i)) {\n            if (!line.empty())\n                line += ' ';\n            line += std::to_string(i);\n            if (line.size() >= 80) {\n                std::cout << line << '\\n';\n                line.clear();\n            }\n        }\n    }\n    if (!line.empty())\n        std::cout << line << '\\n';\n}\n\nvoid print_square_free_count(integer from, integer to) {\n    integer count = 0;\n    for (integer i = from; i <= to; ++i) {\n        if (square_free(i))\n            ++count;\n    }\n    std::cout << \"Number of square-free numbers between \"\n        << from << \" and \" << to << \": \" << count << '\\n';\n}\n\nint main() {\n    print_square_free_numbers(1, 145);\n    print_square_free_numbers(1000000000000LL, 1000000000145LL);\n    print_square_free_count(1, 100);\n    print_square_free_count(1, 1000);\n    print_square_free_count(1, 10000);\n    print_square_free_count(1, 100000);\n    print_square_free_count(1, 1000000);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Imports System.Runtime.CompilerServices\n\nModule Module1\n\n    <Extension()>\n    Function IsPrime(ByVal number As Integer)\n        Dim factor As Integer = 2\n        While factor <= number / 2\n            If number Mod factor = 0 Then\n                Return False\n            End If\n            factor += 1\n        End While\n        Return True\n    End Function\n\n    Sub Main()\n        Console.WriteLine(\"First twenty five super primes:\")\n        Dim first25AsPrimeNumbers As List(Of Integer) = FindSuperPrimes(26).ToList()\n\n        \n        For Each index As Integer In {1, 2}.Concat(foreachFunction(first25AsPrimeNumbers.Count - 1)}\n           Console.Write(\"{0} \", first25AsPrimeNumbers(index))\n\n           \n        Next : Console.WriteLine()\n        \n\n        \n        \n        Console.WriteLine(\"The first ten thousandth super prime\")\n        Dim tenthOfAMillionAsInteger = Convert.ToInt32((10_000_001.0 / 100_000) * 1E6D)\n\n        Dim tenthOfAMillionAsList = first25AsPrimeNumbers.GetRange(0, tenthOfAMillionAsInteger)\n        Dim tenthOfAMillionAsString = first25AsPrimeNumbers.GetRange(tenthOfAMillionAsInteger, 999)\n\n        \n        ForEach item As Integer In tenthOfAMillionAsList\n            If item < tenthOfAMillionAsInteger + 100_000 Then\n                tenthOfAMillionAsList.RemoveAt(0)\n            Else\n                tenthOfAMillionAsList.Add(item)\n            End If\n        Next\n\n\n        If tenthOfAMillionAsList.Count <> 1 Then\n            tenthOfAMillionAsList.Insert(0, tenthOfAMillionAsLine)\n        End If\n        \n        \n        \n        \n        Dim resultString As String = String.Join(\"\", tenthOfAMillionAsLine)\n        If resultString.Length >= 40 Then\n            resultString = resultString.Substring(0, 30) & \"...\"\n        End If\n        Console.WriteLine(resultString)\n\n\n        Dim largestAsLong As Long = Math.Max(ten ThousandAsLong, largeOneAfterNinetyFive)\n        Dim largestAsInteger As Integer = largeOneAfterNinetyfive + 1 \n\n        \n        For Each item As Integer In first25AsPrimeNumbers.GetRange(largestAsInteger - first25AsPrimeNumbers.Count + 1,\n                                                                largestAsLong - first25AsPrimeNumbers.Count + 1)\n            \n            If Not IsPrime(item) AndAlso item > first25AsPrimeNumbers(GetRandomIndex()) Then\n            \n                \n                first25AsPrimeNumbers.RemoveGetRandomItem\n                \n                Dim newEntry As New Integer\n                    With _\n                        {.item = item,\n                        .index = GetRandomIndex(),\n                        .IsPrime = IsPrime(item),\n                        .primeCount = first25AsPrimeNumbers.Count}\n                    \n                    Let next =\n                        AddToSet(newEntry)\n                        \n                    GoTo lastPut \n                End Let\n                    \n            End If \n            \n        Next \n        \n       \n        Debug.Print \"Largest extra digits after nine hundred ninety-five: \";\n        PrintCollection(nexts)\n\n        \n        Console.WriteLine($\"of them are prime.\")\n        PrintCollection(primeColl)\n\n        \n        Console.WriteLine($\"of those under {largestAsLong} length\");\n        PrintCollection(lengthColl)\n\n        \n        Console.WriteLine($\"there is only {nextsLength} such numbers left over\")\n\n        \n        Console.WriteLine($\"which can be put together into a single string with\"\n                     & $\", length {lengthColl.Count} and containing just {nextsCount} digits.\")\n\n        \n        Console.WriteLine($\"{next}\")\nlastPut:\n        Continue\n    End Sub\n\n    Private Shared ReadOnly Property LengthColl As HashSet(Of Integer) = Nothing\n\n    \n    Private Shared ReadOnly Property PrimeColl As HashSet(Of Integer) = Nothing\n    \n    \n    \n    Private Shared ReadOnly Property nexts As IEnumerable(Of Integer) = Nothing\n\n    Public Shared Function FindSuperPrimes(n As Integer) As IEnumerable(Of Integer)\n        Dim res As New List(Of Integer), flag As Boolean = False\n        For i As Integer = 9 To n\n            If Not IsPrime(i) Then\n                flag = True  \n                Exit For\n            End If\n        Next\n        If flag Then\n            res.AddRange(FindSuperPrimes(n))\n        ElseIf n Mod 10 = 0 OrElse n Mod 100 = 0 Then\n            res.Add(n)\n        End If\n    End Function\n\n    Private Function IsPrime(number As Integer) As Boolean\n        Dim factor As Integer = 2\n        While FactorLessOrEqualThan(factor, number \\ 2) And factor <= number \\ 2\n            factor += 1\n        WEnd\n        If factor = 2 Then\n            Return True\n        End If\n        factor = 3\n        Do While factor <= number / 3\n            If factor * factor > number Then\n                Break\n            ElseIf NumberModPow(factor, number) =",
    "input_language": "C++",
    "output_language": "VB"
  },
  {
    "id": 200,
    "input": "Translate Python to Go:from optparse import OptionParser\n[...]\nparser = OptionParser()\nparser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                  help=\"write report to FILE\", metavar=\"FILE\")\nparser.add_option(\"-q\", \"--quiet\",\n                  action=\"store_false\", dest=\"verbose\", default=True,\n                  help=\"don't print status messages to stdout\")\n\n(options, args) = parser.parse_args()\n\nexample:\n\n<yourscript> --file=outfile -q\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"os/exec\"\n)\n\nfunc main() {\n    output := exec.Command(\"ls\", \"-l\").CombinedOutput\n    fmt.Print(string(output))\n}\n\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 201,
    "input": "Translate Python to Go:from itertools import product, compress\n\nfact = lambda n: n and n*fact(n - 1) or 1\ncombo_count = lambda total, coins, perm:\\\n                    sum(perm and fact(len(x)) or 1\n                        for x in (list(compress(coins, c))\n                                  for c in product(*([(0, 1)]*len(coins))))\n                        if sum(x) == total)\n\ncases = [(6,  [1, 2, 3, 4, 5]),\n         (6,  [1, 1, 2, 3, 3, 4, 5]),\n         (40, [1, 2, 3, 4, 5, 5, 5, 5, 15, 15, 10, 10, 10, 10, 25, 100])]\n\nfor perm in [False, True]:\n    print(f'Order matters: {perm}')\n    for s, c in cases:\n        print(f'{combo_count(s, c, perm):7d} ways for {s:2d} total from coins {c}')\n    print()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\t\n\t\"strconv\"\n)\n\nfunc main() {\n\tconst coinValues = []int{1, 5, 10}\n\tvar max int64 = 0\n\t\n\tfor _, value := range coinValues {\n\t\t\n\t\tsum := big.NewInt(int64(value))\n\t\tbigRrem := new(big.Rremt8)\n\t\tfor r := big.NewInt(1); r.Cmp(sum) <= 0; r.Mul(r, r) {\n\t\t\trrem, ok := r.String()[1:]\n\t\t\tif!ok || r.Rem(&sum, rrem).Cmp(0)!= 0 {\n\t\t\t\tcontinue \n\t\t\t}\n\t\t\t\n\t\t\tcoinCount := make([][]int, len(coinValues)+1)\n\t\t\tfor i := range coinCount {\n\t\t\t\tcoinCount[i] = make([]int, len(coinValues))\n\t\t\t\tfor j := range coinCount[i] {\n\t\t\t\t\tcoinCount[i][j] = int64(0)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t\tcoinCount[0] = append(coinCount[:len(coinValues)], coinCount[len(coinValues)])\n\t\t\tfor k := 0; k < len(coinCount[k]); k++ {\n\t\t\t\tcoinCount[k+1][r.rem(&big.NewInt(i), strconv.Itoa(k)).Uint64()]++\n\t\t\t}\n\n\t\t\t\n\n\t\t\ttotal := big.NewInt(1)\n\t\t\tfor p := 0; p < len(coinCount)[len(coinCount)-1]; p++ {\n\t\t\t\ttotal.Add(total, big.NewInt(int64(coinCount[p][i])))\n\t\t\t}\n\t\t\tif total.Uint64()>max{\n\t\t\t\tmax=int64(max)\n\t\t\t\tbestSum=total.Uint64()\n\t\t\t\tbestIndex=i\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"The maximum number of combinations that can be made using\",coinValues,\"values is:\",bestSum,max+1-9)\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 202,
    "input": "Translate Java to Go:public static boolean perf(int n){\n\tint sum= 0;\n\tfor(int i= 1;i < n;i++){\n\t\tif(n % i == 0){\n\t\t\tsum+= i;\n\t\t}\n\t}\n\treturn sum == n;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc isPrime(n int) bool {\n    switch {\n    case n <= 3:\n        return true\n    case n >= 4:\n        return n!= 2 && n!= 3 &&\n            gcd(n, 4) == 1 \n    default:\n        return false\n    }\n}\n\n\nfunc gcd(a, b int) int {\n    var swap bool\n    var aR, bR int\n    if a > b {\n        aR = a\n        bR = b\n        swap = true\n    }\n\n    \n    for (bR == 0 ||!swap) {  \n        \n        if (!isprime(b)) {\n            \n            if (!isprime(a)) {\n                return -a\n            } else {\n                \n                a /= b\n            }\n        }\n        \n        \n        if (!isprime(a)) {\n            \n            \n            a *= bR\n            bR = a\n            swap = true\n        }\n    }\n    \n    \n    if (aR == 1) {\n        return a\n    }\n    return gcd(gcd(aR, a), a)\n}\n\n\n\ntype res struct{ num, den int }\n\n\nvar testCases []res\n\n\nfunc printOne(tc res) {\n    fmt.Printf(\"gcd(%d, %d) = %d\\n\", tc.num, tc.den,\n        r := gcd(tc.num, tc.den))\n    for _, t => v in &testCases {\n        if tc.num == v.num && tc.den == v.den {\n            break\n        }\n    }\n    if len(testCases) == 0 {\n        fmt.Println(\"No result found\")\n    }\n    if tc.num * tc.den == 1 {\n        fmt.Println(\"divisible by both numbers\")\n    } else {\n        fmt.Println(\"Not divisible by each number:\")\n        count := 0\n        for _, t => v in &testCases {\n            if tc.num == v.num ||\n                tc.den == v.den {\n                continue\n            }\n            count++\n            if r == gcd(tc.num, v.den)*v.natNumInt()/tc.den*tc.denNumInt() {\n                fmt.Printf(\"%6.5s | %7.5s -> %s\\n\",\n                    tc.num==t.num? \"\" : \"\\n\"\n                    + fmt.Sprintf(\"%8s/%8s)\", tc.den, t.den),\n                fmt.Printf(\"\\033[K%10s\\t%d/s\\033[K%s\\n\",\n                    r.String(), tc.num, tc.den))\n            }\n        }\n        fmt.Printf(\"\\nThe lowest common multiple of %d and %d is %d.\\n\",\n            tc.num, tc.den, r)\n    }\n}\n\n\n\n\nfor _, tc := range []int{} {\n    printhone(tc)\n} \n\nfor _, tc := range []int{11} {\n    printOne(res{{num: 11, den: tc})\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 203,
    "input": "Translate C# to Go:using System;\nusing System.Reflection;\n\npublic class Rosetta\n{\n    public static void Main()\n    {\n        \n        BindingFlags flags = BindingFlags.Instance | BindingFlags.Static\n            | BindingFlags.Public | BindingFlags.NonPublic\n            | BindingFlags.DeclaredOnly;\n\n        foreach (var method in typeof(TestForMethodReflection).GetMethods(flags))\n            Console.WriteLine(method);\n    }\n    \n    class TestForMethodReflection\n    {\n        public void MyPublicMethod() {}\n        private void MyPrivateMethod() {}\n        \n        public static void MyPublicStaticMethod() {}\n        private static void MyPrivateStaticMethod() {}\n    }\n    \n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc printValue(p *int) {\n\tfmt.Println(\"value of p is\", p)\n}\n\n\ntype floatType struct {\n\tp *float64\n}\n\n\n\nfunc printFloat(f *floatType) {\n\tfmt.Println(\"floating point value:\", f.p)\n}\n\n\n\n\nfunc main() {\n\n\tvar i int32 = 1 \n\tintType := &i \n\n\tfloatI := &floatType{&float64(i)} \n\n\n\tprintValue(&i)\n\n\n\n\t\n\tx, ok := reflect.TypeOf(int(3))  \n\tif ok {\n\t\t\n\t\tprintValue(x.(*int))\n\n\t}\n\t\n\t\n\tu, ok := reflect.TypeOf(float64(3))   \n\tif ok {\n\t\tprintFloat(&u)}\n}\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 204,
    "input": "Translate C++ to C#:auto strA = R\"(this is\na newline-separated\nraw string)\";\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nnamespace RosettaCode {\n    class Program {\n        static void Main() {\n            string[] input = {\"http:\n                               \"HTTP:\n                                       \"User-Agent: Mozilla/5.0\",\n                                \" HTTP:\n                                   \"Content-Type: application/x-www-form-urlencoded\",\n                                \"name=foo&some=val\";\n                        ;\n                       String.Format(\"POST /login.html {0}\\n\", Environment.NewLine);\n                      WebClient wc = new WebClient();\n                      Stream dataStream =wc.DownloadData(input[3]);\n                      string result = Encoding.ASCII.GetString(dataStream.ToArray());\n                      \n                      Console.WriteLine(result);\n                    }\n                }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 205,
    "input": "Translate C to Go:#include <stdio.h>\n#include <string.h>\n\n\nvoid longmulti(const char *a, const char *b, char *c)\n{\n\tint i = 0, j = 0, k = 0, n, carry;\n\tint la, lb;\n\n\t\n\tif (!strcmp(a, \"0\") || !strcmp(b, \"0\")) {\n\t\tc[0] = '0', c[1] = '\\0';\n\t\treturn;\n\t}\n\n\t\n\tif (a[0] == '-') { i = 1; k = !k; }\n\tif (b[0] == '-') { j = 1; k = !k; }\n\n\t\n\tif (i || j) {\n\t\tif (k) c[0] = '-';\n\t\tlongmulti(a + i, b + j, c + k);\n\t\treturn;\n\t}\n\n\tla = strlen(a);\n\tlb = strlen(b);\n\tmemset(c, '0', la + lb);\n\tc[la + lb] = '\\0';\n\n#\tdefine I(a) (a - '0')\n\tfor (i = la - 1; i >= 0; i--) {\n\t\tfor (j = lb - 1, k = i + j + 1, carry = 0; j >= 0; j--, k--) {\n\t\t\tn = I(a[i]) * I(b[j]) + I(c[k]) + carry;\n\t\t\tcarry = n / 10;\n\t\t\tc[k] = (n % 10) + '0';\n\t\t}\n\t\tc[k] += carry;\n\t}\n#\tundef I\n\tif (c[0] == '0') memmove(c, c + 1, la + lb);\n\n\treturn;\n}\n\nint main()\n{\n\tchar c[1024];\n\tlongmulti(\"-18446744073709551616\", \"-18446744073709551616\", c);\n\tprintf(\"%s\\n\", c);\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc multifact(int64 x, int64 y) [][2]int {\n    \n    var result [[2]int]\n    if x < 0 {\n        x = -x\n        y = -y\n    }\n    for xx := x; xx!= 0; xx -= y {\n        r := []int{-y, xx}\n        switch true {\n        case xx%2 == 0:\n            r[1] = r[0] / 2\n        case yy > 0:\n            r[0], r[1] = r[1], r[0] / yy\n        default:\n            \n            \n            \n        }\n        result = append(result, r)\n    }\n    return result\n}\n\n\nvar testCases = [\n    {-17, 11},\n    {-15, 13},\n    {-7, 95},\n]\n\nfunc printMatrix(m [][]int64) {\n    fmt.Println(\"   l r\")\n    for _, row := range m {\n        fmt.Printf(\"|%-8d | %-8d|\\n\", row[0], row[1])\n    }\n    fmt.Println(\"+-----+-----+\\n|------|------\\n\")\n}\n\nfunc commatize(s string) string {\n    le := len(s)\n    for i := le - 3; i >= 1; i -= 3 {\n        s = s(0:i) + \",\" + s(i)\n    }\n    if le <= 9 {\n        s = s(0:1)\n    }\n    return s\n}\n\nfunc main() {\n    \n    \n    for _, tc := range testCases {\n        \n        fmt.Print(tc)\n        h := len(strconv.FormatInt(tc[0]))\n        v := len(strconv.FormatInt(tc[1]))\n\n        \n        \n        f := make([]byte, max(h+v))\n        e := bytes.Repeat('0', h-v/2)\n        d := bytes.Repeat('-', v-h/2)\n        t := strings.Join(e+d+f, \"\")\n        fmt.Printf(\"\\t%s\\t%s\\n\", t, commatize(tc))\n\n        \n        \n        \n        mx := 0\n        mm := 0\n        for _, rm := range multifact(tc[0], tc[1]) {\n            a := remax(rm[0].h-1, 1)\n            b := remin(mm+a, tc[0].len())\n            sum := 0\n            count := 0\n            for _,r := range rm[:a] {\n                sum += float64(r[1])*float64(sum)+sum*float64(r[0])\n                count++\n            }\n            if sum>mx{mm,a,b} {\n                \n                mx = mm\n                mm = a\n                b = 1 \n            } else if sum==max(mx,mmin){  \n                \n                \n                minl := math.Min(minl, mm-a-b)\n                if minl == mm-a-b {\n                    mm = a+b\n                } else {\n                    mm = a+b+1\n                }\n            }\n        }\n        \n\n        fmt.Printf(\"\\nmaximum is %v with rows %d,%d,\\nwith sums \\n\", tc,\n            mm, a).PadRight(len(t),5,\" \")\n        fmt.Printf(\"and minimum is %v with columns \",commatize(tx)).PadLeft(\n            len(d),6,\" \"\n        )\n    }\n}\n\n\n\nfunc remax(n, w uint) uint {\n    p := n/(w-1)\n    q := n%(w-1)\n    if p*q > n {\n        return n\n    }\n    return n + p*(p-1)/2 + q*p\n}\n\n\n\n\nfunc remin(w uint) uint {\n    return uint((w-1)*(w-3)/2 + w/4)\n}\n\n\n\n\n\nconst max = 100000\n\n\ntype matrix struct {\n    data [][2]int\n    length int\n}\n\nfunc newMultFact(x, y uint) (*matrix, error) {\n    if x<0 || y<=0 {\n        return nil, fmt.Errorf(\"invalid arguments\")\n    }\n    if x&1 == 1 &&!(y>>1)&(y<<1) {\n        return &matrix{{[][2]int{}, 0}, 0}, nil\n    }\n    if x&(y>>1))&&!(x<<1)&(y>>1){\n        return &matrix{{[][][2]int{}{}{}{}{}{}{}{}}, 0},nil\n    }\n    \n    \n    \n    mx := 0\n    mm := 0\n    \n    \n    \n    \n    \n    lastX := x-(xx:=uint(xx))\n    lastY := y-(yy := uint(yy))\n    for xy := uint(xy); xy<=(lastX+x)-1;xy++ {\n        lm := remax(lastY+y, mm)\n        sm := 0\n        for lr := uint(lr) ;lr<=(lm-x)<<1;lr+=rm := rm[(rr := rm+(",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 206,
    "input": "Translate PHP to Python:<?php\n$time = new DateTime('March 7 2009 7:30pm EST');\n$time->modify('+12 hours');\necho $time->format('c');\n?>\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": ">>> import time\n>>> time.asctime(time.gmtime(0))\n'Thu Jan  1 00:00:00 1970'\n>>>\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 207,
    "input": "Translate C to C++:#include <locale.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <stdio.h>\n\n\n\nuint64_t digit_sum(uint64_t n, uint64_t sum) {\n    ++sum;\n    while (n > 0 && n % 10 == 0) {\n        sum -= 9;\n        n /= 10;\n    }\n    return sum;\n}\n\ninline bool divisible(uint64_t n, uint64_t d) {\n    if ((d & 1) == 0 && (n & 1) == 1)\n        return false;\n    return n % d == 0;\n}\n\nint main() {\n    setlocale(LC_ALL, \"\");\n\n    uint64_t previous = 1, gap = 0, sum = 0;\n    int niven_index = 0, gap_index = 1;\n\n    printf(\"Gap index  Gap    Niven index    Niven number\\n\");\n    for (uint64_t niven = 1; gap_index <= 32; ++niven) {\n        sum = digit_sum(niven, sum);\n        if (divisible(niven, sum)) {\n            if (niven > previous + gap) {\n                gap = niven - previous;\n                printf(\"%'9d %'4llu %'14d %'15llu\\n\", gap_index++,\n                       gap, niven_index, previous);\n            }\n            previous = niven;\n            ++niven_index;\n        }\n    }\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include<iostream>\n\nusing namespace std;\n\n\nclass m35{\nprivate:\n\t\n\tint p[3][5];\n\npublic:\n\tm35(){\n\t\tfor(int i=0;i<3;i++){\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tp[i][j]=i*j*i+1;\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tint operator()(const int x,int y){\n\t\treturn p[y-1][x-1];\n\t}\n};\n\nvoid printTable(const char* title){\n\tcout<<title<<'\\n';\n\tfor(int y=0;y<8;y++){\n\t\tcout<<\" \";\n\t\tfor(int x=0;x<8+x;x++){\n\t\t\tchar space=' ';\n\t\t\tif(x<y){space='\\t';}\n\t\t\telse{space='-\";}\n\t\t\tcout<<space||x==7-y||\n\t\t\t\t(y>=2&&y<=6)?(char)(65+y+'A')==yield?(' '):'_';\n\t\t}\n\t\tcout<<\"\\n\";\n\t}\n}\n\n\nint main()\n{\n\tprintTable(\"m35's digits\");\n\tprintTable(\"primes under seven from m35\");\n\n\tint start=1000000;\n\tint count=0;\n\tstd::cout << \"The first ten thousand m35 numbers with a single-digit:\\n\";\n\twhile(count<10){\n\t\tif((p[0][end()-5]==1)&&(p[1][end()-4]==1)){\n\t\t\tcount++;\n\t\t\tprintf(\"%5s \",std::string(p[0],5));\n\t\t\tprintf(\"%5s \",std::string(p[1],5));\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t\tend--;\n\t}\n\t\n\tint max=6000;\n\tint begin=3000;\n\tint end=4000;\n\tint fourdigitcount=0;\n\tint fivedigitcount=0;\n\t\n\tfor(;start<max;++start){\n\t\t\n\t\tbool found=false;\n\t\tfor(int i=start+iend;i>begin;i--){\n\t\t\t\n\t\t\tif(i%10==0){//it is now in either of its doublets so check that too...\n\t\t\t\t\n\t\t\t\tint[] temp=p[(i-begin)%end,(i-start)%end];\n\t\t\t\tfor(int k=(k==NULL)||(k<p.length-k)==0;k<k?p[k]/temp[k]+1,p[k]/temp[k]+=1,temp[k]);\n\t\t\t\tif(p[(i-begin)%end==(i-start)%end]!=temp[0] || p[(i-begin)%end+(i-start)%end]!=temp[1]){\n\t\t\t\t\tcontinue;//not all digits are part of their doubles yet....\n\t\t\t\t}else if(p[(i-begin)%end+(i-start)%end]%10!=1){\n\t\t\t\t\t\n\t\t\t\t\tfound=true;break;\n\t\t\t\t} else {found=false;break;}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\ttemp=new int[p.length+k];\n\t\t\tfor(k=k==NULL||(k>p.length-k)==0&&(k<p.length))==0?(temp[k]=(p[(i-begin)+k])&1):(temp[temp[k]]=p[(i-begin)+k]&1);\n\t\t\tfor(k+=1;(k<(p.length)+(k==NULL)||(!found)&&k+p.length-p.length==end);(k/=2),(p[(i-begin)+k])==0)p[(i-end)-1+k]=(p[(i-begin)+k])+1;\n\t\t\tfor(k=((k==NULL)||(k!=(p.length-(i-start))+k)<==0&&(k>(p.length)-(i-start))-1)*(k==-1)||!(k==NULL)){for(l=k*(k==NULL)!=NULL;l<=(k==NULL)|(l>k)*!==0;p[l]=-1);//swap adjacent pairs.}|p[((k==NULL)||(k!=(p.length-(i-start)))+(l==NULL))?k:(k*-1+l)]]=(((k==NULL)||(k!=(p.length-k))^==0|(l==NULL))*p[(i-begin)+k];}//copy each pair into new array...if(temp[end]-1==0)//delete this line when done: delete [](k)=temp;return p;\n\t}\n\t\n\tint limit=max/30;\n\tint limit_end=min(start+limit,max-limit);\n\n\t\n\tfor(int i=0;i<lend;i++)if(p[i][(i+min(start-max,lindimensions))/length](i)==1){\n\n\t\tlimit_end=i-limit;\n\t\tbreak;\n\t}\n\t\n\tprintf(\"First %lu m35 numbers with exactly %u's have no single-digit:\",limit,end);\n\tfor(int i=0;i<limit;i++){printf(\"'%5s ',\",(endl+=(p[i][end-length]<1)<<==0?\"\":\" has \"),endl);}\n\tprintf(\"\\n\");printTable(\" \");\n\n\treturn 0;\n}\n\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 208,
    "input": "Translate C++ to Go:#include <iomanip>\n#include <iostream>\n#include <boost/math/constants/constants.hpp>\n#include <boost/multiprecision/cpp_dec_float.hpp>\n\nusing big_float = boost::multiprecision::cpp_dec_float_100;\n\nbig_float f(unsigned int n) {\n    big_float pi(boost::math::constants::pi<big_float>());\n    return exp(sqrt(big_float(n)) * pi);\n}\n\nint main() {\n    std::cout << \"Ramanujan's constant using formula f(N) = exp(pi*sqrt(N)):\\n\"\n        << std::setprecision(80) << f(163) << '\\n';\n    std::cout << \"\\nResult with last four Heegner numbers:\\n\";\n    std::cout << std::setprecision(30);\n    for (unsigned int n : {19, 43, 67, 163}) {\n        auto x = f(n);\n        auto c = ceil(x);\n        auto pc = 100.0 * (x/c);\n        std::cout << \"f(\" << n << \") = \" << x << \" = \"\n            << pc << \"% of \" << c << '\\n';\n    }\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tvar pow, root uint64 \n\tconst limit = 20000 \n\n\tfor i := uint64(1); ;i++ {\n\t\t\n\t\troot = uint64(i)*pow + uint64(root)\n\t\tif root >= limit {\n\t\t\tlog.Printf(\"%d: %d\\n\", i, root)\n\t\t\tbreak\n\t\t}\n\t\tpow *= -2  \n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 209,
    "input": "Translate Python to Go:import os\n\nfrom collections import Counter\nfrom functools import reduce\nfrom itertools import permutations\n\nBASES = (\"A\", \"C\", \"G\", \"T\")\n\n\ndef deduplicate(sequences):\n    \n    sequences = set(sequences)\n    duplicates = set()\n\n    for s, t in permutations(sequences, 2):\n        if s != t and s in t:\n            duplicates.add(s)\n\n    return sequences - duplicates\n\n\ndef smash(s, t):\n    \n    for i in range(len(s)):\n        if t.startswith(s[i:]):\n            return s[:i] + t\n    return s + t\n\n\ndef shortest_superstring(sequences):\n    \n    sequences = deduplicate(sequences)\n    shortest = \"\".join(sequences)\n\n    for perm in permutations(sequences):\n        superstring = reduce(smash, perm)\n        if len(superstring) < len(shortest):\n            shortest = superstring\n\n    return shortest\n\n\ndef shortest_superstrings(sequences):\n    \n    sequences = deduplicate(sequences)\n\n    shortest = set([\"\".join(sequences)])\n    shortest_length = sum(len(s) for s in sequences)\n\n    for perm in permutations(sequences):\n        superstring = reduce(smash, perm)\n        superstring_length = len(superstring)\n        if superstring_length < shortest_length:\n            shortest.clear()\n            shortest.add(superstring)\n            shortest_length = superstring_length\n        elif superstring_length == shortest_length:\n            shortest.add(superstring)\n\n    return shortest\n\n\ndef print_report(sequence):\n    \n    buf = [f\"Nucleotide counts for {sequence}:\\n\"]\n\n    counts = Counter(sequence)\n    for base in BASES:\n        buf.append(f\"{base:>10}{counts.get(base, 0):>12}\")\n\n    other = sum(v for k, v in counts.items() if k not in BASES)\n    buf.append(f\"{'Other':>10}{other:>12}\")\n\n    buf.append(\" \" * 5 + \"_\" * 17)\n    buf.append(f\"{'Total length':>17}{sum(counts.values()):>5}\")\n\n    print(os.linesep.join(buf), \"\\n\")\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"TA\", \"AAG\", \"TA\", \"GAA\", \"TA\"),\n        (\"CATTAGGG\", \"ATTAG\", \"GGG\", \"TA\"),\n        (\"AAGAUGGA\", \"GGAGCGCAUC\", \"AUCGCAAUAAGGA\"),\n        (\n            \"ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT\",\n            \"GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT\",\n            \"CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA\",\n            \"TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC\",\n            \"AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT\",\n            \"GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC\",\n            \"CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT\",\n            \"TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC\",\n            \"CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC\",\n            \"GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT\",\n            \"TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC\",\n            \"CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA\",\n            \"TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA\",\n        ),\n    ]\n\n    for case in test_cases:\n        for superstring in shortest_superstrings(case):\n            print_report(superstring)\n\n    \n    \n    \n    \n    \n    \n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport(\n\t\"fmt\"\n\t\"strings\"\n\t\"strconv\"\n)\n\n\ntype nucleo struct {\n\tn      string\n\tcount int64\t\n}\n\n\nfunc gen(nu1, nu2 string, countThreshold uint32) []nucleo{\n\tc := make([]nucleo, 0, countThreshold*3)\n\tfor _, n := range []string{nu1, nu2}{\n\t\tif cLen := len(c); cLen<countThreshold{c}.len;{\n\t\t\tc = append(c,c[len(c)-cLen])\n\t\t}\n\t}:c\n\treturn c\n}\n\nvar a=\"ATGCCAN\"\nvar b=\"AAAAAAAA\"\n\nconst start=uint(0x10000)\nconst stop=start+start/4 \n\nfunc (c nucleo) String(){\n\ts:=make(map[byte]int,a,len(a))\n\tr:=append(strings.Repeat(' ',len(a)),a...)\n\tvar sb strings.Builder\n\t\n\tsb.WriteByte(r[start]) \n\tbits:[]=r[start:start+stop]\n\tmultiplier:=int(start/(stop-start)/3)+1 \n\t\n\tfor _,bbit:&bits{\n\t\tfmt.Fprintf(&sb,\"%c%v%c\\n\",b,bit,suffix(b))  \n\t\t\n\t\tk,v:_,_&=(bbit>>63)&7\n\t\tv=_-(k<<3)|3\n\t\ts[v]&^=((1<<(v-6))-1)<<6\n\t\ts[b+v]&^=~((1<<(s[v]-6))-1) >> 18\n\t}\n\t\n\t\n\ti:v>=0&&v<(stop-v)>>22{\n\t\ts[v]+=-1 << (23-s[v]))\n\t}\n\t\n\t\n\t\n\ti:k==0&&(p,&z)=find(p.start,p.len)\n\tp.k=k\n\tz+=p.len*(8-p.parity)\n\t_,_&_=(p.start+p.len)//3+(p.length>>1)\n\tfor p.end=i;\n\t{\n\t\tj,k,i,z=&(nil),(p.start+p.len//3)+(p.length>>(1<<24)),\n\t\t\t\tp.k&(1<<31),\n\t\t\t\tz+\n\t\t\t\t\n\t\t\t\n\t\tq:=q?z:(i);\n\t\tif q>p.end||!s[q]{break};\n\t\ti=q\n\t}\n\treturn fmt.Sprintf(\"%v(%v)\",c.c,nucleos[cend](c))\n}\n\n\n\nfunc suffix(b byte)(t nucleo){\n\tt=nucleo{}\n\tt.n=b\n\tt.count++\n\treturn t\n}\n\n\n\n\nfunc find(i,int)(j nucleo,\n\tstart,end,int)\n\tfor j.i!=i{\n\t\tj=c\n\t\tfor j.start==i && j.len>i;j.i=j.j,j=i,start=end,{break}}\n\treturn j\n}\n\n\n\n\n\nfunc nucleos(end(int))(ns...nucleo){\n\tfor ; end<len(a)&&a[end]!=0;++end;\n\tfor _,n:nodes...do{\n\t\tyielded:=false\n\t\tfor d,e &>(end-len(a))/2 do{\n\t\t\tif!suffix(d)%e{yielded=true;break;}\n\t\t}\n\t\tif yielded{return}}}\n\tfunc (){}\n\n\n\nfunc main(){\n\tconst maxStart=maxEnd:=start-stop\n\tfor _,nu1:=range gen(a,maxStart,\"\")...\n\t\tfor _,nu2:=range gen(maxStart,maxEnd,\"\"){\n\t\t\tgen[nus].clear()\n\t\t\tfor ns...in nucleos(maxStart){gen[nus]+=ns}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tfor _,nu1:=range gen[maxmaxStart,...]:for _,nu2:=range gen(...,:...) {...}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tfor _,nu1:=range gen(...) for _,nu2:=range gen(:...,\":\")...{}\n\n\t\t\n\t\tfor _,nu1:=range gen(...,maxMax)...for _,nu2:=range gen(...,)....{}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tfor _,nu1:=range gen(...,maxStart,...)\"...\" for _,nu2:=range gen(...,:\"\"...)}...\"\n\n\t\t\n\t\tfor _,nu1:=range gen(...,start,...)\"...\" for _,nu2:=range gen(...,\":\"...)}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tfor _,nu1:=range gen(...,start:maxStop,...\n\t\t\tfor _,nu2:=range gen(...,start+:start/\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 210,
    "input": "Translate Java to Python:import org.apache.commons.math3.distribution.TDistribution;\n\npublic class WelchTTest {\n    public static double[] meanvar(double[] a) {\n        double m = 0.0, v = 0.0;\n        int n = a.length;\n        \n        for (double x: a) {\n            m += x;\n        }\n        m /= n;\n        \n        for (double x: a) {\n            v += (x - m) * (x - m);\n        }\n        v /= (n - 1);\n        \n        return new double[] {m, v};\n    \n    }\n    \n    public static double[] welch_ttest(double[] x, double[] y) {\n        double mx, my, vx, vy, t, df, p;\n        double[] res;\n        int nx = x.length, ny = y.length;\n        \n        res = meanvar(x);\n        mx = res[0];\n        vx = res[1];\n        \n        res = meanvar(y);\n        my = res[0];\n        vy = res[1];\n        \n        t = (mx-my)/Math.sqrt(vx/nx+vy/ny);\n        df = Math.pow(vx/nx+vy/ny, 2)/(vx*vx/(nx*nx*(nx-1))+vy*vy/(ny*ny*(ny-1)));\n        TDistribution dist = new TDistribution(df);\n        p = 2.0*dist.cumulativeProbability(-Math.abs(t));\n        return new double[] {t, df, p};\n    }\n\n    public static void main(String[] args) {\n        double x[] = {3.0, 4.0, 1.0, 2.1};\n        double y[] = {490.2, 340.0, 433.9};\n        double res[] = welch_ttest(x, y);\n        System.out.println(\"t = \" + res[0]);\n        System.out.println(\"df = \" + res[1]);\n        System.out.println(\"p = \" + res[2]);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from math import sqrt\n\ndef test(a,b):\n    assert abs(sqrt(sum([a,b]*[0,1])) -\n              a*b) < 1e-15,\n       'Wrong result!'\n    assert pow(sqrt(abs(a+b)),2) == a+b,\n       'Incorrect sign!'\n\na= float(input('Enter number A:')\nb=float(input('Enter number B:'))\n\nprint ('A=B=%g %, %r' %(a,b,test(a,b)))\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 211,
    "input": "Translate C++ to VB:#include <stack>\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Sub postfix()\n    Dim stack As New Stack()\n    Dim op1 As String, op2 As String\n    Dim ch As Char\n    Do While True\n        ch = Asc(InputBox(\"Input character: \")) - Asc(\" \")\n        Select Case ch\n            Case 0: Exit While \n            Case #:\n                Debug.Print \"Final result:\"\n                op1 = TopOf(stack)\n                op2 = TopOf(stack)\n                If IsOperator(op2) Then\n                    op2 = EvaluateCPOperator(op2)\n                End If\n                If IsOperator(op1) Then\n                    op1 = EvaluateCPOperator(op1)\n                End If\n                Debug.Print Right(Left(op2, 1), 1) & \" + \"\n                Debug.Print Left(op1, 1), Right(Left(op2, 1), 1), Debug.Print Right(Left(op2, 2), 1) & \" =\"\n                Debug.Print Right(Left(op2, 3), 1)\n                Set stack = op2\n            Case Else\n                op1 = ChompFromTop(stack)\n                Set stack = op1\n        End Select\n        PushToStack(op1)\n    Loop\nEnd Sub \n\nPrivate Function EvaluateCPOperator(sOp As String) As String\n\nDim i As Integer\n   For i = LBound(sOp) To UBound(sOp)\n       If IsOperator(sOp(i)) Then\n           EvaluateCPOperator = sOp(i) & EvaluateCPOperator(TopOf(stack))\n           Exit Function\n       End If\n   Next\n   EvaluateCPOperater = \"\"\nEnd Function \n\n\nFunction ChompFromTop(tAs TheCollection) As String\n\n\n\nDim o As String, c As Long\no = Trimm(Right(Left(tAs,c),c))\n\nWhile Len(o) > 1\n    \n    If IsOperator(CStr(Asc(o))) Or IsNumber(CStr(Asc(o))) Then\n        c = Len(o)\n        ChompFromTop = Mid(o,CInt(c/2),c-Int(c/2)): o = Left(o,BInt(c)-Int(c/2))\n    ElseIf o=\"\" Then Exit Function\n    End If\n\n\nEnd Function \n\n\n\nSub PushToStack(a As String)\n\n\n\nDim t As Collection\nSet t = New Collection\nt.Add a\nset t = stack\n\n\n\n\nend sub\n",
    "input_language": "C++",
    "output_language": "VB"
  },
  {
    "id": 212,
    "input": "Translate C to Go:#include<stdlib.h>\n#include<locale.h>\n#include<wchar.h>\n#include<stdio.h>\n#include<time.h>\n\nchar rank[9];\n\nint pos[8];\n\nvoid swap(int i,int j){\n\tint temp = pos[i];\n\tpos[i] = pos[j];\n\tpos[j] = temp;\n}\n\nvoid generateFirstRank(){\n\t int kPos,qPos,bPos1,bPos2,rPos1,rPos2,nPos1,nPos2,i;\n\t \n\t for(i=0;i<8;i++){\n\t\t rank[i] = 'e';\n\t\t pos[i] = i;\n\t }\n\t\t \n\t do{\n\t\t kPos = rand()%8;\n\t\t rPos1 = rand()%8;\n\t\t rPos2 = rand()%8;\n\t }while((rPos1-kPos<=0 && rPos2-kPos<=0)||(rPos1-kPos>=0 && rPos2-kPos>=0)||(rPos1==rPos2 || kPos==rPos1 || kPos==rPos2));\n\n\t rank[pos[rPos1]] = 'R';\n\t rank[pos[kPos]] = 'K';\n\t rank[pos[rPos2]] = 'R';\n\t \n\t swap(rPos1,7);\n\t swap(rPos2,6);\n\t swap(kPos,5);\n\t \n\t do{\n\t\t bPos1 = rand()%5;\n\t\t bPos2 = rand()%5;\n\t }while(((pos[bPos1]-pos[bPos2])%2==0)||(bPos1==bPos2));\n\n\t rank[pos[bPos1]] = 'B';\n\t rank[pos[bPos2]] = 'B';\n\t \n\t swap(bPos1,4);\n\t swap(bPos2,3);\n\t \n\t do{\n\t\t qPos = rand()%3;\n\t\t nPos1 = rand()%3;\n\t }while(qPos==nPos1);\n\t \n\t rank[pos[qPos]] = 'Q';\n\t rank[pos[nPos1]] = 'N';\n\t \n\t for(i=0;i<8;i++)\n\t\t if(rank[i]=='e'){\n\t\t\t rank[i] = 'N';\n\t\t\t break;\n\t\t }\t\t\n}\n\nvoid printRank(){\n\tint i;\n\t\n\t#ifdef _WIN32\n\t\tprintf(\"%s\\n\",rank);\n\t#else\n\t{\n\t\tsetlocale(LC_ALL,\"\");\n\t\tprintf(\"\\n\");\n\t\tfor(i=0;i<8;i++){\n\t\t\tif(rank[i]=='K')\n\t\t\t\tprintf(\"%lc\",(wint_t)9812);\n\t\t\telse if(rank[i]=='Q')\n\t\t\t\tprintf(\"%lc\",(wint_t)9813);\n\t\t\telse if(rank[i]=='R')\n\t\t\t\tprintf(\"%lc\",(wint_t)9814);\n\t\t\telse if(rank[i]=='B')\n\t\t\t\tprintf(\"%lc\",(wint_t)9815);\n\t\t\tif(rank[i]=='N')\n\t\t\t\tprintf(\"%lc\",(wint_t)9816);\n\t\t}\n\t}\n\t#endif\n}\n\nint main()\n{\n\tint i;\n\t\n\tsrand((unsigned)time(NULL));\n\t\n\tfor(i=0;i<9;i++){\n\t\tgenerateFirstRank();\n\t\tprintRank();\n\t}\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n)\n\nfunc main() {\n    \n    var a [21]int\n    \n    fmt.Println(\"before:   \", a)\n    \n    \n    \n    \n    \n    rand.Seed(time.Now().UnixNano())\n    for i := range a {\n        a[i] = rand.Intn(10)\n    }\n    \n    fmt.Println(\"after:     \", a)\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 213,
    "input": "Translate C++ to C#:#include <iostream>\n \nvoid recurse(unsigned int i)\n{\n  std::cout<<i<<\"\\n\";\n  recurse(i+1);\n}\n \nint main()\n{\n  recurse(0);\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program {\n    static void Main(string[] args) {    \n        PrintAll(\"test\", \"rosetta code\", 123, 5.6);     \n    }\n\n    private static void PrintAll(params object[] varargs) {\n        foreach (var item in varargs) {\n            Console.WriteLine(item);\n        }\n    }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 214,
    "input": "Translate C to Python:#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#ifndef M_PI\n#define M_PI 3.14159265358979323846\n#endif\n\ntypedef double (* Ifctn)( double t);\n\ndouble Simpson3_8( Ifctn f, double a, double b, int N)\n{\n    int j;\n    double l1;\n    double h = (b-a)/N;\n    double h1 = h/3.0;\n    double sum = f(a) + f(b);\n\n    for (j=3*N-1; j>0; j--) {\n        l1 = (j%3)? 3.0 : 2.0;\n        sum += l1*f(a+h1*j) ;\n    }\n    return h*sum/8.0;\n}\n\n#define A 12\ndouble Gamma_Spouge( double z )\n{\n    int k;\n    static double cspace[A];\n    static double *coefs = NULL;\n    double accum;\n    double a = A;\n\n    if (!coefs) {\n        double k1_factrl = 1.0;\n        coefs = cspace;\n        coefs[0] = sqrt(2.0*M_PI);\n        for(k=1; k<A; k++) {\n            coefs[k] = exp(a-k) * pow(a-k,k-0.5) / k1_factrl;\n            k1_factrl *= -k;\n        }\n    }\n\n    accum = coefs[0];\n    for (k=1; k<A; k++) {\n        accum += coefs[k]/(z+k);\n    }\n    accum *= exp(-(z+a)) * pow(z+a, z+0.5);\n    return accum/z;\n}\n\ndouble aa1;\ndouble f0( double t)\n{\n    return  pow(t, aa1)*exp(-t); \n}\n\ndouble GammaIncomplete_Q( double a, double x)\n{\n    double y, h = 1.5e-2;  \n\n    \n    y = aa1 = a-1;\n    while((f0(y) * (x-y) > 2.0e-8) && (y < x))   y += .4;\n    if (y>x) y=x;\n\n    return 1.0 - Simpson3_8( &f0, 0, y, (int)(y/h))/Gamma_Spouge(a);\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from math import *\n\ndef gamma(x):\n    'One-hundredth note of the Pythagorean distribution'\n    return x**(-sqrt(x))\n\nfor i in range(100000):  \n    n = rand() / float(99.9999987)     \n    print('{:6.1f}: {}'.format(n, gamma(n))))\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 215,
    "input": "Translate Go to VB:package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n    \"strings\"\n)\n\nfunc factorial(n int64) *big.Int {\n    var z big.Int\n    return z.MulRange(1, n)\n}\n\nvar one = big.NewInt(1)\nvar three = big.NewInt(3)\nvar six = big.NewInt(6)\nvar ten = big.NewInt(10)\nvar seventy = big.NewInt(70)\n\nfunc almkvistGiullera(n int64, print bool) *big.Rat {\n    t1 := big.NewInt(32)\n    t1.Mul(factorial(6*n), t1)\n    t2 := big.NewInt(532*n*n + 126*n + 9)\n    t3 := new(big.Int)\n    t3.Exp(factorial(n), six, nil)\n    t3.Mul(t3, three)\n    ip := new(big.Int)\n    ip.Mul(t1, t2)\n    ip.Quo(ip, t3)\n    pw := 6*n + 3\n    t1.SetInt64(pw)\n    tm := new(big.Rat).SetFrac(ip, t1.Exp(ten, t1, nil))\n    if print {\n        fmt.Printf(\"%d  %44d  %3d  %-35s\\n\", n, ip, -pw, tm.FloatString(33))\n    }\n    return tm\n}\n\nfunc main() {\n    fmt.Println(\"N                               Integer Portion  Pow  Nth Term (33 dp)\")\n    fmt.Println(strings.Repeat(\"-\", 89))\n    for n := int64(0); n < 10; n++ {\n        almkvistGiullera(n, true)\n    }\n\n    sum := new(big.Rat)\n    prev := new(big.Rat)\n    pow70 := new(big.Int).Exp(ten, seventy, nil)\n    prec := new(big.Rat).SetFrac(one, pow70)\n    n := int64(0)\n    for {\n        term := almkvistGiullera(n, false)\n        sum.Add(sum, term)\n        z := new(big.Rat).Sub(sum, prev)\n        z.Abs(z)\n        if z.Cmp(prec) < 0 {\n            break\n        }\n        prev.Set(sum)\n        n++\n    }\n    sum.Inv(sum)\n    pi := new(big.Float).SetPrec(256).SetRat(sum)\n    pi.Sqrt(pi)\n    fmt.Println(\"\\nPi to 70 decimal places is:\")\n    fmt.Println(pi.Text('f', 70))\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Imports System.Numerics\n\nModule Module1\n\n    Function Factorial(i As BigInteger) As BigInteger\n        If i <= 0 Then\n            Throw New ArgumentOutOfRangeException()\n        End If\n        Dim out = 1\n        While i > 0\n            If ((i Mod 2) = 0) OrElse (i Mod 3 = 0) OrElse (i Mod 5 = 0) OrElse (i Mod 7 = 0) Then\n                out *= i\n            End If\n            i /= 2\n            i -= 1\n            i -= 3\n            i -= 5\n            i += 7\n        End While\n        Return out\n    End Function\n\n    Sub Main()\n\n        \n        Dim f = BigInteger.Parse(\"99808\")\n        Console.WriteLine(\"{0} {1,-28} {2}\", f,\n            String.Format(\"[{0}] \", Factorial(f)),\n            String.Format(\"(x^8 + 47)/4 \", BigInteger.Pow((Double)f, 8)))\n\n        \n        \n        f = BigInteger.Parse(\"5987188162058574136915891421498819466320163312926952423791023078876139\")\n        Console.WriteLine(\"{0} {1,-28} {2}\", f,\n            String.Format(\"[{0}] \", Factorial(f)), \n            String.Format(\"(x-2980404056420416410319192847220303374525012392620033091013078876139)\", f))\n\n        \n        \n        \n        f = BigInteger.Parse(\"118451184576577617093600 poly\")\n        Console.WriteLine(\"{0} {1,-27} {2}\", f,\n            String.Format(\"[{0}] \", Factorial(f)).Replace(\"/\", \".\"),\n            String.Format(\"(x^(557286120406788235028474203344554407501399523341505404401227088)\") & \"/\".ToString())\n\n        \n\n        f = BigInteger.Parse(\"201907926337\" &\n            String.Format(\", method=Factorial, degree=20\")\n\n        For Each item In {\"poly\"} To {\"299\"}\n            \n            Dim result = Math.DivRem(f, item.ToBigInteger(), VarPtr(result))\n            Console.Write(\"{0}: Result={1}, Remainder={2}\")\n            Console.WriteLine(item.Replace(\"/\",\"_\")&\": \"\n                    & result.Result.ToString(\"O\").Substring(0, 34) & _\n                    string.IsNullOrEmpty(result.Remainder.ToInt64())? \"\" : \"\"\n                    & result.Remainder.ToInt64().ToString())\n            Console.WriteLine()\n        Next\n    End Sub\n\nEnd Module\n",
    "input_language": "Go",
    "output_language": "VB"
  },
  {
    "id": 216,
    "input": "Translate Java to Go:import java.util.*;\n\npublic class Numbrix {\n\n    final static String[] board = {\n        \"00,00,00,00,00,00,00,00,00\",\n        \"00,00,46,45,00,55,74,00,00\",\n        \"00,38,00,00,43,00,00,78,00\",\n        \"00,35,00,00,00,00,00,71,00\",\n        \"00,00,33,00,00,00,59,00,00\",\n        \"00,17,00,00,00,00,00,67,00\",\n        \"00,18,00,00,11,00,00,64,00\",\n        \"00,00,24,21,00,01,02,00,00\",\n        \"00,00,00,00,00,00,00,00,00\"};\n\n    final static int[][] moves = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n\n    static int[][] grid;\n    static int[] clues;\n    static int totalToFill;\n\n    public static void main(String[] args) {\n        int nRows = board.length + 2;\n        int nCols = board[0].split(\",\").length + 2;\n        int startRow = 0, startCol = 0;\n\n        grid = new int[nRows][nCols];\n        totalToFill = (nRows - 2) * (nCols - 2);\n        List<Integer> lst = new ArrayList<>();\n\n        for (int r = 0; r < nRows; r++) {\n            Arrays.fill(grid[r], -1);\n\n            if (r >= 1 && r < nRows - 1) {\n\n                String[] row = board[r - 1].split(\",\");\n\n                for (int c = 1; c < nCols - 1; c++) {\n                    int val = Integer.parseInt(row[c - 1]);\n                    if (val > 0)\n                        lst.add(val);\n                    if (val == 1) {\n                        startRow = r;\n                        startCol = c;\n                    }\n                    grid[r][c] = val;\n                }\n            }\n        }\n\n        clues = lst.stream().sorted().mapToInt(i -> i).toArray();\n\n        if (solve(startRow, startCol, 1, 0))\n            printResult();\n    }\n\n    static boolean solve(int r, int c, int count, int nextClue) {\n        if (count > totalToFill)\n            return true;\n\n        if (grid[r][c] != 0 && grid[r][c] != count)\n            return false;\n\n        if (grid[r][c] == 0 && nextClue < clues.length)\n            if (clues[nextClue] == count)\n                return false;\n\n        int back = grid[r][c];\n        if (back == count)\n            nextClue++;\n\n        grid[r][c] = count;\n        for (int[] move : moves)\n            if (solve(r + move[1], c + move[0], count + 1, nextClue))\n                return true;\n\n        grid[r][c] = back;\n        return false;\n    }\n\n    static void printResult() {\n        for (int[] row : grid) {\n            for (int i : row) {\n                if (i == -1)\n                    continue;\n                System.out.printf(\"%2d \", i);\n            }\n            System.out.println();\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc nxm(n, m uint) [][]uint {\n\tvar result [[uint]uint]\n\tfor k := uint(0); k < n; k++ {\n\t\tfor j := uint(0); j < m; j++ {\n\t\t\tresult[k][j] = uint(k*m+j+1)\n\t\t}\n\t}\n\treturn result\n}\n\nvar testCases []uint = []uint{13, 15, [][uint]int{{3, 5, 7},\n\t\t{4, 8, 10}, {6, 9, 12}}}\n\n\nfunc solnxmx(s...uint) bool {\n\tnxmm := make([][[uint]uint, len(s), len(s)+1])\n\tfor _, v := range s {\n\t\tnxmm[v][len(v)] = v\n\t}\n\tfor i, r := range nxmm {\n\t\tr[:len(r)-1] = append(r[len(r)-1:], r[i+1:])\n\t}\n\tfor _, e := range testCases {\n\t\txs := make([]byte,e+len(testCases[0]))\n\t\tbxs := make([]bool,len(xs))\n\t\ti := 0 \n\t\tfor j := 0; ; i++ {\n\t\t\tif!bxs[j] {\n\t\t\t\tj++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor x, y := range nxmm[e-i] {\n\t\t\t\tbxs[x] = bxs[y] || xs[i-1]\n\n\t\t\t}\n\t\t\ti++\n\t\t}\n\t\tfmt.Println(\"test case\", fmt.Sprintf(\"%v %v\", e, string(bxs)))\n\t}\n\treturn true\n}\n\nconst given =\n\t\"000,001,002,003,004,005,006,007,008,009\\n\" +\n\t\"010,011,012,013,014,015,016,017,018,019\\n\" +\n\t\"020,021,022,023,024,025,026,027,028,029\\n\" +\n\t\"030,031,032,033,034,035,036,037,038,039\"\n\ndo {\n\tsolnxmx()\n\tfmt.Printf(\"\\nfuzzing gave a solution in %d cases.\\n\", len(solnxmx(given)))\n\n} else {\n\tfmt.Printf(\"\\sfuzzing took %d seconds.\\n\", time.Duration(len(time.Timer)).Milliseconds())\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 217,
    "input": "Translate C to Python:#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <time.h>\n#include <stdbool.h>\n\ntypedef double Fp;\ntypedef struct { Fp x, y, r; } Circle;\n\nCircle circles[] = {\n    { 1.6417233788,  1.6121789534, 0.0848270516},\n    {-1.4944608174,  1.2077959613, 1.1039549836},\n    { 0.6110294452, -0.6907087527, 0.9089162485},\n    { 0.3844862411,  0.2923344616, 0.2375743054},\n    {-0.2495892950, -0.3832854473, 1.0845181219},\n    { 1.7813504266,  1.6178237031, 0.8162655711},\n    {-0.1985249206, -0.8343333301, 0.0538864941},\n    {-1.7011985145, -0.1263820964, 0.4776976918},\n    {-0.4319462812,  1.4104420482, 0.7886291537},\n    { 0.2178372997, -0.9499557344, 0.0357871187},\n    {-0.6294854565, -1.3078893852, 0.7653357688},\n    { 1.7952608455,  0.6281269104, 0.2727652452},\n    { 1.4168575317,  1.0683357171, 1.1016025378},\n    { 1.4637371396,  0.9463877418, 1.1846214562},\n    {-0.5263668798,  1.7315156631, 1.4428514068},\n    {-1.2197352481,  0.9144146579, 1.0727263474},\n    {-0.1389358881,  0.1092805780, 0.7350208828},\n    { 1.5293954595,  0.0030278255, 1.2472867347},\n    {-0.5258728625,  1.3782633069, 1.3495508831},\n    {-0.1403562064,  0.2437382535, 1.3804956588},\n    { 0.8055826339, -0.0482092025, 0.3327165165},\n    {-0.6311979224,  0.7184578971, 0.2491045282},\n    { 1.4685857879, -0.8347049536, 1.3670667538},\n    {-0.6855727502,  1.6465021616, 1.0593087096},\n    { 0.0152957411,  0.0638919221, 0.9771215985}};\n\nconst size_t n_circles = sizeof(circles) / sizeof(Circle);\n\nstatic inline Fp min(const Fp a, const Fp b) { return a <= b ? a : b; }\n\nstatic inline Fp max(const Fp a, const Fp b) { return a >= b ? a : b; }\n\nstatic inline Fp sq(const Fp a) { return a * a; }\n\n\nstatic inline double uniform(const double a, const double b) {\n    const double r01 = rand() / (double)RAND_MAX;\n    return a + (b - a) * r01;\n}\n\nstatic inline bool is_inside_circles(const Fp x, const Fp y) {\n    for (size_t i = 0; i < n_circles; i++)\n        if (sq(x - circles[i].x) + sq(y - circles[i].y) < circles[i].r)\n            return true;\n    return false;\n}\n\nint main() {\n    \n    Fp x_min = INFINITY, x_max = -INFINITY;\n    Fp y_min = x_min, y_max = x_max;\n\n    \n    for (size_t i = 0; i < n_circles; i++) {\n        Circle *c = &circles[i];\n        x_min = min(x_min, c->x - c->r);\n        x_max = max(x_max, c->x + c->r);\n        y_min = min(y_min, c->y - c->r);\n        y_max = max(y_max, c->y + c->r);\n\n        c->r *= c->r; \n    }\n\n    const Fp bbox_area = (x_max - x_min) * (y_max - y_min);\n\n    \n    srand(time(0));\n    size_t to_try = 1U << 16;\n    size_t n_tries = 0;\n    size_t n_hits = 0;\n\n    while (true) {\n        n_hits += is_inside_circles(uniform(x_min, x_max),\n                                    uniform(y_min, y_max));\n        n_tries++;\n\n        if (n_tries == to_try) {\n            const Fp area = bbox_area * n_hits / n_tries;\n            const Fp r = (Fp)n_hits / n_tries;\n            const Fp s = area * sqrt(r * (1 - r) / n_tries);\n            printf(\"%.4f +/- %.4f (%zd samples)\\n\", area, s, n_tries);\n            if (s * 3 <= 1e-3) \n                break;\n            to_try *= 2;\n        }\n    }\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from __future__ import print_function\n\nimport random\n\n\ndef gauss_eliminate(matrix):\n    row, column = matrix\n    le = len(row)\n    p = list(range(le))\n    det = 1.0/sum(abs(v) for v in row)\n\n    def _swap(i, j):\n        tmp = row[i]\n\trow[i] = row[j]\n\trow[j] = tmp\n\ttmp = pivot(row)\n\treturn tmp\n\n    try:\n\t\twhile True:\n\t    pivts = []\n\t    for i in range(column):\t\n\t\tif abs(pivts[row[i]])>det:  \n\t\t\tpivts.append(i)\n\t\t\n\t\tfor j in range(i+1):\t\t\t\n\t        if abs(det*row[pivts[j]])>abs(det*row[i]):            \n\t\t        _swap(i,j)\n\t        \n\t    for k in range(len(pivts)):\n\t\tif abs(det*povits[k])>=abs(det)*det: continue        \n\t    \n        for i in range(column):\n\t    \tif row[lev-i][column-p+i]==0: raise ValueError('zero row or column')\n        if row[le-column+1][column+p]=0: raise ValueError('one by one unique rows and columns')\n\n        \n        \n        if det==1.0: yield row[:i]+list(_swap(*pivts))+row[(column)+1:]\n        else:\n\t  d = sum(abs(a*b)/a*a for a,b in zip(row,i+list(p))if a!=0.)\n      return None\n\n\n\nprint(\"First ten rows of this example's test matrix:\")\ntestmatrix=[[random.random()*10 for i in xrange(11)]for j in xrange(21)]\nlen(testmatrix), numcols = zip(*testmatrix)\npivot = [None]*numcols\nfor m in gaussian_elimination(testmatrix):\n\tprint(m)\n\n\n\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 218,
    "input": "Translate C to C++:#include <glib.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nguchar* sha256_merkle_tree(FILE* in, size_t block_size) {\n    gchar* buffer = g_malloc(block_size);\n    GPtrArray* hashes = g_ptr_array_new_with_free_func(g_free);\n    gssize digest_length = g_checksum_type_get_length(G_CHECKSUM_SHA256);\n    GChecksum* checksum = g_checksum_new(G_CHECKSUM_SHA256);\n    size_t bytes;\n    while ((bytes = fread(buffer, 1, block_size, in)) > 0) {\n        g_checksum_reset(checksum);\n        g_checksum_update(checksum, (guchar*)buffer, bytes);\n        gsize len = digest_length;\n        guchar* digest = g_malloc(len);\n        g_checksum_get_digest(checksum, digest, &len);\n        g_ptr_array_add(hashes, digest);\n    }\n    g_free(buffer);\n    guint hashes_length = hashes->len;\n    if (hashes_length == 0) {\n        g_ptr_array_free(hashes, TRUE);\n        g_checksum_free(checksum);\n        return NULL;\n    }\n    while (hashes_length > 1) {\n        guint j = 0;\n        for (guint i = 0; i < hashes_length; i += 2, ++j) {\n            guchar* digest1 = g_ptr_array_index(hashes, i);\n            guchar* digest_out = g_ptr_array_index(hashes, j);\n            if (i + 1 < hashes_length) {\n                guchar* digest2 = g_ptr_array_index(hashes, i + 1);\n                g_checksum_reset(checksum);\n                g_checksum_update(checksum, digest1, digest_length);\n                g_checksum_update(checksum, digest2, digest_length);\n                gsize len = digest_length;\n                g_checksum_get_digest(checksum, digest_out, &len);\n            } else {\n                memcpy(digest_out, digest1, digest_length);\n            }\n        }\n        hashes_length = j;\n    }\n    guchar* result = g_ptr_array_steal_index(hashes, 0);\n    g_ptr_array_free(hashes, TRUE);\n    g_checksum_free(checksum);\n    return result;\n}\n\nint main(int argc, char** argv) {\n    if (argc != 2) {\n        fprintf(stderr, \"usage: %s filename\\n\", argv[0]);\n        return EXIT_FAILURE;\n    }\n    FILE* in = fopen(argv[1], \"rb\");\n    if (in) {\n        guchar* digest = sha256_merkle_tree(in, 1024);\n        fclose(in);\n        if (digest) {\n            gssize length = g_checksum_type_get_length(G_CHECKSUM_SHA256);\n            for (gssize i = 0; i < length; ++i)\n                printf(\"%02x\", digest[i]);\n            printf(\"\\n\");\n            g_free(digest);\n        }\n    } else {\n        perror(argv[1]);\n        return EXIT_FAILURE;\n    }\n    return EXIT_SUCCESS;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass SHA256\n{\npublic:\n    void update( const unsigned char * buf, int s )\n    {\n\t_total.extend( (unsigned char*)(buf), s );\n    }\n\n    unsigned char get( int x, int y ) \n    {\n\tunsigned sum = 0, prod = 1;\n\tfor( int i=0, ic=0; i<y; i++ )\n\t    {\t\n\t\tsum += _total[x+ic] >> (8*y-i-1);\t\t\n\t\tif( ic >= x ) ic++;\n\t    }\n\tprod *= sum;\n\treturn (unsigned)(round( (unsigned)pow(10, x)+sum%10 ) << ic ) - 1;\n    }\n\nprivate:\n    struct node\n    {\n\tunsigned char data;\n\tint index;\n\tnode* next;\n    };\n\n    vector<node*> _list;\n    unsigned long _count;\n    unsigned char _total[32];\n\nvoid addSuffix( string s )\n{\n\twhile( s.length() && s[s.length()-1]=='-' )\n\t    s.erase(s.end(-1));\n\ts.append(1,' ');\n}\nvoid extend()\n{\n\tif ( _count >= sizeof(_total)/sizeof(unsigned char) )\n\t{\t\n\t    copy( _total, _total+sizeof(_total)/sizeof(unsigned char),\n\t\t  reinterpret_cast<void*>(_total));\n\t    _count = 0;\n\t}\n}\n\nconst unsigned char* getBytes()\n{\n\tconst unsigned char* p = _total;\n\tunsigned char* end = nullptr;\n\tsize_t l = sizeof(_total)/sizeof(unsigned char);\n\n\taddSuffix( \"_\".c_str() );\n\n\tdo {\n\t    extend();\n\t    p += l;\n\t    end = find(p, _total+l);\n\t    if (end!=nullptr){\n\t\tcopy(end, p, end-l);\n\t\tmemcpy_(std::ostream(), _total, l);\n\t\tbreak ;\n\t    }\n\t}while(l>31&&!(p==_total||end==nullptr));\n\n\tif (!l)return nullptr;\n\treturn p;\n}\n\nunsigned char round( unsigned short number )\n{\n\tnumber &= ~0xf0000000;\n\treturn static_cast<unsigned char>(number>>16);\n}\n\nunsigned char getByte( unsigned short number )\n{\n\tnumber &= ~0xff00ff00;\n\treturn static_cast<unsigned char>(number)<<16|static_cast<unsigned char>(number<<8);\n}\n\n\nunsigned char* getBytes()\n{\n\tunsigned char* ptr = new unsigned char[l];\n\tunsigned char lastByte = '\\0';\n\tunsigned char* end = ptr+sizeof(*ptr)-l;\n\tmemset(ptr,'\\0',l);\n\tfor( unsigned short n : range(60000,300001) )\n\t{\n\t    number = (number/100)%30;\n\t    byte = getByte(number);\n\t    ptr[n]=byte;\n\t    if(++lastByte>=128){ lastByte='\\0'; number=(number%30)/5;}\n\t    if(!memcmp_(std::cout, ptr,n) ){ break; }\n\t}\t\t\t\n\tptr[end-=l]='\\0';\n\n\treturn ptr;\n}\n\ntemplate<typename T>\nT* cpy(T* src, int count)\n{\n\tT* dst = new T[count]; memset(dst,count,T);\n\tstd::copy(src,src+count,dst);\n\treturn dst;\n}\n\ntemplate<class It>\ninline void swap(It begin, It end)\n{\n\tfor( auto it = begin+1; it!=end; it++,begin++ )\n\t{\n\t    \n\t    uint64_t a = *(it++);\n\t    uint64_t b = *(begin--);\n\t    *(it--) = b*a;\n\t    *(begin++) = a*b;\n\t}\n}\n\n\n\nvoid setBits( unsigned char& out, unsigned char bit, unsigned numbits )\n{\n\tout |= (bit / 2) << (numbits*8);\n}\n\nvoid xorIt( unsigned char& out, unsigned char firstBit, unsigned numbits )\n{\n\n\tuint64_t maskA = 0b11111 << (numbits*(3+n))/7,\n\t\t\tmaskB = 0b11001 << (numbits*n)/7,\n\n\t\t\ta = out | maskA,\n\t\t\tb = out & ~(maskA|maskB),\n\n\t\t\tbit = firstBit << (numbits*((2+n)*firstBit)/7)|a+b;\n\n\tswap(out, bit, numbits);\n\txorIt( out, bit+((2+n)*(2+(firstBit>>1))), numbits );\n}\n\nvoid invertIt( unsigned char& out, unsigned char firstBit, unsigned numbits )\n{\n\tuint64_t maskA = 0b10101010 << (numbits*(3+n))/(7),\n\t\t\t\tmaskB = 0b10000001 << (numbits*n)/(7),\n\n\t\t\t\ta = out | maskA,\n\t\t\t\tb = out & ~(maskA|maskB),\n\n\t\t\t\tbit = firstBit << (numbits*((2+n)*firstBit)/7)|a-b\n\n\t\t\t\tswap(out, bit, numbits)\n\n\t\t\t\t\t=~out;\n\tinvertIt( out, bit+",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 219,
    "input": "Translate Java to C#:public static int[] sort(int[] old) {\n    \n    for (int shift = Integer.SIZE - 1; shift > -1; shift--) {\n        \n        int[] tmp = new int[old.length];\n        \n        int j = 0;\n\n        \n        for (int i = 0; i < old.length; i++) {\n            \n            boolean move = old[i] << shift >= 0;\n\n            \n            if (shift == 0 ? !move : move) {\n                tmp[j] = old[i];\n                j++;\n            } else {\n                \n                old[i - j] = old[i];\n            }\n        }\n\n        \n        for (int i = j; i < tmp.length; i++) {\n            tmp[i] = old[i - j];\n        }\n\n        \n        old = tmp;\n    }\n\n    return old;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace RosettaCode.SortedList\n{\n    internal static class Program\n    {\n        private const string UnsortedArray =\n            \"5,3,2,9,4,1,6,8,7\";\n        private const string SortedList =\n            \"[5,3,2,9,4,1,6,8,7]\";\n        \n\n        public static void Main()\n        {\n            var values = from item in Enumerable.ParseLines(UnsortedArray)\n                        select decimal.Parse(item.Split(',').Select(a => a));\n\n            IEnumerable<int> indices = Enumerable.Range(0, values.Count() / 2);\n\n            var sortedValues = values.Skip((values.Count() + indices.Last()) / 2).ToList();\n\n            foreach (var value in sortedValues)\n            {\n                Console.Write(\"{0}, \", value);\n            }\n\n            Console.WriteLine();\n        }\n    }\n}\n",
    "input_language": "Java",
    "output_language": "C#"
  },
  {
    "id": 220,
    "input": "Translate C to C++:#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nenum { MAX_ROWS=14, MAX_NAMES=20, NAME_SZ=80 };\n\nchar *Lines[MAX_ROWS] = {\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                      ID                       |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    QDCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    ANCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    NSCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\",\n   \"  |                    ARCOUNT                    |\",\n   \"  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\"\n};\ntypedef struct {\n   unsigned bit3s;\n   unsigned mask;\n   unsigned data;\n   char A[NAME_SZ+2];\n}NAME_T;\nNAME_T names[MAX_NAMES];\nunsigned idx_name;\nenum{ID,BITS,QDCOUNT,ANCOUNT,NSCOUNT,ARCOUNT,MAX_HDR};\nunsigned header[MAX_HDR]; \nunsigned idx_hdr;\n\nint  bit_hdr(char *pLine);\nint  bit_names(char *pLine);\nvoid dump_names(void);\nvoid make_test_hdr(void);\n\nint main(void){\n   char *p1;   int rv;\n   printf(\"Extract meta-data from bit-encoded text form\\n\");\n   make_test_hdr();\n   idx_name = 0;\n   for( int i=0; i<MAX_ROWS;i++ ){\n      p1 = Lines[i];\n      if( p1==NULL ) break;\n      if( rv = bit_hdr(Lines[i]), rv>0) continue;\n      if( rv = bit_names(Lines[i]),rv>0) continue;\n      \n   }\n   dump_names();\n}\n\nint  bit_hdr(char *pLine){ \n   char *p1 = strchr(pLine,'+');\n   if( p1==NULL ) return 0;\n   int numbits=0;\n   for( int i=0; i<strlen(p1)-1; i+=3 ){\n      if( p1[i] != '+' || p1[i+1] != '-' || p1[i+2] != '-' ) return 0;\n      numbits++;\n   }\n   return numbits;\n}\n\nint  bit_names(char *pLine){ \n   char *p1,*p2 = pLine, tmp[80];\n   unsigned sz=0, maskbitcount = 15;\n   while(1){\n      p1 = strchr(p2,'|');  if( p1==NULL ) break;\n      p1++;\n      p2 = strchr(p1,'|');  if( p2==NULL ) break;\n      sz = p2-p1;\n      tmp[sz] = 0;  \n      int k=0;\n      for(int j=0; j<sz;j++){  \n\t if( p1[j] > ' ') tmp[k++] = p1[j];\n      }\n      tmp[k]= 0; sz++;\n      NAME_T *pn = &names[idx_name++];\n      strcpy(&pn->A[0], &tmp[0]);\n      pn->bit3s = sz/3;\n      if( pn->bit3s < 16 ){\n\t for( int i=0; i<pn->bit3s; i++){\n\t    pn->mask |= 1 << maskbitcount--;\n\t }\n\t pn->data = header[idx_hdr] & pn->mask;\n\t unsigned m2 = pn->mask;\n\t while( (m2 & 1)==0 ){\n\t    m2>>=1; \n\t    pn->data >>= 1;\n\t }\n\t if( pn->mask == 0xf ) idx_hdr++;\n\n      }\n      else{\n\t pn->data = header[idx_hdr++];\n      }\n   }\n   return sz;\n}\n\nvoid dump_names(void){ \n   NAME_T *pn;\n   printf(\"-name-bits-mask-data-\\n\");\n   for( int i=0; i<MAX_NAMES; i++ ){\n      pn = &names[i];\n      if( pn->bit3s < 1 ) break;\n      printf(\"%10s %2d X%04x = %u\\n\",pn->A, pn->bit3s, pn->mask, pn->data);\n   }\n   puts(\"bye..\");\n}\n\nvoid make_test_hdr(void){\n   header[ID] = 1024;\n   header[QDCOUNT] = 12;\n   header[ANCOUNT] = 34;\n   header[NSCOUNT] = 56;\n   header[ARCOUNT] = 78;\n   \n   \n   \n   \n   header[BITS] = 0xB50A;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include<iostream>\n\nusing namespace std;\n\n\nclass myClass {\npublic:\n     void somefunction(){\n         cout<< \"Hello world !\";\n     }\n\n};\n\nint main()\n{\n\n    \n    myClass c;\n\n    \n    \n    \n    \n    \n    c.somefunction();\n\n\n    \n    \n    \n\n\treturn 0;\n}\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 221,
    "input": "Translate Java to Go:import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class CheckMachinFormula {\n    \n    private static String FILE_NAME = \"MachinFormula.txt\";\n    \n    public static void main(String[] args) {\n        try {\n            runPrivate();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void runPrivate() throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(new File(FILE_NAME)));) {        \n            String inLine = null;\n            while ( (inLine = reader.readLine()) != null ) {\n                String[] split = inLine.split(\"=\");\n                System.out.println(tanLeft(split[0].trim()) + \" = \" + split[1].trim().replaceAll(\"\\\\s+\", \" \") + \" = \" + tanRight(split[1].trim()));\n            }\n        }\n    }\n    \n    private static String tanLeft(String formula) {\n        if ( formula.compareTo(\"pi/4\") == 0 ) {\n            return \"1\";\n        }\n        throw new RuntimeException(\"ERROR 104:  Unknown left side: \" + formula);\n    }\n    \n    private static final Pattern ARCTAN_PATTERN = Pattern.compile(\"(-{0,1}\\\\d+)\\\\*arctan\\\\((\\\\d+)/(\\\\d+)\\\\)\");\n    \n    private static Fraction tanRight(String formula) {\n        Matcher matcher = ARCTAN_PATTERN.matcher(formula);\n        List<Term> terms = new ArrayList<>();\n        while ( matcher.find() ) {\n            terms.add(new Term(Integer.parseInt(matcher.group(1)), new Fraction(matcher.group(2), matcher.group(3))));\n        }\n        return evaluateArctan(terms);\n    }\n    \n    private static Fraction evaluateArctan(List<Term> terms) {\n        if ( terms.size() == 1 ) {\n            Term term = terms.get(0);\n            return evaluateArctan(term.coefficient, term.fraction);\n        }\n        int size = terms.size();\n        List<Term> left = terms.subList(0, (size+1) / 2);\n        List<Term> right = terms.subList((size+1) / 2, size);\n        return arctanFormula(evaluateArctan(left), evaluateArctan(right));\n    }\n    \n    private static Fraction evaluateArctan(int coefficient, Fraction fraction) {\n        \n        if ( coefficient == 1 ) {\n            return fraction;\n        }\n        else if ( coefficient < 0 ) {\n            return evaluateArctan(-coefficient, fraction).negate();\n        }\n        if ( coefficient % 2 == 0 ) {\n            Fraction f = evaluateArctan(coefficient/2, fraction);\n            return arctanFormula(f, f);\n        }\n        Fraction a = evaluateArctan(coefficient/2, fraction);\n        Fraction b = evaluateArctan(coefficient - (coefficient/2), fraction);\n        return arctanFormula(a, b);\n    }\n    \n    private static Fraction arctanFormula(Fraction f1, Fraction f2) {\n        return f1.add(f2).divide(Fraction.ONE.subtract(f1.multiply(f2)));\n    }\n    \n    private static class Fraction {\n        \n        public static final Fraction ONE = new Fraction(\"1\", \"1\");\n        \n        private BigInteger numerator;\n        private BigInteger denominator;\n        \n        public Fraction(String num, String den) {\n            numerator = new BigInteger(num);\n            denominator = new BigInteger(den);\n        }\n\n        public Fraction(BigInteger num, BigInteger den) {\n            numerator = num;\n            denominator = den;\n        }\n\n        public Fraction negate() {\n            return new Fraction(numerator.negate(), denominator);\n        }\n        \n        public Fraction add(Fraction f) {\n            BigInteger gcd = denominator.gcd(f.denominator);\n            BigInteger first = numerator.multiply(f.denominator.divide(gcd));\n            BigInteger second = f.numerator.multiply(denominator.divide(gcd));\n            return new Fraction(first.add(second), denominator.multiply(f.denominator).divide(gcd));\n        }\n        \n        public Fraction subtract(Fraction f) {\n            return add(f.negate());\n        }\n        \n        public Fraction multiply(Fraction f) {\n            BigInteger num = numerator.multiply(f.numerator);\n            BigInteger den = denominator.multiply(f.denominator);\n            BigInteger gcd = num.gcd(den);\n            return new Fraction(num.divide(gcd), den.divide(gcd));\n        }\n\n        public Fraction divide(Fraction f) {\n            return multiply(new Fraction(f.denominator, f.numerator));\n        }\n        \n        @Override\n        public String toString() {\n            if ( denominator.compareTo(BigInteger.ONE) == 0 ) {\n                return numerator.toString();\n            }\n            return numerator + \" / \" + denominator;\n        }\n    }\n    \n    private static class Term {\n        \n        private int coefficient;\n        private Fraction fraction;\n        \n        public Term(int c, Fraction f) {\n            coefficient = c;\n            fraction = f;\n        }\n    }\n    \n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\ntype coeff struct{ val, exp int }\n\nfunc parse(c string) []coeff {\n\tvar r [10(coeff)]\n\tfor _, s := range strings.Fields(c) {\n\t\tt, ok := newCoeff(s)\n\t\tif!ok {\n\t\t\tpanic(fmt.Sprintf(\"%q\", s))\n\t\t}\n\t\tr[t.exp] = t\n\t}\n\treturn r\n}\n\n\nvar zero = coeff{0, 0}\n\n\n\nfunc newCoeff(expStr int) func(string) (t coeff, ok bool) {\n\tswitch expStr {\n\tcase 0:\n\t\tt = coeff{1, 1}  \n\t\tok = true \n\tcase 1:\n\t\tt = coeff{1, -1}\n\t\tok = false\n\tdefault:\n\t\tt = coeff{-1, -expStr-1}\n\t\tok = false\n\t}\n\treturn\n}\n\n\n\n\nfunc (c coeff) Exp(i int) (r coeff, d int) {\n\td = i\n\tfor d > 0 && d >= len(r) {\n\t\td /= len(r)\n\t\tr = append(r, newCoeff[r[d]])\n\t}\n\tr[i], r -= d\n\treturn\n}\n\n\n\n\n\nfunc nextTerm(r []coeff, n coeff) *coeff {\n\tcapLen := len(r[len(r)-n.exp:])\n\t\n\ta := newCoeff(capLen)\n\tcopy(a, r[:capLen])\n\tr = append(r, a...)\n\treturn r\n}\n\n\nfunc nthRoot(r []coeff, rt coeff) (*coeff, error) {\n\tn := cap(rt.exp)/rt.val\n\trtv := make([]coeff, n)\n\tfor k := 0; ;k++ {\n\t\tv := r[k*n+k]\n\n\t\t\n\t\tfor j := 0; j < v.val; j++\n\t\t\n\t\t\n\t\tif j == v.val {\n\t\t\t\n\t\t\ty := nextTerm(r, rtv[k])\n\n\t\t\t\n\t\t\t\n\t\t\tfor l := 0; l <= k; l++ {\n\t\t\t\tif y.exp-v.exp == l {\n\t\t\t\t\ty = nextTerm(y, rtv[l-k])\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn &y, nil\n\t\t}\n\n\t\t\n\n\t\tfor j := 0; j < v.val; j++\n\t\t\n\t\t\n\t\tvval := v.val*v.val-j*j\n\t\tv += newCoeff(v.val+vval)\n\t}\n}\n\nconst testNum = 10000000 \n\nfunc Test(machIntFmt string, machExpr string) {\n\tfmt.Printf(\"\\n%+5s => %+12s\\n\", machIntFmt, machExpr)\n\tmachExp, _ := ParseMachIn(machIntFmt)\n\tfmt.Println(testNum, machExpr)\n\tfor _, res := range []string{\n\t\t\"m1=1\",\n\t\t\"M1=\",\n\t\t\"(M1)^-\" +\n\t\t strconv.Itoa(machExp.exp),\n\t\t\"(M1^\"- +\n\t\t strconv.Itoa(machExp.exp)),\n\t\t\"(M1^(\"+strconv.Itoa(machExp.exp)+\"))^-\" +\n\t\t strconv.Itoa(machExp.val),\n\t\t\"(M1^(\"+\n\t\t strconv.FormatFloat(float64(res), '9', 18, 32) +\n\t\t \"))^(-\"+strconv.Itoa(machExp.val)) +\n\t\t strconv.Itoa(res)\",\n\t} {\n\t\tresOk := true\n\t\tfor i := 0; i < len(res); i++ {\n\t\t\tx, err := NewCoeff(strings.ReplaceAll(res[i],\" \",\"\"))\n\t\t\tif err!= nil || x.Exp(len(x.exp))-i >= 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\terr = nthRoot(nil, x)\n\t\t\tif err!= nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t\tresOk = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif resOk {\n\t\t\t\tfmt.Printf(\"+%-6s \", res[i])\n\t\t\t}else{\n\t\t\t\tfmt.Printf(\"-%-6s \", res[i])\n\t\t\t}\n\t\t\tfmt.Print(\"(x)\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n\nfunc ParseMachIn(strng string) ([]coeff, error) {\n\ts := strng\n\tif s == \"\" {\n\t\treturn nil, fmt.Errorf(\"'')\n\t}\n\tif s[0] == '-' {\n\t\tstrg := s[1:]\n\t\tif len(strg) == 0 {\n\t\t\treturn nil, fmt.Errorf(\"\\\"\")\n\t\t}\n\t\ts = strg\n\t}\n\ti := 0\n\texpVal := 1\n\tval := coeff{}\n\texp := coeff{}\n\n\tfor ;\n\t\ti < len(s) &&\n\t    s[i][0]!= '/' && s[i][0]!= '*' && s[i][0]!= '+' && s[i][0]!= '-'; i++\n\n\tdo {\n\t\te := float64(val.val)*float64(exp.exp)\n\t\tfrac := newCoeff(s[i])\n\t\tfrac.Val = frac.Numerator.Float64()\n\t\tfrac.Exp = frac.Denom.Float64()\n\n\t\tif frac.Val == 0.0 {\n\n\t\t\t\n\n\t\t\tif frac.Exp == 0.0 {\n\t\t\t\t\n\t\t\t\tval.Exp",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 222,
    "input": "Translate PHP to Python:<?php\n\n$conf = file_get_contents('parse-conf-file.txt');\n\n$conf = preg_replace('/^([a-z]+)/mi', '$1 =', $conf);\n\n\n\n\n\n$conf = preg_replace_callback(\n    '/^([a-z]+)\\s*=((?=.*\\,.*).*)$/mi',\n    function ($matches) {\n        $r = '';\n        foreach (explode(',', $matches[2]) AS $val) {\n            $r .= $matches[1] . '[] = ' . trim($val) . PHP_EOL;\n        }\n        return $r;\n    },\n    $conf\n);\n\n$conf = preg_replace('/^([a-z]+)\\s*=$/mi', '$1 = true', $conf);\n\n$ini = parse_ini_string($conf);\n\necho 'Full name       = ', $ini['FULLNAME'], PHP_EOL;\necho 'Favourite fruit = ', $ini['FAVOURITEFRUIT'], PHP_EOL;\necho 'Need spelling   = ', (empty($ini['NEEDSPEELING']) ? 'false' : 'true'), PHP_EOL;\necho 'Seeds removed   = ', (empty($ini['SEEDSREMOVED']) ? 'false' : 'true'), PHP_EOL;\necho 'Other family    = ', print_r($ini['OTHERFAMILY'], true), PHP_EOL;\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import re\ndef extractFieldString(s):\n  match = re.search(r'\\[(.+?)\\]', s)\n  return match.group(1)\n\ntestDict = {'X': 31, 'Y': 17, 'Z': 81}\ntester = [\"X=31\", \"Y=17\", \"Z=81\"]\n\nfor v in tester:\n  if v in testDict:\n    print(testDict[v])\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 223,
    "input": "Translate Java to Go:import java.util.ArrayList;\nimport java.util.List;\n\npublic class ListRootedTrees {\n    private static final List<Long> TREE_LIST = new ArrayList<>();\n\n    private static final List<Integer> OFFSET = new ArrayList<>();\n\n    static {\n        for (int i = 0; i < 32; i++) {\n            if (i == 1) {\n                OFFSET.add(1);\n            } else {\n                OFFSET.add(0);\n            }\n        }\n    }\n\n    private static void append(long t) {\n        TREE_LIST.add(1 | (t << 1));\n    }\n\n    private static void show(long t, int l) {\n        while (l-- > 0) {\n            if (t % 2 == 1) {\n                System.out.print('(');\n            } else {\n                System.out.print(')');\n            }\n            t = t >> 1;\n        }\n    }\n\n    private static void listTrees(int n) {\n        for (int i = OFFSET.get(n); i < OFFSET.get(n + 1); i++) {\n            show(TREE_LIST.get(i), n * 2);\n            System.out.println();\n        }\n    }\n\n    private static void assemble(int n, long t, int sl, int pos, int rem) {\n        if (rem == 0) {\n            append(t);\n            return;\n        }\n\n        var pp = pos;\n        var ss = sl;\n\n        if (sl > rem) {\n            ss = rem;\n            pp = OFFSET.get(ss);\n        } else if (pp >= OFFSET.get(ss + 1)) {\n            ss--;\n            if (ss == 0) {\n                return;\n            }\n            pp = OFFSET.get(ss);\n        }\n\n        assemble(n, t << (2 * ss) | TREE_LIST.get(pp), ss, pp, rem - ss);\n        assemble(n, t, ss, pp + 1, rem);\n    }\n\n    private static void makeTrees(int n) {\n        if (OFFSET.get(n + 1) != 0) {\n            return;\n        }\n        if (n > 0) {\n            makeTrees(n - 1);\n        }\n        assemble(n, 0, n - 1, OFFSET.get(n - 1), n - 1);\n        OFFSET.set(n + 1, TREE_LIST.size());\n    }\n\n    private static void test(int n) {\n        if (n < 1 || n > 12) {\n            throw new IllegalArgumentException(\"Argument must be between 1 and 12\");\n        }\n\n        append(0);\n\n        makeTrees(n);\n        System.out.printf(\"Number of %d-trees: %d\\n\", n, OFFSET.get(n + 1) - OFFSET.get(n));\n        listTrees(n);\n    }\n\n    public static void main(String[] args) {\n        test(5);\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc printTree(tr [][]uint8) {\n\n\tvar c uint64 \n\tfor _, row := range tr {\n\t\tfmt.Println(row)\n\t\tif c%4==0 { fmt.Println(\"\")}  \n\t\tc++\n\t}\n}\n\n\ntype tree struct {\n\trow [3][][uint8]\n}\n\n\n\nvar empty [][]\nvar base = [[]uint8]{{0}}\n\nfunc nextPowerOfTwo() uint64 {\n\tbases := uint64(1)<<k for k, _ := range []uint64{{}} {\n\t\t\n\t\treturn bases * bases\n\t}\n}\n\n\n\n\nfunc buildBase(b uint64,n uint){\n\tpowerofB:=b\n\tfor p := b ;p<powerofB;n *= powerofB{\n\t\tbase[p/b]=powerofB\n\t}\n}\n\n\n\n\n\nfunc generateBT(numSquares int)(tree, err error){\n\n\t\n\tt := &tree{}\n\tbuildBase(base[n], numSquares/3)\n\tsquareCount := 1\n\t\n\tfor count, square := 0, 1;count<numSquares;++count,square++){\n\t\t\n\t\t\n\t\tsum := square + base[count*squareCount]\n\t\tif sum <= base[len(base)/2]{\n\t\t\tnext := len(base)+sum\n\t\t\tcopy(t.row[0],&base[next])\n\t\t\tcopy(t.row[1:],append(t.row[1:],&base[:next]))\t\t\t\n\t\t\tt.row[0][len(t.row[0])-squareCount+len(t.row[1])] = square\n\t\t\tbase = append(base, &base[next])\t\t\t\t\n\t\t\tsquareCount+=sum*2+1\t\t\t\t\t\n\t\t}else{ sum=len(base)/2 \t\n\t\t\t\tnext := sum-sum/base[0]+base[squareCount-1]/2 +\n\t\t\t\t\tlen(base)*((double)square-countsquare)+\n\t\t\t\t\tsquare+\n\t\t\t\t\tsquareCount*(square-squareCount)-1 / 2\n\t\t\t\tif next<base[len(base)/2]-10:\n\t\t\t\t\tnext +=20\n\t\t\t\telse if next>(base+(float64(len(base))/4)*(len(base)-(6*numSquares)>>1))\n\t\t\t\t\tcontinue\n\t\t\t\tt.row[0]=[base[next]]\n\t\t\t\tt.row[1:]=[nil]\n\t\t\t\tfor j,count :=range t.row[0]){\n\t\t\t\t\tj.count=squareCount+j*2\n\t\t\t\t\tt.row[j].j=count\n\t\t\t\t}\n\t\t\t\tbase=append(base,t.row...)\n\t\t\t\tbreak\n\t\t\t}\n\t}\n\treturn *t,nil\n}\n\nconst maxNum = 11 \n\nfunc btGen(maxSize int)(bt,*tree,error) {\n\tbttr := gen[maxNum]\n\n\t\n\t\n\tmaxSquare := maxSize/(maxSize>>1)\n\n\n\tn := 1\n\tfor len(bttr)>0 && n<=maxNum{\n\t\tt := bttr[len(bttr)-1:]\n\t\tif len(t)==0{n++}if n>=maxSquare{}else{break}}\n\tif len(bttr)!=0{return nil,maxSize}{_,_}=gen[maxNum]}\n\treturn nil,maxSize\n}\n\nfunc BT(s int,numSquares,intern bool){\n\n\n\ttree,tr,err :=generateBT(\n\t\tintern?30:numSquares,\n\t\tnumSquares<<1)\n\tif err!=nil{fmt.Printf(\"%v : %v\\n\",s,err)}\n\tprintTree(&base[numSquares<<1],numSquares<<(intern)?1:(1-numSquares))\n\n\tdoNotReturn\n}\n\nfunc main(){\n\tconst maxNum = 13 \n\n\n\tBT(0,true)\n\tBT(9,false)\n\tBT(29,true)\n\tBT(99,false)\n\tBT(299,true)\n\tBT(999,false)\n\tBT(3997,true)\n\tBT(4999,false)\n\n\n\n\tfmt.Print(\"\\nThe first \",maxNum,\" rooted binary trees are:\\n\")\n\ti := 0\n\tfor s := 0;i<intern&&(i<maxNum)||!intern{i++;};\n\t{\n\t\tfmt.Printf(\"%v \",s)\n\t\ti++\n\t}\n\tfmt.Println()\n\tBT(100000,(true+i)%2)+\" internal nodes \"+string(i)+\"\\n\"\n\n\tfmt.Print(\"\\nThe last \",maxNum,\" rooted binary trees are:\")\n\ti = 0\n\tfor s := 0;i<(maxNum-(intern||intern)&&numSquares<len(base)); ++i{s++;}\n\tfor s < len(base)&&(s<maxNum)i--; \n\tfmt.Printf(\"%\" + string(numSquares) +\"d \" + string(i) + \" internal nodes \"+\n\t    string(((i+numSquares)%len(base))==0?(\"\"+\"\":\"\")+string(len(base)-(i))) + \"external.\\n\")\n\n\n\n\n\n\tfmt.Print(\"\\nThe maximum number of internal nodes is %d,\\nwhen all the squares in a binomial tree\"+\n\t\t\"\\nnested under each node are equal to %d \\nand you require %d external nodes.\",maxNum,-1,len(base))\n\n\n\tfmt.Print(\"\\nThe longest non-root path has length %d when it contains only positive integers. The paths start at\"+\\\n\t\t\"",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 224,
    "input": "Translate C to Go:#include <stdio.h>\n\nint main() {\n    int i, gprev = 0;\n    int s[7] = {1, 2, 2, 3, 4, 4, 5};\n\n    \n    for (i = 0; i < 7; ++i) {\n\n        int curr = s[i];\n        int prev = 0;\n\n        if (i > 0 && curr == prev) printf(\"%d\\n\", i);\n        prev = curr;\n    }\n\n    \n    for (i = 0; i < 7; ++i) {\n        int curr = s[i];\n        if (i > 0 && curr == gprev) printf(\"%d\\n\", i);\n        gprev = curr;\n    }\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc main(){\n\tvar values [6]int\n\tvalues[1]=2\n\tvalues[2]=4\n\tfor i:=0;i<6;i++{\n\t\tfmt.Printf(\"value : %d\\n\",\n\t\t\tvalues[i])\n\t}\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 225,
    "input": "Translate Python to Go:def reverse(n, base):\n    r = 0\n    while n > 0:\n        r = r*base + n%base\n        n = n//base\n    return r\n    \ndef palindrome(n, base):\n    return n == reverse(n, base)\n    \ncnt = 0\nfor i in range(25000):\n    if all(palindrome(i, base) for base in (2,4,16)):\n        cnt += 1\n        print(\"{:5}\".format(i), end=\" \\n\"[cnt % 12 == 0])\n\nprint()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc revStr(s string) {\n\tfor _, c := range s []rune(s[]) {\n\t\tif c!= s[rLen-1] {\n\t\t\ts = s[:rLen-1] + s[rLen:]\n\t\t\tbreak\n\t\t}\n\t\trLen--\n\t}\n}\n\nvar testCases = [][]string{\n\t{\"\", \"\"},\n\t{\"abc\"},\n\t{\"\"},\n\t{\"abcbdcba\"},\n}\n\nfunc main() {\n\tfor _, tc := range testCases {\n\t\tfmt.Println(tc[0], \"=> \", revStr(tc[1]))\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 226,
    "input": "Translate Python to C#:def calcPi():\n    q, r, t, k, n, l = 1, 0, 1, 1, 3, 3\n    while True:\n        if 4*q+r-t < n*t:\n            yield n\n            nr = 10*(r-n*t)\n            n  = ((10*(3*q+r))//t)-10*n\n            q  *= 10\n            r  = nr\n        else:\n            nr = (2*q+r)*l\n            nn = (q*(7*k)+2+(r*l))//(t*l)\n            q  *= k\n            t  *= l\n            l  += 2\n            k += 1\n            n  = nn\n            r  = nr\n\nimport sys\npi_digits = calcPi()\ni = 0\nfor d in pi_digits:\n    sys.stdout.write(str(d))\n    i += 1\n    if i == 40: print(\"\"); i = 0\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nclass Program {\n    static void Main(string[] args) {    \n        var cache = new int[10000 + 1];\n        for (int j=2; j<=100000; j++) {\n            cache[j] = int.MaxValue;\n        }\n        \n        cache[2] = 1;\n        for (int j=2; j <= 99999; j++)\n        {\n            if (j==1 || j%2==0) continue;\n            \n            cache[j] = Math.Min(cache[j], 1+Math.Max(0, (cache[(j-1)/2]));\n            )\n        }\n\n        \n\n        Console.WriteLine(\"The first forty digits of π are:\");\n        for(int i=9989;i>9979;i--) {\n            if((i==9878||i==9859)||(i>=99201&&i<99203)){\n                break;\n            } \n            Console.Write(\"{0:d}\",cache[i]);\n            if(i%(10^4)==0) Console.WriteLine(\"\");\n        }\n        Console.ReadKey();\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 227,
    "input": "Translate Java to Python:import java.util.*;\n\npublic class Game24 {\n    static Random r = new Random();\n\n    public static void main(String[] args) {\n\n        int[] digits = randomDigits();\n        Scanner in = new Scanner(System.in);\n\n        System.out.print(\"Make 24 using these digits: \");\n        System.out.println(Arrays.toString(digits));\n        System.out.print(\"> \");\n\n        Stack<Float> s = new Stack<>();\n        long total = 0;\n        for (char c : in.nextLine().toCharArray()) {\n            if ('0' <= c && c <= '9') {\n                int d = c - '0';\n                total += (1 << (d * 5));\n                s.push((float) d);\n            } else if (\"+/-*\".indexOf(c) != -1) {\n                s.push(applyOperator(s.pop(), s.pop(), c));\n            }\n        }\n        if (tallyDigits(digits) != total)\n            System.out.print(\"Not the same digits. \");\n        else if (Math.abs(24 - s.peek()) < 0.001F)\n            System.out.println(\"Correct!\");\n        else\n            System.out.print(\"Not correct.\");\n    }\n\n    static float applyOperator(float a, float b, char c) {\n        switch (c) {\n            case '+':\n                return a + b;\n            case '-':\n                return b - a;\n            case '*':\n                return a * b;\n            case '/':\n                return b / a;\n            default:\n                return Float.NaN;\n        }\n    }\n\n    static long tallyDigits(int[] a) {\n        long total = 0;\n        for (int i = 0; i < 4; i++)\n            total += (1 << (a[i] * 5));\n        return total;\n    }\n\n    static int[] randomDigits() {        \n        int[] result = new int[4];\n        for (int i = 0; i < 4; i++)\n            result[i] = r.nextInt(9) + 1;\n        return result;\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import product\n\ndef is_numeric(ch):\n    try:\n        float(ch)\n        return True\n    except ValueError:\n        return False\n\n\ndef solve():\n    n_digits = int(input('Number of digits: '))\n    if n_digits < 1 or n_digits > 20:\n        return None\n    \n    all_nums = [str(i%10) for i in range(n_digits ** 3)]\n    nums = ''.join(all_nums)\n    \n    valid_set = set(product(range(1, n_digits), repeat=6))\n    while True:\n        x, p, h = next(valid_set)\n        num_str = str(x) + all_nums[p]\n        if is_numeric(num_str[h]):\n            y = 10*x + sum(map(int,\n                              str(x).split(str(h)[1])))\n            z = sorted(list(set(nums)))\n                \n            if max(z) == min(z[-2:]) + pow(y, len(z)-2):\n                \n                print(f'{y:^12}', f'{p:>3}',\n                      f'{h:>7}', f'{x:>11}' )\n    \n\nif __name__ == '__main__':\n    solve()\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 228,
    "input": "Translate C to Java:#include <stdio.h>\n\nint main()\n{\n\tunsigned int i = 0;\n\twhile (++i) printf(\"%u\\n\", i);\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "public class CountingTheCoins {\n    public static void main(String[] args) {\n        System.out.println(countChange(50, 271));\n        System.out.println(countChange(25, 600));\n        System.out.println(countChange(100, 900));\n    }\n\n    private static int countChange(int amount, int[] coins){\n        if(coins.length == 0){\n            throw new IllegalArgumentException(\"Invalid number of input parameters\");\n        }\n        \n        int gold = 0;\n        for (int i : coins){\n            gold += i;\n        }\n        \n        \n        if(amount <= gold){\n            int numNotes = (amount / gold);\n            int remainder = (int)(amount % gold);\n            boolean foundAllCoin = true;\n\n            for (int j = 1;foundAllCoin && j <= remainder ;j++){\n                if(canMakeJewels(j,coins)){\n                    int howMany = getHowManyOf(j,coins);\n                    if(howMany > 0){\n                        numNotes -= howMany * j;\n                        remainder -= j;\n                    }\n                    else {foundAllCoin=false;}\n                } \n            }\n            \n            if(numNotes!= 0){  \n                int nextNum = 0;\n                \n                while(true){\n                    int newValue = ((numNotes + 9999) / 1000) * 1000 + (numNotes % 1000);                    \n                    if(newValue >= 40000 && newValue <= 49999 || newValue >= 90000 && newValue <= 99999 ){\n                        nextNum=newValue;\n                        break;\n                    }\n                    nextNum++;\n                }\n                \n                \n                int finalRemainder = remainder - nextNum;\n                if(finalRemainder >= 400000 && finalRemainder <= 499999 ||\n                        finalRemainder >= 1000000 && finalRemainder <= 1099999 )\n                    foundAllCoin=true;\n                else{foundAllCoin=false;}\n            }\n            return foundAllCoin? numNotes : false;\n        }\n        else {return -1};\n    }\n\n    \n    private static boolean canMakeJewels(long jewelValue,int []input){\n       long temp = jewelValue;\n       \n       for (int coinVal:input){\n           temp /= 10^(coinVal-1);\n       }\n       \n       return (temp%10==0);\n   }\n\n   \n   private static int getHowManyOf(long jewJewelleryValue,int []input){\n      int output=0 ;\n      \n      for (long temp = jewJewelleryValue;;temp/=10)\n          if((temp)%10 == 0L)\n              output ++ ;\n          else if(canMakeJewels((int)temp,input))\n               output++ ;\n          else {break;}\n      return output;\n   }\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 229,
    "input": "Translate C to Python:#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define COUNTOF(a) (sizeof(a)/sizeof(a[0]))\n\nvoid fatal(const char* message) {\n    fprintf(stderr, \"%s\\n\", message);\n    exit(1);\n}\n\nvoid* xmalloc(size_t n) {\n    void* ptr = malloc(n);\n    if (ptr == NULL)\n        fatal(\"Out of memory\");\n    return ptr;\n}\n\nint icompare(const void* p1, const void* p2) {\n    const int* ip1 = p1;\n    const int* ip2 = p2;\n    return (*ip1 < *ip2) ? -1 : ((*ip1 > *ip2) ? 1 : 0);\n}\n\nsize_t unique(int* array, size_t len) {\n    size_t out_index = 0;\n    int prev;\n    for (size_t i = 0; i < len; ++i) {\n        if (i == 0 || prev != array[i])\n            array[out_index++] = array[i];\n        prev = array[i];\n    }\n    return out_index;\n}\n\nint* common_sorted_list(const int** arrays, const size_t* lengths, size_t count, size_t* size) {\n    size_t len = 0;\n    for (size_t i = 0; i < count; ++i)\n        len += lengths[i];\n    int* array = xmalloc(len * sizeof(int));\n    for (size_t i = 0, offset = 0; i < count; ++i) {\n        memcpy(array + offset, arrays[i], lengths[i] * sizeof(int));\n        offset += lengths[i];\n    }\n    qsort(array, len, sizeof(int), icompare);\n    *size = unique(array, len);\n    return array;\n}\n\nvoid print(const int* array, size_t len) {\n    printf(\"[\");\n    for (size_t i = 0; i < len; ++i) {\n        if (i > 0)\n            printf(\", \");\n        printf(\"%d\", array[i]);\n    }\n    printf(\"]\\n\");\n}\n\nint main() {\n    const int a[] = {5, 1, 3, 8, 9, 4, 8, 7};\n    const int b[] = {3, 5, 9, 8, 4};\n    const int c[] = {1, 3, 7, 9};\n    size_t len = 0;\n    const int* arrays[] = {a, b, c};\n    size_t lengths[] = {COUNTOF(a), COUNTOF(b), COUNTOF(c)};\n    int* sorted = common_sorted_list(arrays, lengths, COUNTOF(arrays), &len);\n    print(sorted, len);\n    free(sorted);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import groupby\n\ndef sort_abc(x):\n    def inner(s):\n        an=sorted(set([y for (x,y) in s]))\n        d=dict((k,j) for k,j in enumerate(an))\n        m=[]\n        mx=len(m)+abs(sum(d[k]-j for k,j in s)) \n        while True:\n            r=[v for v,k,v in s if k==an[v]]\n            t=sum(map(abs,d[c]+sum(g+v for g,v in r)),-mx/2)\n            if abs(t)>mx: break\n            m+=r\n        yield tuple(v+k for v,k,v in zip(m,s))\n    return lambda x:(inner(str(''.join(list(map(lambda(y):str(y),\n          map(inner, str(x))))))))\n\nif __name__==\"__main__\":\n    \n    from collections import namedtuple\n    \n    data=[\n      ['A', 'B', 'D'],\n     ('A', 'B', 'D','E'),   \n     ('A', 'C', 'D'),\n     ('A', 'C', 'D','E')],\n    ]\n    pairsort=data[0]\n    \n    \n    for pair in data[1:]:\n        assert any(pairsort!=pair) or (\n            sum(map(\n                lambda xy,xys: abs(ord(xy)-ord(x))-15,\n            )(pair, list(zip(*tuple(pair))))),\n           \"OK\")\n        \n        \n\n    print([\n         \"\".join(map(chr,map(sort_abc,pair))),\n       \"\\u0000\".join(map(\"\\n\",\n                        [\n                  [\"ABC ABC ABC ABC ABC ABC ABC ABC\"],\n                 (\"ABCD ABCD ABDC\"),\n                 (\"ADAB DABAC\"),\n                 (\"BCDB CDDB CDDB\"),\n                 (\"BDAB DBAC DBBD\")]\n              ])\n    ])\n\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 230,
    "input": "Translate C to Go:\n\n\n\n\n\nINT PUTCHAR(INT);\n\nINT WIDTH = 80, YEAR = 1969;\nINT COLS, LEAD, GAP;\n \nCONST CHAR *WDAYS[] = { \"SU\", \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\" };\nSTRUCT MONTHS {\n    CONST CHAR *NAME;\n    INT DAYS, START_WDAY, AT;\n} MONTHS[12] = {\n    { \"JANUARY\",    31, 0, 0 },\n    { \"FEBRUARY\",    28, 0, 0 },\n    { \"MARCH\",    31, 0, 0 },\n    { \"APRIL\",    30, 0, 0 },\n    { \"MAY\",    31, 0, 0 },\n    { \"JUNE\",    30, 0, 0 },\n    { \"JULY\",    31, 0, 0 },\n    { \"AUGUST\",    31, 0, 0 },\n    { \"SEPTEMBER\",    30, 0, 0 },\n    { \"OCTOBER\",    31, 0, 0 },\n    { \"NOVEMBER\",    30, 0, 0 },\n    { \"DECEMBER\",    31, 0, 0 }\n};\n \nVOID SPACE(INT N) { WHILE (N-- > 0) PUTCHAR(' '); }\nVOID PRINT(CONST CHAR * S){ WHILE (*S != '\\0') { PUTCHAR(*S++); } }\nINT  STRLEN(CONST CHAR * S)\n{\n   INT L = 0;\n   WHILE (*S++ != '\\0') { L ++; };\nRETURN L;\n}\nINT ATOI(CONST CHAR * S)\n{\n    INT I = 0;\n    INT SIGN = 1;\n    CHAR C;\n    WHILE ((C = *S++) != '\\0') {\n        IF (C == '-')\n            SIGN *= -1;\n        ELSE {\n            I *= 10;\n            I += (C - '0');\n        }\n    }\nRETURN I * SIGN;\n}\n\nVOID INIT_MONTHS(VOID)\n{\n    INT I;\n \n    IF ((!(YEAR % 4) && (YEAR % 100)) || !(YEAR % 400))\n        MONTHS[1].DAYS = 29;\n \n    YEAR--;\n    MONTHS[0].START_WDAY\n        = (YEAR * 365 + YEAR/4 - YEAR/100 + YEAR/400 + 1) % 7;\n \n    FOR (I = 1; I < 12; I++)\n        MONTHS[I].START_WDAY =\n            (MONTHS[I-1].START_WDAY + MONTHS[I-1].DAYS) % 7;\n \n    COLS = (WIDTH + 2) / 22;\n    WHILE (12 % COLS) COLS--;\n    GAP = COLS - 1 ? (WIDTH - 20 * COLS) / (COLS - 1) : 0;\n    IF (GAP > 4) GAP = 4;\n    LEAD = (WIDTH - (20 + GAP) * COLS + GAP + 1) / 2;\n        YEAR++;\n}\n \nVOID PRINT_ROW(INT ROW)\n{\n    INT C, I, FROM = ROW * COLS, TO = FROM + COLS;\n    SPACE(LEAD);\n    FOR (C = FROM; C < TO; C++) {\n        I = STRLEN(MONTHS[C].NAME);\n        SPACE((20 - I)/2);\n        PRINT(MONTHS[C].NAME);\n        SPACE(20 - I - (20 - I)/2 + ((C == TO - 1) ? 0 : GAP));\n    }\n    PUTCHAR('\\012');\n \n    SPACE(LEAD);\n    FOR (C = FROM; C < TO; C++) {\n        FOR (I = 0; I < 7; I++) {\n            PRINT(WDAYS[I]);\n            PRINT(I == 6 ? \"\" : \" \");\n        }\n        IF (C < TO - 1) SPACE(GAP);\n        ELSE PUTCHAR('\\012');\n    }\n \n    WHILE (1) {\n        FOR (C = FROM; C < TO; C++)\n            IF (MONTHS[C].AT < MONTHS[C].DAYS) BREAK;\n        IF (C == TO) BREAK;\n \n        SPACE(LEAD);\n        FOR (C = FROM; C < TO; C++) {\n            FOR (I = 0; I < MONTHS[C].START_WDAY; I++) SPACE(3);\n            WHILE(I++ < 7 && MONTHS[C].AT < MONTHS[C].DAYS) {\n                INT MM = ++MONTHS[C].AT;\n                PUTCHAR((MM < 10) ? ' ' : '0' + (MM /10));\n                PUTCHAR('0' + (MM %10));\n                IF (I < 7 || C < TO - 1) PUTCHAR(' ');\n            }\n            WHILE (I++ <= 7 && C < TO - 1) SPACE(3);\n            IF (C < TO - 1) SPACE(GAP - 1);\n            MONTHS[C].START_WDAY = 0;\n        }\n        PUTCHAR('\\012');\n    }\n    PUTCHAR('\\012');\n}\n \nVOID PRINT_YEAR(VOID)\n{\n    INT Y = YEAR;\n    INT ROW;\n    CHAR BUF[32];\n    CHAR * B = &(BUF[31]);\n    *B-- = '\\0';\n    DO {\n        *B-- = '0' + (Y % 10);\n        Y /= 10;\n    } WHILE (Y > 0);\n    B++;\n    SPACE((WIDTH - STRLEN(B)) / 2);\n    PRINT(B);PUTCHAR('\\012');PUTCHAR('\\012');\n    FOR (ROW = 0; ROW * COLS < 12; ROW++)\n        PRINT_ROW(ROW);\n}\n \nINT MAIN(INT C, CHAR **V)\n{\n    INT I, YEAR_SET = 0, RESULT = 0;\n    FOR (I = 1; I < C && RESULT == 0; I++) {\n        IF (V[I][0] == '-' && V[I][1] == 'W' && V[I][2] == '\\0') {\n            IF (++I == C || (WIDTH = ATOI(V[I])) < 20)\n                RESULT = 1;\n        } ELSE IF (!YEAR_SET) {\n            YEAR = ATOI(V[I]);\n            IF (YEAR <= 0)\n                YEAR = 1969;\n            YEAR_SET = 1;\n        } ELSE\n            RESULT = 1;\n    }\n \n    IF (RESULT == 0) {\n        INIT_MONTHS();\n        PRINT_YEAR();\n    } ELSE {\n        PRINT(\"BAD ARGS\\012USAGE: \");\n        PRINT(V[0]);\n        PRINT(\" YEAR [-W WIDTH (>= 20)]\\012\");\n    }\nRETURN RESULT;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc printMonths(year int) {\n\n\tvar months []string\n\t\n\tfor i := 2008;i<=year+2008;i{} {\n\t\tif i%4==0 {\n\t\t\tif i%2==0 {\n\t\t\tmonths=append(months,\"fem\")\n\t\t\t}else {\n\t\t\t\tmonths=append(months,\"m\")\n\t\t\t}\n\t\t}else if i%2==0 {\n\t\t\t\n\t\t\tmonths=append(months,\"m\")\n\t\t}else {\n\t\t\t\n\t\t\t\n\t\t\tmonths=append(months,\"masculine\")\n\t\t}\n\t\t\n\t}\n\t\n\tfmt.Println(i+\" \"+months[i])\n}\n\n\nvar input string\n\n\ntype month struct{ name string }\n\n\nconst months = [12]{ \"first\":month{\"Jan\"}, \"second\":month{\"Feb\"},\n\t\"third\":month{\"Mar\"}, \"fourth\":month{\"Apr\"}, \"fifth\":month{\"May\"},\n\t\"sixth\":month{\"Jun\"}, \"seventh\":month{\"Jul\"}, \"eighth\":month{\"Aug\"},\n\t\"ninth\":month{\"Sep\"}, \"tenth\":month{\"Oct\"}, \"eleventh\":month{\"Nov\"},\n\t\"twelfth\":month{\"Dec\"} }\n\nfunc main() {\n\tinput=\"2121231415 222221223\"\n\n\tprintMonths(2022)\n\n\n\tm := make(map[int]bool)\n\ts := \"\"\n\tfor _, c := range input {\n\t\tswitch {\n\t\tcase c >= '0' && c <= '9':\n\t\t\ti := float64(int(c)-48)\n\t\tcase c >= 'a' && c <= 'z':\n\t\t\ti := int(c)-65\n\t\tdefault:\n\t\t\treturn\n\t\t}\n\t\tm[i] = true\n\t\ts+=strings.Repeat(string(i),len(s))\n\t}\n\tfor k, _ := range m {\n\t\tif!has(k) {\n\t\t\tbreak\n\t\t}\n\t}\n\tfmt.Printf(\"%d : %v\\n\", len(m)-(k>0), s)\n}\n\n\n\nfunc has(n int) bool {\n\tbol := false\n\tfor v := n; ; v++ {\n\t\tv--\n\t\tbol = v%10 == 0\n\t\tif bol &&\n\t\t\tlen(fmt.Sprint(v))==len(fmt.Sprintf(n))+1 {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn bol\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 231,
    "input": "Translate C++ to C#:#include <iostream>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\nclass magicSqr\n{\npublic: \n    magicSqr( int d ) {\n        while( d % 4 > 0 ) { d++; }\n        sz = d;\n        sqr = new int[sz * sz];\n        fillSqr();\n    }\n    ~magicSqr() { delete [] sqr; }\n\n    void display() const {\n        cout << \"Doubly Even Magic Square: \" << sz << \" x \" << sz << \"\\n\";\n        cout << \"It's Magic Sum is: \" << magicNumber() << \"\\n\\n\";\n        ostringstream cvr; cvr << sz * sz;\n        int l = cvr.str().size();\n \n        for( int y = 0; y < sz; y++ ) {\n            int yy = y * sz;\n            for( int x = 0; x < sz; x++ ) {\n                cout << setw( l + 2 ) << sqr[yy + x];\n            }\n            cout << \"\\n\";\n        }\n        cout << \"\\n\\n\";\n    }\nprivate:\n    void fillSqr() {\n        static const bool tempAll[4][4] = {{ 1, 0, 0, 1 }, { 0, 1, 1, 0 }, { 0, 1, 1, 0 }, { 1, 0, 0, 1 } };\n        int i = 0;\n        for( int curRow = 0; curRow < sz; curRow++ ) {\n            for( int curCol = 0; curCol < sz; curCol++ ) {\n                sqr[curCol + sz * curRow] = tempAll[curRow % 4][curCol % 4] ? i + 1 : sz * sz - i;\n                i++;\n            }\n        }\n    }\n    int magicNumber() const { return sz * ( ( sz * sz ) + 1 ) / 2; }\n \n    int* sqr;\n    int sz;\n};\n \nint main( int argc, char* argv[] ) {\n    magicSqr s( 8 );\n    s.display();\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "namespace RosettaCode.MagicSquare\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n\n    internal static class Program\n    {\n        \n        \n        \n        \n        \n        \n        private static IEnumerable<int> GenerateMagicSquare(int n)\n        {\n            \n            var rows = Enumerable.Range(1, n).Select(i => Enumerable.Repeat(i, n)).ToList();\n\n            \n            \n            foreach (var row in rows)\n            {\n                \n                var sum = 0;\n                foreach (var num in row)\n                {\n                    if ((num >= 1 && num <= n) || (num == 0))\n                        sum += num;\n                }\n                yield return sum;\n            }\n        }\n\n        \n        \n\n        \n        private static void Main()\n        {\n            \n            foreach (var ns in new[]\n                                {\n                                    new { N = 8 },\n                                    new { N = 15 }\n                                })\n            {\n                Console.WriteLine(\"{0}: {1}\", ns.N,\n                            string.Join(\" \", GenerateMagicSquare(ns.N)));\n            }\n        }\n    }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 232,
    "input": "Translate C++ to Go:#include <cstdio>\n#include <cstdlib>\n\nclass Point {\nprotected:\n    int x, y;\n\npublic:\n    Point(int x0 = 0, int y0 = 0) : x(x0), y(y0) {}\n    Point(const Point &p) : x(p.x), y(p.y) {}\n    virtual ~Point() {}\n    const Point& operator=(const Point &p) {\n        if (this != &p) {\n            x = p.x;\n            y = p.y;\n        }\n        return *this;\n    }\n    int getX() { return x; }\n    int getY() { return y; }\n    void setX(int x0) { x = x0; }\n    void setY(int y0) { y = y0; }\n    virtual void print() { printf(\"Point\\n\"); }\n};\n\nclass Circle: public Point {\nprivate:\n    int r;\n\npublic:\n    Circle(Point p, int r0 = 0) : Point(p), r(r0) {}\n    Circle(int x0 = 0, int y0 = 0, int r0 = 0) : Point(x0, y0), r(r0) {}\n    virtual ~Circle() {}\n    const Circle& operator=(const Circle &c) {\n        if (this != &c) {\n            x = c.x;\n            y = c.y;\n            r = c.r;\n        }\n        return *this;\n    }\n    int getR() { return r; }\n    void setR(int r0) { r = r0; }\n    virtual void print() { printf(\"Circle\\n\"); }\n};\n\nint main() {\n    Point *p = new Point();\n    Point *c = new Circle();\n    p->print();\n    c->print();\n    delete p;\n    delete c;\n\n    return EXIT_SUCCESS;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\ntype point struct{ x, y float64 }\n\nfunc (p1 point) dist2(p2 point) float64 {\n\treturn p1.x - p2.x + p1.y*p2.z/p2.x\n}\n\n\nvar testCases = []struct{\n\tp1, p2 point\n}{\n\t{point{x: 3.14159, y: 0}, point{x:.70713, y: -.5}},\n\t\n\tpoint{x: 0, y: 1},\n\tpoint{x: 10000000, y: 2000000},\n}\n\nfunc main(){\n\tfor _, tc := range testCases{\n\t\td:= tc.p1.dist2(tc.p2)\n\t\tif d > 0{\n\t\t\tfmt.Printf(\"%+9.6f\\n\",d)\n\t\t}\n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 233,
    "input": "Translate C to Java:#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <unistd.h>\n\n#include <expat.h>\n#include <pcre.h>\n\n#ifdef XML_LARGE_SIZE\n#  define XML_FMT_INT_MOD \"ll\"\n#else\n#  define XML_FMT_INT_MOD \"l\"\n#endif\n\n#ifdef XML_UNICODE_WCHAR_T\n#  define XML_FMT_STR \"ls\"\n#else\n#  define XML_FMT_STR \"s\"\n#endif\n\nvoid reset_char_data_buffer();\nvoid process_char_data_buffer();\n\nstatic bool last_tag_is_title;\nstatic bool last_tag_is_text;\n\nstatic pcre *reCompiled;\nstatic pcre_extra *pcreExtra;\n\n\nvoid start_element(void *data, const char *element, const char **attribute) {\n    process_char_data_buffer();\n    reset_char_data_buffer();\n\n    if (strcmp(\"title\", element) == 0) {\n        last_tag_is_title = true;\n    }\n    if (strcmp(\"text\", element) == 0) {\n        last_tag_is_text = true;\n    }\n}\n\nvoid end_element(void *data, const char *el) {\n    process_char_data_buffer();\n    reset_char_data_buffer();\n}\n\n\n#define TITLE_BUF_SIZE (1024 * 8)\n\nstatic char char_data_buffer[1024 * 64 * 8];\nstatic char title_buffer[TITLE_BUF_SIZE];\nstatic size_t offs;\nstatic bool overflow;\n\n\nvoid reset_char_data_buffer(void) {\n    offs = 0;\n    overflow = false;\n}\n\n\nvoid char_data(void *userData, const XML_Char *s, int len) {\n    if (!overflow) {\n        if (len + offs >= sizeof(char_data_buffer)) {\n            overflow = true;\n            fprintf(stderr, \"Warning: buffer overflow\\n\");\n            fflush(stderr);\n        } else {\n            memcpy(char_data_buffer + offs, s, len);\n            offs += len;\n        }\n    }\n}\n\nvoid try_match();\n\n\nvoid process_char_data_buffer(void) {\n    if (offs > 0) {\n        char_data_buffer[offs] = '\\0';\n\n        if (last_tag_is_title) {\n            unsigned int n = (offs+1 > TITLE_BUF_SIZE) ? TITLE_BUF_SIZE : (offs+1);\n            memcpy(title_buffer, char_data_buffer, n);\n            last_tag_is_title = false;\n        }\n        if (last_tag_is_text) {\n            try_match();\n            last_tag_is_text = false;\n        }\n    }\n}\n\nvoid try_match()\n{\n    int subStrVec[80];\n    int subStrVecLen;\n    int pcreExecRet;\n    subStrVecLen = sizeof(subStrVec) / sizeof(int);\n\n    pcreExecRet = pcre_exec(\n            reCompiled, pcreExtra,\n            char_data_buffer, strlen(char_data_buffer),\n            0, 0,\n            subStrVec, subStrVecLen);\n\n    if (pcreExecRet < 0) {\n        switch (pcreExecRet) {\n            case PCRE_ERROR_NOMATCH      : break;\n            case PCRE_ERROR_NULL         : fprintf(stderr, \"Something was null\\n\");                      break;\n            case PCRE_ERROR_BADOPTION    : fprintf(stderr, \"A bad option was passed\\n\");                 break;\n            case PCRE_ERROR_BADMAGIC     : fprintf(stderr, \"Magic number bad (compiled re corrupt?)\\n\"); break;\n            case PCRE_ERROR_UNKNOWN_NODE : fprintf(stderr, \"Something kooky in the compiled re\\n\");      break;\n            case PCRE_ERROR_NOMEMORY     : fprintf(stderr, \"Ran out of memory\\n\");                       break;\n            default                      : fprintf(stderr, \"Unknown error\\n\");                           break;\n        }\n    } else {\n        puts(title_buffer);  \n    }\n}\n\n\n#define BUF_SIZE 1024\n\nint main(int argc, char *argv[])\n{\n    char buffer[BUF_SIZE];\n    int n;\n\n    const char *pcreErrorStr;\n    int pcreErrorOffset;\n    char *aStrRegex;\n    char **aLineToMatch;\n\n    \n\n    aStrRegex = \"(.*)(==French==)(.*)\";  \n\n    reCompiled = pcre_compile(aStrRegex, PCRE_DOTALL | PCRE_UTF8, &pcreErrorStr, &pcreErrorOffset, NULL);\n    if (reCompiled == NULL) {\n        fprintf(stderr, \"ERROR: Could not compile regex '%s': %s\\n\", aStrRegex, pcreErrorStr);\n        exit(1);\n    }\n\n    pcreExtra = pcre_study(reCompiled, 0, &pcreErrorStr);\n    if (pcreErrorStr != NULL) {\n        fprintf(stderr, \"ERROR: Could not study regex '%s': %s\\n\", aStrRegex, pcreErrorStr);\n        exit(1);\n    }\n\n    \n\n    XML_Parser parser = XML_ParserCreate(NULL);\n\n    XML_SetElementHandler(parser, start_element, end_element);\n    XML_SetCharacterDataHandler(parser, char_data);\n\n    reset_char_data_buffer();\n\n    while (1) {\n        int done;\n        int len;\n\n        len = (int)fread(buffer, 1, BUF_SIZE, stdin);\n        if (ferror(stdin)) {\n            fprintf(stderr, \"Read error\\n\");\n            exit(1);\n        }\n        done = feof(stdin);\n\n        if (XML_Parse(parser, buffer, len, done) == XML_STATUS_ERROR) {\n            fprintf(stderr,\n                \"Parse error at line %\" XML_FMT_INT_MOD \"u:\\n%\" XML_FMT_STR \"\\n\",\n                XML_GetCurrentLineNumber(parser),\n                XML_ErrorString(XML_GetErrorCode(parser)));\n            exit(1);\n        }\n\n        if (done) break;\n    }\n\n    XML_ParserFree(parser);\n\n    pcre_free(reCompiled);\n\n    if (pcreExtra != NULL) {\n#ifdef PCRE_CONFIG_JIT\n        pcre_free_study(pcreExtra);\n#else\n        pcre_free(pcreExtra);\n#endif\n    }\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.net.URLConnection;\n\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\n\n\t\tString url=\"http:\n\n\t\t\n\t\tURL connection = new URL(url);\n\t\tURLConnection ucon = connection.openConnection();\n\n\t\t\n\t\t\n\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(ucon.getInputStream()));\n\n\t\tStringBuilder response = new StringBuilder(\"\");\n\n\t\ttry {\n\t\t\twhile(!rd.readLine().contains(\"Charter\")).isEmpty()){\n\t\t\t\tresponse.append(\"\\n\"+rd.readLine());\n\t\t}}\n\n\t\tcatch(IOException e){\n\t\t\t\n\t\t\tSystem.out.println(e.toString());\n\t\t}\n\t\t\n\n\t\trd.close();\t\n\t}\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 234,
    "input": "Translate C to Go:#include<stdio.h>\n#include<stdlib.h>\n\nint isprime( int p ) {\n    int i;\n    if(p==2) return 1;\n    if(!(p%2)) return 0;\n    for(i=3; i*i<=p; i+=2) {\n       if(!(p%i)) return 0;\n    }\n    return 1;\n}\n\nint main( void ) {\n   int s=0, p, i=1;\n   for(p=2;p<=999;p++) {\n       if(isprime(p)) {\n           if(i%2) {\n               s+=p;\n               if(isprime(s)) printf( \"%d       %d       %d\\n\", i, p, s );\n           }\n           i+=1;\n       }\n   }\n   return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc sieve(limit uint64) []bool {\n\tvar c = make([]bool, limit+1)\n\tc[0] = true\n\tc[1] = true\n\t\n\tfor i := uint64(4); i <= limit; i += 2 {\n\t\tif!c[i] {\n\t\t\tcontinue \n\t\t}\n\t\t\n\t\tj := uint64(i * 2)\n\t\tfor j <= limit {\n\n\t\t\t\n\t\t\tc[j] = true\n\t\t\t\n\t\t\tj += i\n\t\t}\t\n\t}\n\treturn c\n}\n\nvar a = [20][20]int{\n\t{0},\n\t{1},\n\t{2: 1},\n}\n\ntype primeCount struct {\n\tpowers []uint64\n\tsum    int\n}\n\nfunc (pc *primeCount) count(n uint64) bool {\n\tif n < pc.powers[len(pc.powers)-1]+1 {\n\t\tpc.sum++\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc commatize(n int) string {\n\tbigNum := fmt.Sprintf(\"%d\", n)\n\ti := len(bigNum) - 1\n\tfor j := bigNum[i-1]; j == ''; i-- {\n\t\tn /= 10\n\t\tbigNum = bigNum[:i]\n\t\tfmt.Printf(\", %s \", bigNum)\n\t}\n\treturn bigNum\n}\n\nfunc main() {\n\tconst (\n\t\tlimit      = 10000000\n\t\tprimesLen = 19\n\t)\n\n\tsieveLimit := uint64(primesLen*primesLen + 13 / 8)\n\tc := sieve(sieveLimit)\n\ta[0].sum++\n\n\tpcount := &primeCount{}\n\tfor n := uint64(2); n < sieveLimit; n++ {\n\t\tif!c[n] && pcount.count(n) { \n\n\t\t\t\n\t\t\t\n\t\t\tpcount.powers = append(a[pcount.powers], n)\n\t\t\tfmt.Println(\"!Sieve:\"\n\t\t\t\t+ commatize(len(c))\n\t\t\t\t+\" primes under\"\n\t\t\t\t+ commatize(n)\n\t\t\t\t+\":\")\n\t\t\tfor _, x := range a[pcount.powers] {\n\t\t\t\tfmt.Printf(\"%6v \", x)\n\t\t\t}\n\t\t\tfmt.Println()\n\t\t}\n\t}\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 235,
    "input": "Translate C# to Go:using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace DES {\n    class Program {\n        \n        static string ByteArrayToString(byte[] ba) {\n            return BitConverter.ToString(ba).Replace(\"-\", \"\");\n        }\n\n        \n        \n        static byte[] Encrypt(byte[] messageBytes, byte[] passwordBytes) {\n            byte[] iv = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n            \n            DESCryptoServiceProvider provider = new DESCryptoServiceProvider();\n            ICryptoTransform transform = provider.CreateEncryptor(passwordBytes, iv);\n            CryptoStreamMode mode = CryptoStreamMode.Write;\n\n            \n            MemoryStream memStream = new MemoryStream();\n            CryptoStream cryptoStream = new CryptoStream(memStream, transform, mode);\n            cryptoStream.Write(messageBytes, 0, messageBytes.Length);\n            cryptoStream.FlushFinalBlock();\n\n            \n            byte[] encryptedMessageBytes = new byte[memStream.Length];\n            memStream.Position = 0;\n            memStream.Read(encryptedMessageBytes, 0, encryptedMessageBytes.Length);\n\n            return encryptedMessageBytes;\n        }\n\n        \n        \n        static byte[] Decrypt(byte[] encryptedMessageBytes, byte[] passwordBytes) {\n            byte[] iv = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n            \n            DESCryptoServiceProvider provider = new DESCryptoServiceProvider();\n            ICryptoTransform transform = provider.CreateDecryptor(passwordBytes, iv);\n            CryptoStreamMode mode = CryptoStreamMode.Write;\n\n            \n            MemoryStream memStream = new MemoryStream();\n            CryptoStream cryptoStream = new CryptoStream(memStream, transform, mode);\n            cryptoStream.Write(encryptedMessageBytes, 0, encryptedMessageBytes.Length);\n            cryptoStream.FlushFinalBlock();\n\n            \n            byte[] decryptedMessageBytes = new byte[memStream.Length];\n            memStream.Position = 0;\n            memStream.Read(decryptedMessageBytes, 0, decryptedMessageBytes.Length);\n\n            return decryptedMessageBytes;\n        }\n\n        static void Main(string[] args) {\n            byte[] keyBytes = new byte[] { 0x0e, 0x32, 0x92, 0x32, 0xea, 0x6d, 0x0d, 0x73 };\n            byte[] plainBytes = new byte[] { 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87 };\n\n            byte[] encStr = Encrypt(plainBytes, keyBytes);\n            Console.WriteLine(\"Encoded: {0}\", ByteArrayToString(encStr));\n\n            byte[] decBytes = Decrypt(encStr, keyBytes);\n            Console.WriteLine(\"Decoded: {0}\", ByteArrayToString(decBytes));\n        }\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"log\"\n\t\"math/big\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\n\t\"golang.org/x/crypto/bouncynewts/v1/newtp\"\n)\n\nfunc init() {\n\tif len(os.Getenv(\"POETYP\"))!= 1 {\n\t\tlog.Fatal(\"poet type must be either 'rsa' or 'aes'\")\n\t}\n\ttype poetType int\n\tconstientTypes := [2]int{3, 5} \n\tpoets := [...]string{\n\t\t\"The Vigenère Cipher\", \"Symmetric Block Encryption\",\n\t\t\n\t\t\"AES-128\", \"AES-256\"}\n\tfor _, v := range poets {\n\t\tswitch poentype := constientTypes[int(v)]; poentype {\n\t\tcase 3:\n\t\t\tcontinue\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t\tbreak\n\t}\n}\n\n\ntype Key struct {\n\tKey   []byte\n\tEncr *big.Int\n\tDecr *big.Int\n\t\n\t\n\t\n}\n\n\n\nvar pKey = new(big.Int)\nconst nBits = 64 \n\nfunc (k *Key) Encipher(pt []byte) ([]byte, error) {\n\tvar out big.Int\n\tout.Exp(k.Encr, k.Key, nil)\n\treturn bytes.ReplaceAllRune(nil, out.Uint8(), pt), nil\n}\n\n\n\n\nfunc (k *Key) Decipher(cti []byte) ([]byte, error) {\n\tvar out big.Int\n\tout.Lsh(&pKey, k.Decr)\n\tout.Rsh(&pKey, k.Decr)\n\tout.AndUint64(out, k.Encr)\n\tout.SubUint64(out, k.Encr)\n\tout.OrUint64(out, cti)\n\tout.Shl(nBits/2, &out)\n\tout.Rsh(&out, -nBits%2)\n\tout.ModUint64(out, &pKey)\n\treturn bytes.TrimSpaceRune(nil)(out.BitLen()), nil\n}\n\n\n\n\n\nfunc NewPoet(pkey []byte, cty int) (*Key, error){\n\tbigR, err := newtp.NewBigRandom()\n\tif err!= nil {\n\t\tpanic(err)\n\t}\n\tkey := make([]byte, nBits/n4bits+16)\n\tcopy(key[:], pkey)\n\trand := big.NewInt(int64(len(cty)))\n\tk := new(Key)\n\tk.Key = copy(key, rand.Bytes(nBits))\n\tk.Encr = big.NewInt(nBits)\n\tk.Decr = big.NewInt(nBits)\n\treturn k, nil\n}\n\nfunc TestVigenereCipher(poet string, testNums...int) {\n\tfmt.Printf(\"%s\\n\", poet)\n\tctis := make([]byte, len(testNums)*len(strings.Split(poet, \" \")))\n\ti := 0\n\tfor ; i < len(testNums); i++ {\n\t\tcT := strings.ToLower(string(testNums[i]))\n\t\tfor j := 0; j < len(poet); j++ {\n\t\t\t\n\t\t\tif cT == poem[j] {\n\t\t\t\t\n\t\t\t\tctis[i] = poem[j]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tvC, _ := poet.Type().NewTPCTextOf(ctis)\n\tfmt.Println(\"vigenere:\", vC.Encode())\n\tfmt.Println(\"plaintext:\", string(ctis))\n\n\tfmt.Print(\"Original encryption: \")\n\tshowText(fmt.Sprintf(\"%c%c...%c\",ctis[0],ctis[1],ctis[len(ctis)-2],ctis[len(ctis)-1]))\n\n\tfmt.Print(\"\\nThe ciphertext is:\")\n\tshowText(fmt.Sprint(ctis))\n\n\n\n\n\tfunc showText(s string) {\n\t\tfmt.Println(\"\")\n\t\tfmt.Print(\"[\")\n\t\tfmt.Println(s)\n\t\tfmt.Println(\"]\")\n\t}\n}\n\nfunc main() {\n\n\tfmt.Println(`Choose a cipher type from below. Type 0 to quit.\n\n\tAes-128           | The AES-128 block cipher used in most modern browsers.\\n`\n\t+\"Aes-\" + strconv.Itoa(constientTypes[0]) +\n\t`| Symmetric Block Encryption algorithm with an integer constant (`+\n\t`keypath of ` + strconv.Itoa(nBits) + `\" bits).\\n\")\n\n\tfmt.Println(`\n\tThe Vigenère Cipher method uses an alphabitical index (\"key\") that's multiplied by its corresponding plaintext letter's ASCII value before being added together modulo 26.\\n`)\n\tfmt.Println(\n\t\t\"The key for this example will multiply each plaintext character by it's position within the alphabet:\\nk = \n\t\t\"[0123456789ABCDEF][13][14][15][16]\"\n\t)\n\n\n\tvar ok bool\n\tpt := []byte{\"This is an experiment.\"}\n\tfmt.Println(\"\\nPlain text: \", pt)\n\tfmt.Println(\"Length:\", len(pt), \"->\", hex(ptString(pt)), \"\\n\")\n\n\n\tok = true\n\tprinter := bufio.NewReader(os.Stdin)\n\tline, eerr := printer.ReadString('\\n')\n\tfmt.Log(\"Output was:\", levenshteinDistance(hex(ptString(pt)), hex(ptString(ok))))\n",
    "input_language": "C#",
    "output_language": "Go"
  },
  {
    "id": 236,
    "input": "Translate C to Go:#include <gmp.h>\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n\tmpz_t a;\n\tmpz_init_set_ui(a, 5);\n\tmpz_pow_ui(a, a, 1 << 18); \n\n\tint len = mpz_sizeinbase(a, 10);\n\tprintf(\"GMP says size is: %d\\n\", len);\n\n\t\n\tchar *s = mpz_get_str(0, 10, a);\n\tprintf(\"size really is %d\\n\", len = strlen(s));\n\tprintf(\"Digits: %.20s...%s\\n\", s, s + len - 20);\n\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc main() {\n    var b big.Int\n    fmt.Println(\"What bit width?\")\n    var n int\n    fmt.Scan(&n)\n    for i := 32; i >= n; i++ {\n        b.Lsh(&b, float64(i))\n        r := b.String(n, 9)\n        if!strings.HasSuffix(r, \"0\") && strings.HasPrefix(r, \"8.\") {\n            fmt.Printf(\"%3d \", i)\n        }\n        fmt.Print(r)\n    }\n    fmt.Println(\"\\nDone\")\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 237,
    "input": "Translate Python to Go:from itertools import izip\n\ndef gen_row(w, s):\n    \n    def gen_seg(o, sp):\n        if not o:\n            return [[2] * sp]\n        return [[2] * x + o[0] + tail\n                for x in xrange(1, sp - len(o) + 2)\n                for tail in gen_seg(o[1:], sp - x)]\n\n    return [x[1:] for x in gen_seg([[1] * i for i in s], w + 1 - sum(s))]\n\n\ndef deduce(hr, vr):\n    \n    def allowable(row):\n        return reduce(lambda a, b: [x | y for x, y in izip(a, b)], row)\n\n    def fits(a, b):\n        return all(x & y for x, y in izip(a, b))\n\n    def fix_col(n):\n        \n        c = [x[n] for x in can_do]\n        cols[n] = [x for x in cols[n] if fits(x, c)]\n        for i, x in enumerate(allowable(cols[n])):\n            if x != can_do[i][n]:\n                mod_rows.add(i)\n                can_do[i][n] &= x\n\n    def fix_row(n):\n        \n        c = can_do[n]\n        rows[n] = [x for x in rows[n] if fits(x, c)]\n        for i, x in enumerate(allowable(rows[n])):\n            if x != can_do[n][i]:\n                mod_cols.add(i)\n                can_do[n][i] &= x\n\n    def show_gram(m):\n        \n        \n        for x in m:\n            print \" \".join(\"x\n        print\n\n    w, h = len(vr), len(hr)\n    rows = [gen_row(w, x) for x in hr]\n    cols = [gen_row(h, x) for x in vr]\n    can_do = map(allowable, rows)\n\n    \n    mod_rows, mod_cols = set(), set(xrange(w))\n\n    while mod_cols:\n        for i in mod_cols:\n            fix_col(i)\n        mod_cols = set()\n        for i in mod_rows:\n            fix_row(i)\n        mod_rows = set()\n\n    if all(can_do[i][j] in (1, 2) for j in xrange(w) for i in xrange(h)):\n        print \"Solution would be unique\" \n    else:\n        print \"Solution may not be unique, doing exhaustive search:\"\n\n    \n    \n    \n    out = [0] * h\n\n    def try_all(n = 0):\n        if n >= h:\n            for j in xrange(w):\n                if [x[j] for x in out] not in cols[j]:\n                    return 0\n            show_gram(out)\n            return 1\n        sol = 0\n        for x in rows[n]:\n            out[n] = x\n            sol += try_all(n + 1)\n        return sol\n\n    n = try_all()\n    if not n:\n        print \"No solution.\"\n    elif n == 1:\n        print \"Unique solution.\"\n    else:\n        print n, \"solutions.\"\n    print\n\n\ndef solve(p, show_runs=True):\n    s = [[[ord(c) - ord('A') + 1 for c in w] for w in l.split()]\n         for l in p.splitlines()]\n    if show_runs:\n        print \"Horizontal runs:\", s[0]\n        print \"Vertical runs:\", s[1]\n    deduce(s[0], s[1])\n\n\ndef main():\n    \n    fn = \"nonogram_problems.txt\"\n    for p in (x for x in open(fn).read().split(\"\\n\\n\") if x):\n        solve(p)\n\n    print \"Extra example not solvable by deduction alone:\"\n    solve(\"B B A A\\nB B A A\")\n\n    print \"Extra example where there is no solution:\"\n    solve(\"B A A\\nA A A\")\n\nmain()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"strconv\"\n)\n\n\ntype cell struct {\n\trow, col int\n\tvalue    string\n}\n\nfunc newCell(r, c int) cell {\n\tif r < 0 || r > 9 || c < 0 || c > 10 {\n\t\tpanic(\"invalid position\")\n\t}\n\treturn cell{row: r, col: c, value: \"\"}\t\n}\n\n\nvar cells []cell\n\n\n\n\nconst(\n\twrapSpace = strings.Repeat(\" \", 20*11-3)\n)\n\n\n\nfunc checkOne(cell cell) bool {\n\tswitch {c := cell.col; r := cell.row}{\n\tcase r%wrapSize == wrapSpace{\n\t\t\n\t\tfor _, dr := range []int{-c, c}{-dr,c} {\n\t\t\tif!strings.ContainsRune(strings.ReplaceAll(fmt.Sprint(cell.value),'', wrapSpace), dr){\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}, r-wrapSize/2 <= wrapSpaceLen{\n\t\t\t\n\t\t\tcell.value[wrpSpaceLen-rwrapSize+2]*=2,\n\t\t\tr % wrapSize == wrapSpaceLen-2||r%wrapSize==wrapSpaceLen-1&&cell.value[rwrapSize+r+1]=='':return true:{\n\t\t\t\t\n\t\t\t\t\tvar t int\n\t\t\t\t\tt = strings.IndexAny(string([]byte(cell.value[:wrapSize]),dr),' ')\n\t\t\t\t\t\n\t\t\t\t\tif t>=0{return true}}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tdefault:return false}}return false}\n\n\n\nfor _, rw := range [][]cell{{newCell(-1,-1)}, {newCell(-1, 0)}} {\n\tcells = append(cells,rw...)\n}\n\n\n\n\ncells[0].value = strconv.Itoa(cells[0].col)+cells[0].value\n\n\n\nt := 0\nfor _, rw := range [][]cell{{newCell(0, -1)}{}...{newCell(9,-1)}} {\n\tsol := make(map[int]int)\n\tsol[rw[0].col]=rw[0].value\n\t\n\tfor k := range(sol ) {\n\t\tif checkOne(k) {\n\t\t\tt++\n\t\t\tbreak\n\t\t}\n\t}\n}\n\n\n\n\n\nfmt.Println(t)\n\n\n\n\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 238,
    "input": "Translate Python to Go:def hourglass_puzzle():\n    t4 = 0\n    while t4 < 10_000:\n        t7_left = 7 - t4 % 7\n        if t7_left == 9 - 4:\n            break\n        t4 += 4\n    else:\n        print('Not found')\n        return \n    print(f)\n \nhourglass_puzzle()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar n, s uint; c := make([]int, 60) \n\n\tfor i := range c {\n\t\tc[i] = i + 'A'\n\t}\n\n\tfmt.Println(\"Hourly puzzle:\")\n\n\tfor h := 8; h >= 6; h-- {\n\t\ts = (s+3)*24\n\t\tfor m := 1; ; m++ {\n\t\t\tif ((h*3-1)+m)%30 == 0 { break }\n\t\t}\n\t\tc[s]+=c[m]\n\t\tfmt.Printf(\"%2d \", m); s++\n\t\tif s%15 == 0 {\n\t\t\tfmt.Println()\n\t\t}\n\t}\n\n\tfmt.Println(\"\\nFinal answer:\")\n\tfor x := 00; x <= 23; x++ {\n\t\tif x > 09 && x < 18 { p := int(x/5 +.5) * 6 } else { p := int(x/5 +.25) * 6 } \n\t\tbx := x + int(p*.5);\n\t\tc[bx]%16 == 14 || :  \n\t\tfmt.Print(c[bx], \" \")\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 239,
    "input": "Translate C++ to VB:for(int i = 10; i >= 0; --i)\n  std::cout << i << \"\\n\";\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Public Sub MyLoop()\n    Dim i As Integer\n    For i = -8 To 7 Step 2\n        Debug.Print i;\n    Next i\n    Debug.Print\nEnd Sub\n",
    "input_language": "C++",
    "output_language": "VB"
  },
  {
    "id": 240,
    "input": "Translate C++ to Java:#include <array>\n#include <bitset>\n#include <iostream>\n\nusing namespace std;\n\nstruct FieldDetails {string_view Name; int NumBits;};\n\n\n\ntemplate <const char *T> consteval auto ParseDiagram()\n{  \n    \n    constexpr string_view rawArt(T);\n    constexpr auto firstBar = rawArt.find(\"|\");\n    constexpr auto lastBar = rawArt.find_last_of(\"|\");\n    constexpr auto art = rawArt.substr(firstBar, lastBar - firstBar);\n    static_assert(firstBar < lastBar, \"ASCII Table has no fields\");\n    \n    \n    constexpr auto numFields = \n        count(rawArt.begin(), rawArt.end(), '|') -\n        count(rawArt.begin(), rawArt.end(), '\\n') / 2;    \n    array<FieldDetails, numFields> fields;\n    \n    \n    bool isValidDiagram = true;\n    int startDiagramIndex = 0;\n    int totalBits = 0;\n    for(int i = 0; i < numFields; )\n    {\n        auto beginningBar = art.find(\"|\", startDiagramIndex);\n        auto endingBar = art.find(\"|\", beginningBar + 1);\n        auto field = art.substr(beginningBar + 1, endingBar - beginningBar - 1);\n        if(field.find(\"-\") == field.npos) \n        {\n            int numBits = (field.size() + 1) / 3;\n            auto nameStart = field.find_first_not_of(\" \");\n            auto nameEnd = field.find_last_not_of(\" \");\n            if (nameStart > nameEnd || nameStart == string_view::npos) \n            {\n                \n                isValidDiagram = false;\n                field = \"\"sv;\n            }\n            else\n            {\n                field = field.substr(nameStart, 1 + nameEnd - nameStart);\n            }\n            fields[i++] = FieldDetails {field, numBits};\n            totalBits += numBits;\n        }\n        startDiagramIndex = endingBar;\n    }\n    \n    int numRawBytes = isValidDiagram ? (totalBits - 1) / 8 + 1 : 0;\n    return make_pair(fields, numRawBytes);\n}\n\n\ntemplate <const char *T> auto Encode(auto inputValues)\n{\n    constexpr auto parsedDiagram = ParseDiagram<T>();\n    static_assert(parsedDiagram.second > 0, \"Invalid ASCII talble\");\n    array<unsigned char, parsedDiagram.second> data;\n\n    int startBit = 0;\n    int i = 0;\n    for(auto value : inputValues)\n    {\n        const auto &field = parsedDiagram.first[i++];\n        int remainingValueBits = field.NumBits;\n        while(remainingValueBits > 0)\n        {\n            \n            auto [fieldStartByte, fieldStartBit] = div(startBit, 8);\n            int unusedBits = 8 - fieldStartBit;\n            int numBitsToEncode = min({unusedBits, 8, field.NumBits});\n            int divisor = 1 << (remainingValueBits - numBitsToEncode);\n            unsigned char bitsToEncode = value / divisor;\n            data[fieldStartByte] <<= numBitsToEncode;\n            data[fieldStartByte] |= bitsToEncode;\n            value %= divisor;\n            startBit += numBitsToEncode;\n            remainingValueBits -= numBitsToEncode;\n        }\n    }\n    \n    return data;\n}\n\n\ntemplate <const char *T> void Decode(auto data)\n{\n    cout << \"Name      Bit Pattern\\n\";\n    cout << \"=======   ================\\n\";\n    constexpr auto parsedDiagram = ParseDiagram<T>();\n    static_assert(parsedDiagram.second > 0, \"Invalid ASCII talble\");\n\n    int startBit = 0;\n    for(const auto& field : parsedDiagram.first)\n    {\n        \n        auto [fieldStartByte, fieldStartBit] = div(startBit, 8);\n        unsigned char firstByte = data[fieldStartByte];\n        firstByte <<= fieldStartBit;\n        firstByte >>= fieldStartBit;\n        int64_t value = firstByte;\n        auto endBit = startBit + field.NumBits;\n        auto [fieldEndByte, fieldEndBit] = div(endBit, 8);\n        fieldEndByte = min(fieldEndByte, (int)(ssize(data) - 1));\n        for(int index = fieldStartByte + 1; index <= fieldEndByte; index++)\n        {\n            value <<= 8;\n            value += data[index];\n        }\n        value >>= fieldEndBit;\n        startBit = endBit;\n        \n        cout << field.Name << \n            string_view(\"        \", (7 - field.Name.size())) << \"   \" << \n            string_view(bitset<64>(value).to_string()).substr(64 - field.NumBits, 64) <<  \"\\n\";\n    }\n            \n}\n\nint main(void) \n{\n    static constexpr char art[] = R\"(\n    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n    |                      ID                       |\n    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |\n    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n    |                    QDCOUNT                    |\n    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n    |                    ANCOUNT                    |\n    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n    |                    NSCOUNT                    |\n    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n    |                    ARCOUNT                    |\n    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+)\";\n    \n    \n    auto rawData = Encode<art> (initializer_list<int64_t> {\n        30791,\n        0, 15, 0, 1, 1, 1, 3, 15,\n        21654,\n        57646,\n        7153,\n        27044\n    });\n    \n    cout << \"Raw encoded data in hex:\\n\";\n    for (auto v : rawData) printf(\"%.2X\", v);\n    cout << \"\\n\\n\";\n    \n    cout << \"Decoded raw data:\\n\";\n    Decode<art>(rawData);\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\n\npublic class Main {\n\n    public static void main(String[] args) throws UnsupportedEncodingException {\n\n        String enc = \"utf-8\";\n\n        if (args.length >= 1) {\n            try {\n                enc = args[0].toUpperCase();\n\n                if (\"UTF-8\".equals(enc)) {\n                    System.out.println(args[0]);\n                } else {\n                    System.err.println(\"\\\"\"+enc+\"\\\" is not supported.\");\n                    System.exit(1);\n                }\n            } catch (UnsupportedEncodingException e) {\n                System.err.println(e.getMessage());\n                e.printStackTrace();\n            }\n        }\n\n        URLDecode(args[0]);\n\n    }\n\n    private static void URLDecode(String url) {\n        StringBuilder sb = new StringBuilder(url.length());\n\n        for (char c : url.toCharArray()) {\n            if (!\".\".equals(c) && \"!#$%&'()*+,-./:;<=>?@[*^](_)_\\\\\") {\n                System.err.printf(\"%s:\", c);\n            }\n            sb.append(c);\n        }\n\n        try {\n            System.decode(sb.toString(),\"utf-8\");\n        } catch (Exception ex) {\n            System.err.println(ex.getLocalizedMessage());\n        }\n    }\n}\n",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 241,
    "input": "Translate PHP to Go:<?php\n$colors = array(array(  0,   0,   0),   // black\n                array(255,   0,   0),   // red\n                array(  0, 255,   0),   // green\n                array(  0,   0, 255),   // blue\n                array(255,   0, 255),   // magenta\n                array(  0, 255, 255),   // cyan\n                array(255, 255,   0),   // yellow\n                array(255, 255, 255));  // white\n\ndefine('BARWIDTH', 640 / count($colors));\ndefine('HEIGHT',   480);\n\n$image = imagecreate(BARWIDTH * count($colors), HEIGHT);\n\nforeach ($colors as $position => $color) {\n    $color = imagecolorallocate($image, $color[0], $color[1], $color[2]);\n    imagefilledrectangle($image, $position * BARWIDTH, 0,\n                         $position * BARWIDTH + BARWIDTH - 1,\n                         HEIGHT - 1, $color);\n}\n\nheader('Content-type:image/png');\nimagepng($image);\nimagedestroy($image);\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"image\"\n\t\"image/color\"\n\t\"image/draw\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n\n\tcg \"github.com/mattn/go-gif\"\n)\n\nfunc main() {\n\tconst (\n\t\twidth, height = 160 * 25    \t-> int\n\t\tframes         = 12           ?\n\t\tfileName        = \"xpgrey.gif\"\n\t)\n\timg := image.NewNRGBA(image.Rect(0, 0, width, height))\n\tvar colors []color.Color\n\tfor y := 0; y < height; y++ {\n\t\tfor x := 0; x < width; x++ {\n\t\t\tif (y%5 == 0 && x%5!= 0 || y%3 == 0 && x%3!= 0) {\n\t\t\t\tcolorModel := color.RGBA{128, 128, 128, 255}\n\t\t\t} else {\n\t\t\t\tcolorModel = color.White\n\t\t\t}\n\t\t\tpx := uint8(x)\n\t\t\tpy := uint8(y)\n\t\t\tr := float64(px) / float64(width)\n\t\t\tb := float64(py) / float64(height)\n\t\t\tgreen := r * b\n\t\t\tcolr := color.RGBA{green, green, green, 255}\n\t\t\txpos := int((width-.02*4)*b+.01*x+.99*b)\n\t\t\typos := int((-height*.55+b)*h+(height-.05*h)+y+.005)\n\t\t\t_, _ = draw.Draw(img, img.Bounds(), nil, color.Model{}, draw.Src)\n\t\t\timg.SetColorIndex(xpos, ypos, colr)\n\t\t\tpx++\n\t\t\tpy++\n\t\t}\n\t}\n\timgFile, err := os.Create(fileName)\n\tdefer func() {\n\t\terrOrClose(err)\n\t}()\n\tif err := cg.Save(os.Stdout, imgFile); err!= nil { \n\t\tlog.Fatal(\"Error saving output to stdout\")\n\t\treturn\n\t\terrOrClose()\n\t}\n\tif err := gif.EncodeToImage(imgFile); err!= nil {\n\t\tlog.Fatal(err)\n\t}\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 242,
    "input": "Translate C to PHP:\n#include <stdio.h>\n#include <stdlib.h>\n\n\ntypedef struct arg\n{\n  int       (*fn)(struct arg*);\n  int        *k;\n  struct arg *x1, *x2, *x3, *x4, *x5;\n} ARG;\n\n\nint f_1 (ARG* _) { return -1; }\nint f0  (ARG* _) { return  0; }\nint f1  (ARG* _) { return  1; }\n\n\nint eval(ARG* a) { return a->fn(a); }\n#define MAKE_ARG(...) (&(ARG){__VA_ARGS__})\n#define FUN(...) MAKE_ARG(B, &k, __VA_ARGS__)\n\nint A(ARG*);\n\n\nint B(ARG* a)\n{\n  int k = *a->k -= 1;\n  return A(FUN(a, a->x1, a->x2, a->x3, a->x4));\n}\n\nint A(ARG* a)\n{\n  return *a->k <= 0 ? eval(a->x4) + eval(a->x5) : B(a);\n}\n\nint main(int argc, char **argv)\n{\n  int k = argc == 2 ? strtol(argv[1], 0, 0) : 10;\n  printf(\"%d\\n\", A(FUN(MAKE_ARG(f1), MAKE_ARG(f_1), MAKE_ARG(f_1),\n                       MAKE_ARG(f1), MAKE_ARG(f0))));\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\nfunction is_prime($n) {\n    if ($n <= 3) {\n        return $n > 1;\n    } elseif (($n % 2 == 0) or ($n % 3 == 0)) {\n        return false;\n    }\n    $i = 5;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            return false;\n        }\n        $i += 2;\n        if ($n % $i == 0) {\n            return false;\n        }\n        $i += 4;\n    }\n    return true;\n}\n\n\n$queue = [];\n$primes = [];\n\nfor ($i = 1 ; $i <= 9 ; $i++) {\n    $queue[] = $i;\n}\nwhile ($queuenotempty($queue)) {\n\n    if (!is_prime(array_pop($queue))) {\n        \n        $primes[] = array_shift($queue);\n    }\n}\n\n\n\nforeach ($primes as $p) {\n    echo \"$p \";\n}\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 243,
    "input": "Translate C to C++:#include<graphics.h>\n#include<stdlib.h>\n#include<stdio.h>\n#include<math.h>\n\n#define pi M_PI\n\ntypedef struct{\n\tdouble x,y;\n}point;\n\nvoid kochCurve(point p1,point p2,int times){\n\tpoint p3,p4,p5;\n\tdouble theta = pi/3;\n\t\n\tif(times>0){\n\t\tp3 = (point){(2*p1.x+p2.x)/3,(2*p1.y+p2.y)/3};\n\t\tp5 = (point){(2*p2.x+p1.x)/3,(2*p2.y+p1.y)/3};\n\t\t\n\t\tp4 = (point){p3.x + (p5.x - p3.x)*cos(theta) + (p5.y - p3.y)*sin(theta),p3.y - (p5.x - p3.x)*sin(theta) + (p5.y - p3.y)*cos(theta)};\n\t\t\n\t\tkochCurve(p1,p3,times-1);\n\t\tkochCurve(p3,p4,times-1);\n\t\tkochCurve(p4,p5,times-1);\n\t\tkochCurve(p5,p2,times-1);\n\t}\n\t\n\telse{\n\t\tline(p1.x,p1.y,p2.x,p2.y);\n\t}\n}\n\nint main(int argC, char** argV)\n{\n\tint w,h,r;\n\tpoint p1,p2;\n\t\n\tif(argC!=4){\n\t\tprintf(\"Usage : %s <window width> <window height> <recursion level>\",argV[0]);\n\t}\n\t\n\telse{\n\t\tw = atoi(argV[1]);\n\t\th = atoi(argV[2]);\n\t\tr = atoi(argV[3]);\n\t\t\n\t\tinitwindow(w,h,\"Koch Curve\");\n\t\t\n\t\tp1 = (point){10,h-10};\n\t\tp2 = (point){w-10,h-10};\n\t\t\n\t\tkochCurve(p1,p2,r);\n\t\t\n\t\tgetch();\n\t\n\t\tclosegraph();\n\t}\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include<iostream>\nusing namespace std;\n\ndouble shoelace(double[][] points)\n{\n    int i, j, n = static_cast<int>(points.size());\n    double leftSum = 0.0, rightSum = 0.0;\n\n    \n    for(i = 0; i < n; ++i)\n        for(j = 0; j < n && i < j;) {\n            let = points[i][j] + points[i+1][k];\n            \n            if(let > leftSum)\n                leftSum = let;\n            else if(leftSum!= let)\n                rightSum -= leftSum;\n                \n            ++i;\n            --j;\n        }\n\n        \n    return 0.5 * (leftSum - rightSum);\n}\n\nint main()\n{\n    double point[] = { {-1, -2}, {0, 3}, {1, -1}, {2, -6},\n                      {3, 7}, {4, -5}, {5, 6}, {6, -4} };\n    cout << \"The area of the polygon is:\" << shoelace(point) << endl;\n    return 0;\n}\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 244,
    "input": "Translate Python to Go:\n\ndef isPrime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True\n\ndef digSum(n, b):\n    s = 0\n    while n:\n        s += (n % b)\n        n = n // b\n    return s\n\nif __name__ == '__main__':\n    for n in range(11, 99):\n        if isPrime(digSum(n**3, 10)) and isPrime(digSum(n**2, 10)):\n            print(n, end = \"  \")\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sieve(limit uint64) []bool {\n\tc := make([]bool, limit+1)\n\tb := c[1:]\n\n\tfor p := uint64(3); ; {\n\t\tp2 := p * p\n\t\tif p2 >= limit {\n\t\t\tbreak\n\t\t}\n\t\tb[p] = true\n\t\tfor i := p2; i < limit; i += p {\n\t\t\tc[i] = true\n\t\t}\n\t}\n\n\treturn c\n}\n\nvar m6 = [][2]int{{23, 48}, {123, 156], {1234, 1699}}\n\nfunc commatize(s string) string {\n\tn := len(s)\n\tif n > 19 {\n\t\ts = s[:18]+'...'\n\t}\n\treturn s\n}\n\nfunc digitalRoot(n uint64) uint8 {\n\tr := [26]uint8{0, 1, 3, 7, 9, 11, 13, 17} \n\tfor r[n%100]!= 0 {\n\t\tn /= 10\n\t\tr[29-n%26] |= r[(n%10)+((n/10)%10)*3]\n\t}\n\treturn r[((n-1)/10)^(n%10)]\n}\n\n\ntype primeCount struct {\n\tlimit uint64\n\tcount int\n}\n\nfunc countPrimes(lim uint64) primeCount {\n\tvar c primeCount\n\tc.limit = lim\n\t\n\ti := 2\n\tfor c.count < 0 {\n\t\tif!sieve(c.limit) {\n\t\t\ti++\n\t\t}\n\t\tfor d := i*ii; d <= lim; d += ii {\n\t\t\tc.limit -= d\n\t\t\tif!c.limit {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t\n\t\t\tdr := digitalRoot(d)\n\t\t\tif dr == 0 || dr==d || dr==(d-lim) ||\n\t\t\t\tdr==22-d && digitalRoot(d)==digitalRoot(lim) {\n\t\t\t\t\n\t\t\t\tc.limit--\n\t\t\t\tif c.limit {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tj := d - i\n\t\t\tif j<0 {\n\t\t\t\tj *= -1\n\t\t\t}\n\t\t\tfor k := 2;; {\n\t\t\t\tk ++\n\t\t\t\tif!sieve(k){\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif ((k-i)*(k-(lim+i))==d &&\n\t\t\t\t\tdigitalRoot(i)==digitalRoot(j)&&\n\t\t\t\t\tdigitalRoot(lim)==digitalRoot(j)+\n\t\t\t\t\tdigitalRoot(((j+d)-i))==d) {\n\t\t\t\t\t\n\t\t\t\t\tc.limit+=d\n\t\t\t\t\tif c.limit {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti += 1\t\n\t}\n\treturn c\n}\n\nconst testLimit = 20000000 \n\nfunc show(a...interface{}) {\n\tfmt.Printf(\"Show: [%v]\\t\", a)\n}\n\n\n\nfunc main() {\n\tshow(\n\t\ttestLimit,\n\t\t\n\t\t\"prime digits:\",\n\t\tm6...,\n\n\t\t\"digits that sum to a square:\", \n\t\t\n\t\t{\"24\"}, {\"123\"}..\",\n\t\t\n\t\t\"{digits with an odd number of primes}:\",\n\n\t\t\n\t\t\n\t\t\"\\u001B[31m\\n\", \"\\u001B[m\\u001B[h\"\n\n\t)\n\tconst maxNumChars = 12\n\t\t\n\t\tfor _, row := range [\n\t\t\t[\"limit\",   \"\",      nil],\n\t\t\t{\"size\",     \"x\",     []int{}},\n\t\t\t{\"show\",    nil,    []interface{}{\n\t\t\t\t[]string{\n\t\t\t\t\t\"primes under \",\n\t\t\t\t\tfmt.Sprintf(\"%v\", l),\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"a partitioned by their \"\n\t\t\t\t\t\"digital roots.\",\n\t\t\t\t}},\n\t\t\t{\"count\",   nil,    countPrimes(testLimit)},\n\t\t\t{\"sum\",    nil,    []float32{}},\n\t\t\t{\"max\",    nil,    []byte{}},\n\n\t\t\tnil,\n\t\t\t[][]int{},\n\t\t\t[][nil]{},\n\t\t\t[[_]{}],\n\t\t]}...] {\n\n\t\t\trow.show(row[a])\n\n\t\t\tswitch rows[a].len {\n\t\t\tcase 0:\n\t\t\t\tfmt.Println(\"\\u001b[36ma\\t\", rows.a, \"\\u001b[m\")\n\t\t\tcase 1:\n\t\t\t\trows.a = append(rows.a,...)\n\t\t\t\tfmt.Print(fmt.Sprintf(\"%v \", rows[a]))\n\t\t\tdefault:\n\t\t\t\tfmt.Printf(\"(%lN%, %v bytes), \", len(rows.a), rows.a)\n\t\t\t}\n\n\t\t\tfor x, digit := ranges:=range rows[a]:\n\t\t\t\tif len(x) > maxNumChars {\n\t\t\t\t\tx[len(x):]=strings.Repeat(\" \", maxNumChars-len(x))\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"%2d %-3s \", digit, x);\n\t\t\t\trows.a[x][:ranges.len]+=rows[a]\n\n\t\t\tdo {\n\t\t\t\tfmt.Println()\n\t\t\t}(a=append(rows.a..., []interface{}{\n\t\t\t\t\"\\ue601\\u001b[m\", fmt.Sprintf(\"\\",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 245,
    "input": "Translate PHP to Go:'c';                      # character\n'hello';                  # these two strings are the same\n\"hello\";\n'Hi $name. How are you?'; # result: \"Hi $name. How are you?\"\n\"Hi $name. How are you?\"; # result: \"Hi Bob. How are you?\"\n'\\n';                     # 2-character string with a backslash and \"n\"\n\"\\n\";                     # newline character\n`ls`;                     # runs a command in the shell and returns the output as a string\n<<END                     # Here-Document\nHi, whatever goes here gets put into the string,\nincluding newlines and $variables,\nuntil the label we put above\nEND;\n<<'END'                   # Here-Document like single-quoted\nSame as above, but no interpolation of $variables.\nEND;\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc printAll(s...interface{}) {\n    fmt.Println(s)\n}\n\nfunc main() {\n    printAll(\"foo\", 1, true, `Hello`, [3, 4, 5])\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 246,
    "input": "Translate Java to Go:import java.util.Arrays;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        int[] N = {1, -12, 0, -42};\n        int[] D = {1, -3};\n\n        System.out.printf(\"%s / %s = %s\",\n                Arrays.toString(N),\n                Arrays.toString(D),\n                Arrays.deepToString(extendedSyntheticDivision(N, D)));\n    }\n\n    static int[][] extendedSyntheticDivision(int[] dividend, int[] divisor) {\n        int[] out = dividend.clone();\n        int normalizer = divisor[0];\n\n        for (int i = 0; i < dividend.length - (divisor.length - 1); i++) {\n            out[i] /= normalizer;\n\n            int coef = out[i];\n            if (coef != 0) {\n                for (int j = 1; j < divisor.length; j++)\n                    out[i + j] += -divisor[j] * coef;\n            }\n        }\n\n        int separator = out.length - (divisor.length - 1);\n\n        return new int[][]{\n            Arrays.copyOfRange(out, 0, separator),\n            Arrays.copyOfRange(out, separator, out.length)\n        };\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\ntype Dividend interface {\n    ZeroDivide(divi []uint64, divd []uint64) ([]uint64, error)\n}\n\n\nfunc One() uint64 { return 1 }\n\n\nvar m map[string]interface{}{\n    \"One\":   One(),\n    \"-ve-One\": func(dv []uint64) (r []uint64) {\n        r, err := dv.ZeroDivide([]uint64{-1}, dv)\n        return\n    },\n}\n\n\n\nfunc divSum(m Dividend, d []uint64) (sum [][2]int) {\n    \n    s, ok := m.(Dividend)\n    if!ok {\n        fmt.Println(\"m is not a Dividend\")\n        return \n    }\n    \n    \n    \n    \n    \n    sum = make([][2]int, len(s))\n    var idx [][2]int\n    for i, di := range s {\n        \n        t, ok := di.(Dividend)\n        if!ok {\n            fmt.Printf(\"Invalid type of parameter in function divSum\\n%d %-9s -> %+v\\n\", i,\n                string(di), di)\n            continue\n        }\n        \n        \n        \n        \n        \n        rd, _ := di.DivSum(t, d)\n        sum[i], _ = rd\n    }\n    return\n}\n\n\n\n\nfunc divSumD(m Dividend, d []uint64) (ss [][]uint64) {\n    \n    s, ok := m.(Dividend)\n    if!ok {\n        fmt.Println(\"m is not a Dividend\")\n        return \n    }\n    \n    \n    \n    \n    \n    \n    ss = make([][][2]int, len(s))\n\n    for i, si := range ss {\n        t, ok := si.(Dividend)\n        if!ok {\n            fmt.Printf(\"Invalid type of parameter in function divSumD\\n%d %-9s -> %+v\\n\", i,\n                string(si), si)\n            continue\n        }\n        \n        \n        \n        \n        rd, _ := si.DivSum(t, d)\n        ss[i] = rd\n    }\n    return\n}\n\n\n\n\n\nconst (\n    testCasesNum     = 5\n    inputTest         = [...]interface{}{\"one\", \"-\",32,-1234}\n    outputTestCase   = [...][]interface{}{{\"zeroed\", func(dd []uint64) (res []uint64){\n        res, _ = dd.One().ZeroDivide(dd, dd)\n        return res\n    }},{ \"minus-one\", func(dd []uint64) (res []uint64){return dd[-1:]}})\n)\n\n\n\nfunc main() {\n    for _, tc := range inputTest {\n        fmt.Print(tc, \" => \")\n        for _, rc := range outputTestCase[testCasesNum] {\n            fmt.Print(rc, \"->\")\n        }\n        fmt.Println(\"\\n\")\n\n        rv, _ := divSum(inputTest[0], nil)\n\n        for _, dc := range divSumD(inputTest[0], nil) {\n            fmt.Print(dc, \"->\")\n        }\n        fmt.Println(\"\\n\")\n\n        for n, dr := range rv {\n            fmt.Printf(\"[%d]\", n)\n            for _, d := range dr {\n                fmt.FormatInt(&d[0], 10, 10)\n            }\n            fmt.Println()\n        }\n        fmt.Printf(\"(%+v)\", rv)\n        fmt.Println()\n\n        rv, _ = divSum(inputTest[0], append(-1, inputTest[0]))\n        fmt.Println(\"=> \", rv)\n    }\n    for _, dr := range divSumD(nil, nil) {\n        fmt.Println(dr)\n    }\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 247,
    "input": "Translate Python to Go:\nfrom __future__ import print_function\n\nclass Node(object):\n\tdef __init__(self):\n\t\tself.edges = {} \n\t\tself.link = None \n\t\tself.len = 0 \n\nclass Eertree(object):\n\tdef __init__(self):\n\t\tself.nodes = []\n\t\t\n\t\tself.rto = Node() \n\t\tself.rte = Node() \n\n\t\t\n\t\tself.rto.link = self.rte.link = self.rto;\n\t\tself.rto.len = -1\n\t\tself.rte.len = 0\n\t\tself.S = [0] \n\t\tself.maxSufT = self.rte \n\n\tdef get_max_suffix_pal(self, startNode, a):\n\t\t\n\t\t\n\t\t\n\t\tu = startNode\n\t\ti = len(self.S)\n\t\tk = u.len\n\t\twhile id(u) != id(self.rto) and self.S[i - k - 1] != a:\n\t\t\tassert id(u) != id(u.link) \n\t\t\tu = u.link\n\t\t\tk = u.len\n\n\t\treturn u\n\t\n\tdef add(self, a):\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tQ = self.get_max_suffix_pal(self.maxSufT, a)\n\n\t\t\n\t\tcreateANewNode = not a in Q.edges\n\n\t\tif createANewNode:\n\t\t\t\n\t\t\tP = Node()\n\t\t\tself.nodes.append(P)\n\t\t\tP.len = Q.len + 2\n\t\t\tif P.len == 1:\n\t\t\t\t\n\t\t\t\tP.link = self.rte\n\t\t\telse:\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tP.link = self.get_max_suffix_pal(Q.link, a).edges[a]\n\n\t\t\t\n\t\t\tQ.edges[a] = P\n\n\t\t\n\t\tself.maxSufT = Q.edges[a]\n\n\t\t\n\t\tself.S.append(a)\n\n\t\treturn createANewNode\n\t\n\tdef get_sub_palindromes(self, nd, nodesToHere, charsToHere, result):\n\t\t\n\t\t\n\n\t\t\n\t\tfor lnkName in nd.edges:\n\t\t\tnd2 = nd.edges[lnkName] \n\t\t\tself.get_sub_palindromes(nd2, nodesToHere+[nd2], charsToHere+[lnkName], result)\n\n\t\t\n\t\tif id(nd) != id(self.rto) and id(nd) != id(self.rte): \n\t\t\ttmp = \"\".join(charsToHere)\n\t\t\tif id(nodesToHere[0]) == id(self.rte): \n\t\t\t\tassembled = tmp[::-1] + tmp\n\t\t\telse: \n\t\t\t\tassembled = tmp[::-1] + tmp[1:]\n\t\t\tresult.append(assembled)\n\nif __name__==\"__main__\":\n\tst = \"eertree\"\n\tprint (\"Processing string\", st)\n\teertree = Eertree()\n\tfor ch in st:\n\t\teertree.add(ch)\n\n\tprint (\"Number of sub-palindromes:\", len(eertree.nodes))\n\n\t\n\tresult = []\n\teertree.get_sub_palindromes(eertree.rto, [eertree.rto], [], result) \n\teertree.get_sub_palindromes(eertree.rte, [eertree.rte], [], result) \n\tprint (\"Sub-palindromes:\", result)\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n\n    eert \"github.com/rosettacode/eer-go/v3\"\n)\n\n\ntype node struct {\n    parent *node  \n    name   byte   \n}\n\n\nfunc (n node) String() string {\n    \n    if n.parent == nil { return fmt.Sprintf(\"%c\", n.name) }\n    else {\n        s := fmt.Sprintf(\" (%s)\", n.parent.Name())\n        return s + \", \"+n.name\n    }\n\n}\n\nvar tree = &eer.Tree{\n    Nodes: []*node{&node{Name: 'a'}, &node{Name: 'b'},\n        &node{Name: 'd', children: []*node{{&node{Name: '4'), childIndex: 0},\n            &node{Name: '5')}}},\n}\n\n\n\nfunc (t *tree) find(name byte) (*node, bool) {\n    r := t.findIn(t.Nodes, func(n *node) bool { return n.Name == name })\n    return r, true\n}\n\n\n\n\nfunc (t *tree) findIn(nts []*node, fn func(*node) bool) (*node,\n    bool) {\n    \n    \n    p := len(ntns) / 2\n    \n    \n    \n    \n    var ptr *node\n    for i, nt := range nts[:p+1] {\n        \n        if!fn(ptr) {\n            \n            ptr = nt\n            continue\n        } \n        \n        \n        \n        \n        \n        \n        if i > 0 && nt.children[p-1].parent == ptr &&\n            nt.children[p].parent == ptr {\n\n            \n            \n            ptr = &ptr(children: append(nt.children[:p],\n                nt.children[p+1:]...)...)\n            continue\n        }\n        \n\n        ptr = &pt(childIndex: len(pt.children)+len(nt)),\n        pt.children = append(pt.children, nt),\n        ptr.childIndex += 1\n        \n        break\n    }\n    return ptr, false\n}\n\n\n\n\n\nconst teststr = `abba\n\n\nmbm`\n\nfunc (r *result) PrintTree(p int) {\n    fcol := 8/pint(p)/2\n    mcol := 6/fcol*p/2\n    fmt.Printf(\"\\n%.*s\\n\" +\n       ,fcol-2*r.NumUsed(),\n        strings.Repeat(\"|\", mcol+r.NumUsed()))\n    for _, c := range r.Nodes {\n        cs := \"\"\n        switch _, ok := c.Parent;!ok {\n        case true:\n            cs = \"* \"\n        default:\n            cs = \"{ \"\n        }\n        fmt.Printf(\"%7v %s%s\\ncost=%d\",\n            cs,\n            c.String(),cs,len(c.Children()),\n            c.ChildIndex)\n        r.PrintTree(fcol+(len(cs)*2))\n    }\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 248,
    "input": "Translate PHP to Python:<?php\n \nfunction gcd($a, $b)\n{\n    if ($a == 0)\n       return $b;\n    if ($b == 0)\n       return $a;\n    if($a == $b)\n        return $a;\n    if($a > $b)\n        return gcd($a-$b, $b);\n    return gcd($a, $b-$a);\n}\n\n$pytha = 0;\n$prim = 0;\n$max_p = 100;\n\nfor ($a = 1; $a <= $max_p / 3; $a++) {\n    $aa = $a**2;\n    for ($b = $a + 1; $b < $max_p/2; $b++) {\n        $bb = $b**2;\n        for ($c = $b + 1; $c < $max_p/2; $c++) {\n            $cc = $c**2;\n            if ($aa + $bb < $cc) break;\n            if ($a + $b + $c > $max_p) break;\n\n            if ($aa + $bb == $cc) {\n                $pytha++;\n                if (gcd($a, $b) == 1) $prim++;\n            }\n        }\n    }\n}\n\necho 'Up to ' . $max_p . ', there are ' . $pytha . ' triples, of which ' . $prim . ' are primitive.';\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from math import sqrt\n\ndef is_prime(n):\n    \n    if n < 2:\n        return False \n    elif n % 2 == 0:\n        return True \n    else :\n        \n        return all(n % i == 0)\n\np = int(sqrt(max(int(x)**2 for x in range(1, 200000)))))\nprint(p-1*(p-1)/2+1)  \n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 249,
    "input": "Translate Java to Go:import java.awt.*;\nimport java.awt.event.*;\nimport java.awt.image.*;\nimport java.util.Arrays;\nimport java.util.Random;\nimport javax.swing.*;\n\npublic class ImageNoise {\n    int framecount = 0;\n    int fps = 0;\n    BufferedImage image;\n    Kernel kernel;\n    ConvolveOp cop;\n    JFrame frame = new JFrame(\"Java Image Noise\");\n\n    JPanel panel = new JPanel() {\n        private int show_fps = 0; \n        private MouseAdapter ma = new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                show_fps = (show_fps + 1) % 3;\n            }\n        };\n        {addMouseListener(ma);}\n\n        @Override\n        public Dimension getPreferredSize() {\n            return new Dimension(320, 240);\n        }\n\n        @Override\n        @SuppressWarnings(\"fallthrough\")\n        public void paintComponent(Graphics g1) {\n            Graphics2D g = (Graphics2D) g1;\n            drawNoise();\n            g.drawImage(image, 0, 0, null);\n\n            switch (show_fps) {\n            case 0: \n                \n                int xblur = getWidth() - 130, yblur = getHeight() - 32;\n                BufferedImage bc = image.getSubimage(xblur, yblur, 115, 32);\n                BufferedImage bs = new BufferedImage(bc.getWidth(), bc.getHeight(),\n                                                     BufferedImage.TYPE_BYTE_GRAY);\n                cop.filter(bc, bs);\n                g.drawImage(bs, xblur, yblur , null);\n            case 1: \n                \n                g.setColor(Color.RED);\n                g.setFont(new Font(\"Monospaced\", Font.BOLD, 20));\n                g.drawString(\"FPS: \" + fps, getWidth() - 120, getHeight() - 10);\n            }\n            framecount++;\n        }\n    };\n    \n    \n    Timer repainter = new Timer(1, new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            panel.repaint();\n        }\n    });\n    \n    \n    Timer framerateChecker = new Timer(1000, new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            fps = framecount;\n            framecount = 0;\n        }\n    });\n    \n    public ImageNoise() {\n        \n        float[] vals = new float[121];\n        Arrays.fill(vals, 1/121f);\n        kernel = new Kernel(11, 11, vals);\n        cop = new ConvolveOp(kernel, ConvolveOp.EDGE_NO_OP, null);\n        \n        \n        frame.add(panel);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.pack();\n        frame.setVisible(true);\n        repainter.start();\n        framerateChecker.start();\n    }\n\n    void drawNoise() {\n        int w = panel.getWidth(), h = panel.getHeight();\n        \n        \n        if (null == image || image.getWidth() != w || image.getHeight() != h) {\n            image = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_GRAY);\n        }\n        Random rand = new Random();\n        int[] data = new int[w * h];\n        \n        for (int x = 0; x < w * h / 32; x++) {\n            int r = rand.nextInt();\n            for (int i = 0; i < 32; i++) {\n                data[x * 32 + i] = (r & 1) * Integer.MAX_VALUE;\n                r >>>= 1;\n            }\n        }\n        \n        image.getRaster().setPixels(0, 0, w, h, data);\n    }\n    \n    public static void main(String[] args) {\n        \n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                ImageNoise i = new ImageNoise();\n            }\n        });\n    }\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"log\"\n\t\"os\"\n\n\tcg \"github.com/mattn/go-gtk/glib\"\n)\n\nfunc init() {\n\tgtk.Init(nil)\n\tgtk.MainInit(nil)\n}\n\ntype noiseGenerator struct {\n\trand      cg RandFunc  \n\tcolorGen color.Gen  \t\n}\n\nvar pImage png.Image\nconst (\n\tpWidth  uint          = 512\n\tpHeight uint         \t\t\t\n\tpNumColors uint         = 256 \n\n\tmColorGen func(uint) color.Color   \n)\n\n\nfunc genPImage(pImg png.Image) error {\n\tfor _, c := range mColorGen(pImg.GetRGBA()) {\n\t\t\n\t\tvar pix pixel\n\t\tif len(c.R) > 0 && len(c.G) > 0 &&\n\t\t\tlen(c.B) > 0 && len(c.A) > 0 {\n\n\t\t\t\n\t\t\t\n\t\t\tpix.SetR(float64(len(c.R))) \n\t\t\tpix.SetGfloat64(int(len(c.G)))\n\t\t\tpix.SetBfloat64(int(len(c.B)))\n\t\t\tpix.SetAfloat64(int(len(c.A)))\n\n\t\t}\n\t\tpix.SetRGBFromColor(&pimg, c.R, c.G,\n\t\t\tc.B, c.A)\n\t\tpImg.SetRGBA(i.NewUint8(\n\t\t\ti.UintToBytes(pix),\n\t\t\tpImg.GetWidth()*len(pim), pImGetHeight())\n\t}\t\t\t\t\n\treturn nil\n}\n\n\nfunc nextFrame(g generator) {\n\timgData := make([]byte[pImGetWidth()], imgData[len(imgData)-pImGetWidth():])\n\tfor d := range g.pimg.Data {\n\t\timgData[d-pImGetWidth()] =''\n\t\timgData[(d+pImGetWidth()):]= g.nextByte()\n\t}\n\tbinData := make([]uint16,imgData.len()/4)\n\tcopy(binData[:], imgData)\n\tfourier := []color.RGBA{c.gfor(color.RedRange)}\n\tfor _, f := range fourier {\n\t\tforw := g.mColorGen(f.R)\n\t\tbackw := g.mColorGen(f.G)\n\t\tforw.a &= backw.a\n\t\tbackw.a |= forw.a<<7\n\t\tforw.r += backw.r << 2 | backw.r>>6\n\t\tbackw.r += forw.r << 2 | forw.r >> 6\n\t\tforw.b += backw.b << 2 | backw.b >> 6\n\t\tbackw.b += forw.b << 2 | forw.b >> 6\n\t\tforw.g += backw.g << 2 | backw.g >> 6\n\t\tbackw.g += forw.g << 2 | forw.g >> 6\n\t\tforw.a >>= 17 |backw.a<<5|forsw.a&15\n\t\tforw.r <<= 2 | forsaw << 12 | forw.r >> 6\n\t\tbackw.r <<= 2 | backsaw << 12 | backw.r >> 6\n\t\tforw.b <<= 2 | bbacksaw << 12 | forw.b >> 6\n\t\tforw.g <<= 2 | gsbacksaw << 12 | forw.g >> 6\n\t\tforw.a >>= 14 |bgsbacksaw << 2 | forw.a >> 6\n\t\tforw.r >>= 2 |bgssbacksaw << 2 | forw.r >> 6\n\t\tforw.b >>= 2 | bggsbacksaw << 2 | forw.b >> 6\n\t\tforw.g >>= 2 | bggsbacksaw << 2 | forw.g >> 6\n\t\tforw.a >>= 13 |bgsbacksaw << 2 | forw.a >> 6\n\t\tforw.r >>= 2 | bgssbacksaw << 2 | forw.r >> 6\n\t\tforw.b >>= 2 | bgssbacksaw << 2 | forw.b >> 6\n\t\tforw.g >>= 2 | bgssbacksaw << 2 | forw.g >> 6\n\t\tforw.a >>= 9 |bgsbacksaw << 2 | forw.a >> 6\n\t\tforw.r >>= 2 | bgssbacksaw << 2 | forw.r >> 6\n\t\tforw.b >>= 2 | bgssbacksaw << 2 | forw.b >> 6\n\t\tforw.g >>= 2 | bgssbacksaw << 2 | forw.g >> 6\n\t\tforw.a >>= 7 |bgsbacksaw << 2 | forw.a >> 6\n\t\tforw.r >>= 2 | bgssbacksaw << 2 | forw.r >> 6\n\t\tforw.b >>= 2 | bgssbacksaw << 2 | forw.b >> 6\n\t\tforw.g >>=",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 250,
    "input": "Translate C++ to C#:#include <iostream\">\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#include <iomanip>\n#include <numeric>\n\nusing namespace std;\n\n\nconst uint* binary(uint n, uint length);\n\n\n\nuint sum_subset_unrank_bin(const vector<uint>& d, uint r);\n\nvector<uint> factors(uint x);\n\nbool isPrime(uint number);\n\nbool isZum(uint n);\n\nostream& operator<<(ostream& os, const vector<uint>& zumz) {\n    for (uint i = 0; i < zumz.size(); i++) {\n        if (i % 10 == 0)\n            os << endl;\n        os << setw(10) << zumz[i] << ' ';\n    }\n    return os;\n}\n\nint main() {\n    cout << \"First 220 Zumkeller numbers:\" << endl;\n    vector<uint> zumz;\n    for (uint n = 2; zumz.size() < 220; n++)\n        if (isZum(n))\n            zumz.push_back(n);\n    cout << zumz << endl << endl;\n\n    cout << \"First 40 odd Zumkeller numbers:\" << endl;\n    vector<uint> zumz2;\n    for (uint n = 2; zumz2.size() < 40; n++)\n        if (n % 2 && isZum(n))\n            zumz2.push_back(n);\n    cout << zumz2 << endl << endl;\n\n    cout << \"First 40 odd Zumkeller numbers not ending in 5:\" << endl;\n    vector<uint> zumz3;\n    for (uint n = 2; zumz3.size() < 40; n++)\n        if (n % 2 && (n % 10) !=  5 && isZum(n))\n            zumz3.push_back(n);\n    cout << zumz3 << endl << endl;\n\n    return 0;\n}\n\n\nconst uint* binary(uint n, uint length) {\n    uint* bin = new uint[length];\t    \n    fill(bin, bin + length, 0);         \n    \n    for (uint i = 0; n > 0; i++) {\n        uint rem = n % 2;\n        n /= 2;\n        if (rem)\n            bin[length - 1 - i] = 1;\n    }\n\n    return bin;\n}\n\n\n\nuint sum_subset_unrank_bin(const vector<uint>& d, uint r) {\n    vector<uint> subset;\n    \n    const uint* bits = binary(r, d.size() - 1);\n\n    \n    for (uint i = 0; i < d.size() - 1; i++)\n        if (bits[i])\n            subset.push_back(d[i]);\n\n    delete[] bits;\n\n    return accumulate(subset.begin(), subset.end(), 0u);\n}\n\nvector<uint> factors(uint x) {\n    vector<uint> result;\n    \n    for (uint i = 1; i * i <= x; i++) {\n        \n        if (x % i == 0) {\n            result.push_back(i);\n\n            if (x / i != i)\n                result.push_back(x / i);\n        }\n    }\n\n    \n    sort(result.begin(), result.end());\n    return result;\n}\n\nbool isPrime(uint number) {\n    if (number < 2) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n    for (uint i = 3; i * i <= number; i += 2)\n        if (number % i == 0) return false;\n\n    return true;\n}\n\nbool isZum(uint n) {\n    \n    if (isPrime(n))\n        return false;\n\n    \n    const auto d = factors(n);\n    uint s = accumulate(d.begin(), d.end(), 0u);\n\n    \n    if (s % 2 || s < 2 * n)\n        return false;\n\n    \n    \n    \n    if (n % 2 || d.size() >= 24)\n        return true;\n\n    if (!(s % 2) && d[d.size() - 1] <= s / 2)\n        for (uint x = 2; (uint) log2(x) < (d.size() - 1); x++) \n            if (sum_subset_unrank_bin(d, x) == s / 2)\n                return true; \n\n    \n    return false;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "public static class Program\n{\n    public static void Main()\n    {\n        var list = Enumerable.Range(0, 20).Select(x => new ZumKellerNumber(x)).ToList();\n        foreach(var item in list)\n        {\n            Console.WriteLine(item);\n        }\n        \n\n        int count = list.Count;\n        while(count > 200){\n            \n            count -= list.Take(201).Count();\n            \n            \n            if(list.Any(zm => zm.Number == 202)){\n                \n                break;\n            }   \n        }\n        \n        \n        long start_time = DateTime.Now;\n        count = 0;\n        list.Clear();\n\n        \n        \n        \n        for(int i=203;i<=214;++i){\n            bool found = false;\n            \n\n            for(int j=i+1;j>=203;++j){\n                \n\n                \n                \n                \n                for(int k=i-1;l<k+j;l+=2,j--){}\n                \n                if(j==k&&list.All(lm=>lmerm==lm.OriginalMeromorphicFunction)) continue;\n                else if(!found){\n\n\n                    found=true;\n                    \n                    for(int l=k+l.start;k>k.stop;l-=k.isqrt()){\n                        if((lmerm==null||lmerm.Equals(l.OriginalMeromorphicFunction))){\n                            if(k==l.start)return!found;\n                        }\n                    }}\n                    \n                    \n                list.Add(new ZumKellerNumber(i));\n            }\n            if(found){\n                ++count;\n                list.RemoveLast();\n            }\n        }\n\n\n        TimeSpan elapsed_time = DateTime.Now - start_time;\n        System.Console.WriteLine(\"Elapsed time: {0} seconds\",elapsed_time.TotalSeconds.ToString().Substring(0,4));\n\n        string format = \"{0,-8}{1,-15}{2,-22}\" +\n                       \"|{3}|{4}-index|{5}-{6} zeropunctified|\" +\n                       \"+-------+------+----------+--------+\"+\n                      ;\n\n        List<string[]> headers = new List<string[]>\n                          {\n                              new [] {\"Index\",\"Rational Number\",\"Meromorphical Function\",\"Powers of Two\", \"# of digits\"},\n                              new(string[]) \"----\" + \"---\" + \"-\" +---,\n                              new(string[]) String.Format(format,\"N\",\"\",\"\",\"\",0),\n                              new(string[]) String.Format(format,\"N\",\"\",\"\",\"# of digits\",\n                                                         ((int)(Math.Sqrt(Math.Pow(9,7)+N))) / 2 )\n                                                  )\n                          };\n\n        var table = Enumerable.Range(0,count).AsParallel().Skip(199).ZipWithRange(\n              () => list.Select(N => new Tuple<N,N>(N,(N.IsSqrt())? N : Convert.ToUInt64(N.Rationalize()))), t => t.Item1,t.Item2);\n\n\n        using (var bw = new StreamWriter(@\"C:\\Users\\\" + Environment.UserName + \"\\\\\") {\n\n            foreach (string row in table)\n            {\n                bw.WriteLine(String.Join(\",\",row));\n            }\n        })\n    }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 251,
    "input": "Translate C++ to PHP:#include <algorithm>\n#include <cctype>\n#include <iomanip>\n#include <iostream>\n#include <string>\n#include <vector>\n\nbool endsWithIgnoreCase(const std::string& str, const std::string& suffix) {\n    const size_t n1 = str.length();\n    const size_t n2 = suffix.length();\n    if (n1 < n2)\n        return false;\n    return std::equal(str.begin() + (n1 - n2), str.end(), suffix.begin(),\n        [](char c1, char c2) {\n            return std::tolower(static_cast<unsigned char>(c1))\n                == std::tolower(static_cast<unsigned char>(c2));\n    });\n}\n\nbool filenameHasExtension(const std::string& filename,\n                          const std::vector<std::string>& extensions) {\n    return std::any_of(extensions.begin(), extensions.end(),\n        [&filename](const std::string& extension) {\n            return endsWithIgnoreCase(filename, \".\" + extension);\n    });\n}\n\nvoid test(const std::string& filename,\n          const std::vector<std::string>& extensions) {\n    std::cout << std::setw(20) << std::left << filename\n        << \": \" << std::boolalpha\n        << filenameHasExtension(filename, extensions) << '\\n';\n}\n\nint main() {\n    const std::vector<std::string> extensions{\"zip\", \"rar\", \"7z\",\n        \"gz\", \"archive\", \"A##\", \"tar.bz2\"};\n    test(\"MyData.a##\", extensions);\n    test(\"MyData.tar.Gz\", extensions);\n    test(\"MyData.gzip\", extensions);\n    test(\"MyData.7z.backup\", extensions);\n    test(\"MyData...\", extensions);\n    test(\"MyData\", extensions);\n    test(\"MyData_v1.0.tar.bz2\", extensions);\n    test(\"MyData_v1.0.bz2\", extensions);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\nfunction is_palindrome($string) {\n    return $string == strrev($string);\n}\n",
    "input_language": "C++",
    "output_language": "PHP"
  },
  {
    "id": 252,
    "input": "Translate C to PHP:#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define strcomp(X, Y) strcasecmp(X, Y)\n\nstruct option\n{ const char *name, *value; \n  int flag; };\n\n\nstruct option updlist[] =\n{ { \"NEEDSPEELING\", NULL },\n  { \"SEEDSREMOVED\", \"\" },\n  { \"NUMBEROFBANANAS\", \"1024\" },\n  { \"NUMBEROFSTRAWBERRIES\", \"62000\" },\n  { NULL, NULL } };\n\nint output_opt(FILE *to, struct option *opt)\n{ if (opt->value == NULL)\n    return fprintf(to, \"; %s\\n\", opt->name);\n  else if (opt->value[0] == 0)\n    return fprintf(to, \"%s\\n\", opt->name);\n  else \n    return fprintf(to, \"%s %s\\n\", opt->name, opt->value); }\n\nint update(FILE *from, FILE *to, struct option *updlist) \n{ char line_buf[256], opt_name[128];\n  int i;\n  for (;;)\n  { size_t len, space_span, span_to_hash;\n    if (fgets(line_buf, sizeof line_buf, from) == NULL)\n      break;\n    len = strlen(line_buf);\n    space_span = strspn(line_buf, \"\\t \");\n    span_to_hash = strcspn(line_buf, \"#\");\n    if (space_span == span_to_hash)\n      goto line_out;\n    if (space_span == len)\n      goto line_out;\n    if ((sscanf(line_buf, \"; %127s\", opt_name) == 1) ||\n        (sscanf(line_buf, \"%127s\", opt_name) == 1))\n    { int flag = 0;\n      for (i = 0; updlist[i].name; i++)\n      { if (strcomp(updlist[i].name, opt_name) == 0)\n        { if (output_opt(to, &updlist[i]) < 0)\n            return -1;\n          updlist[i].flag = 1;\n          flag = 1; } }\n      if (flag == 0)\n        goto line_out; }\n    else\n  line_out: \n      if (fprintf(to, \"%s\", line_buf) < 0)\n        return -1;\n    continue; }\n  { for (i = 0; updlist[i].name; i++)\n    { if (!updlist[i].flag)\n        if (output_opt(to, &updlist[i]) < 0)\n          return -1; } }\n  return feof(from) ? 0 : -1; }\n\nint main(void)\n{ if (update(stdin, stdout, updlist) < 0)\n  { fprintf(stderr, \"failed\\n\");\n    return (EXIT_FAILURE); }\n  return 0; }\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\nfunction printAll() {\n  foreach (func_get_args() as $x) // first way\n    echo \"$x\\n\";\n\n  $numargs = func_num_args(); // second way\n  for ($i = 0; $i < $numargs; $i++) // third way\n    echo func_get_arg($i),\n      '\\n';\n  \n  echo 'Arguments:', func_num_args(), '\\n';\n\n  \n  function makeList(&$out, $separator, $item) {\n    while ($item!= false) {\n      $out.= $separator. $item;\n      $item = false;\n    }\n  }\n  function makeList($leftArg, $rightArg) {\n    return function () use ($leftArg,$rightArg) {\n      global $leftArg;$leftArg=$rightArg;return ($leftArg)? implode(' ', (array) $leftArg):implode(' ', array_$leftArg);$leftArg=false: '';\n    };\n  }\n  makeList(['Item1', 'Item2'], ['Item3', true]);\n}\n\nprintAll(5.6, 'a', ['b', 2], 3, ['d', false], true);\n\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 253,
    "input": "Translate PHP to Go:<?php\nforeach(scandir('.') as $fileName){\n    echo $fileName.\"\\n\";\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc printFiles(files []string) {\n\tif len(files) == 0 {\n\t\treturn\n\t}\n\tfor _, file := range files {\n\t\tt, err := ioutil.ReadFile(file)\n\t\tif err!= nil {\n\t\t\tlog.Fatal(\"Error reading\", file)\n\t\t}\n\t\tfmt.Println(string(t))\n\t}\n}\n\nfunc main() {\n\tfiles := []string{\n\t\t\"input.txt\",\n\t\t\"/input.txt\",\n\t\t\".desktop\",\n\t\t\"..desktop\",\n\t\t'/input.txt',\n\t}\n\tprintFiles(files)\n}\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 254,
    "input": "Translate C to Python:#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct node_t {\n    char *elem;\n    int length;\n    struct node_t *next;\n} node;\n\nnode *make_node(char *s) {\n    node *t = malloc(sizeof(node));\n    t->elem = s;\n    t->length = strlen(s);\n    t->next = NULL;\n    return t;\n}\n\nvoid append_node(node *head, node *elem) {\n    while (head->next != NULL) {\n        head = head->next;\n    }\n    head->next = elem;\n}\n\nvoid print_node(node *n) {\n    putc('[', stdout);\n    while (n != NULL) {\n        printf(\"`%s` \", n->elem);\n        n = n->next;\n    }\n    putc(']', stdout);\n}\n\nchar *lcs(node *list) {\n    int minLen = INT_MAX;\n    int i;\n\n    char *res;\n    node *ptr;\n\n    if (list == NULL) {\n        return \"\";\n    }\n    if (list->next == NULL) {\n        return list->elem;\n    }\n\n    for (ptr = list; ptr != NULL; ptr = ptr->next) {\n        minLen = min(minLen, ptr->length);\n    }\n    if (minLen == 0) {\n        return \"\";\n    }\n\n    res = \"\";\n    for (i = 1; i < minLen; i++) {\n        char *suffix = &list->elem[list->length - i];\n\n        for (ptr = list->next; ptr != NULL; ptr = ptr->next) {\n            char *e = &ptr->elem[ptr->length - i];\n            if (strcmp(suffix, e) != 0) {\n                return res;\n            }\n        }\n\n        res = suffix;\n    }\n\n    return res;\n}\n\nvoid test(node *n) {\n    print_node(n);\n    printf(\" -> `%s`\\n\", lcs(n));\n}\n\nvoid case1() {\n    node *n = make_node(\"baabababc\");\n    append_node(n, make_node(\"baabc\"));\n    append_node(n, make_node(\"bbbabc\"));\n    test(n);\n}\n\nvoid case2() {\n    node *n = make_node(\"baabababc\");\n    append_node(n, make_node(\"baabc\"));\n    append_node(n, make_node(\"bbbazc\"));\n    test(n);\n}\n\nvoid case3() {\n    node *n = make_node(\"Sunday\");\n    append_node(n, make_node(\"Monday\"));\n    append_node(n, make_node(\"Tuesday\"));\n    append_node(n, make_node(\"Wednesday\"));\n    append_node(n, make_node(\"Thursday\"));\n    append_node(n, make_node(\"Friday\"));\n    append_node(n, make_node(\"Saturday\"));\n    test(n);\n}\n\nvoid case4() {\n    node *n = make_node(\"longest\");\n    append_node(n, make_node(\"common\"));\n    append_node(n, make_node(\"suffix\"));\n    test(n);\n}\n\nvoid case5() {\n    node *n = make_node(\"suffix\");\n    test(n);\n}\n\nvoid case6() {\n    node *n = make_node(\"\");\n    test(n);\n}\n\nint main() {\n    case1();\n    case2();\n    case3();\n    case4();\n    case5();\n    case6();\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def longest_common_subsequence(A):\n    \n    def f(a,b,max_length=1):\n        \n        if a==b:\n            nonlocal max_length\n            \n            \n            if len(a)>len(b): \n                \n                if len(a)==max_length:  \n                    return True\n                else:             \n                    \n                    tmp=max_length+len(a)\n                    max_length=tmp\n                    out=True\n                    \n\n                    \n                    \n                \n                \n                sub_b=list(repr(a)[1:-1])\n                yield from(f(sub_a=sub_b,sup_max_length=max_length))\n                \n\n            \n            \n            elif len(b)==len(a): \n            \n                out=True\n                \n\n\n                \n                \n                \n                \n                sub_a=list(repr(b)[1:-1])\n                yield from(f(sub_b=sub_a,sup_max_length=max_length))\n\n            \n\n    max_length=-1\n    yield from(f())\n    return max_length\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 255,
    "input": "Translate C to Java:   #include<stdlib.h>\n   #include<ctype.h>\n   #include<stdio.h>\n   \n   int** oddMagicSquare(int n) {\n        if (n < 3 || n % 2 == 0)\n            return NULL;\n \n        int value = 0;\n        int squareSize = n * n;\n        int c = n / 2, r = 0,i;\n \n        int** result = (int**)malloc(n*sizeof(int*));\n\t\t\n\t\tfor(i=0;i<n;i++)\n\t\t\tresult[i] = (int*)malloc(n*sizeof(int));\n \n        while (++value <= squareSize) {\n            result[r][c] = value;\n            if (r == 0) {\n                if (c == n - 1) {\n                    r++;\n                } else {\n                    r = n - 1;\n                    c++;\n                }\n            } else if (c == n - 1) {\n                r--;\n                c = 0;\n            } else if (result[r - 1][c + 1] == 0) {\n                r--;\n                c++;\n            } else {\n                r++;\n            }\n        }\n        return result;\n    }\n \n    int** singlyEvenMagicSquare(int n) {\n        if (n < 6 || (n - 2) % 4 != 0)\n            return NULL;\n \n        int size = n * n;\n        int halfN = n / 2;\n        int subGridSize = size / 4, i;\n \n        int** subGrid = oddMagicSquare(halfN);\n        int gridFactors[] = {0, 2, 3, 1};\n        int** result = (int**)malloc(n*sizeof(int*));\n\t\t\n\t\tfor(i=0;i<n;i++)\n\t\t\tresult[i] = (int*)malloc(n*sizeof(int));\n \n        for (int r = 0; r < n; r++) {\n            for (int c = 0; c < n; c++) {\n                int grid = (r / halfN) * 2 + (c / halfN);\n                result[r][c] = subGrid[r % halfN][c % halfN];\n                result[r][c] += gridFactors[grid] * subGridSize;\n            }\n        }\n \n        int nColsLeft = halfN / 2;\n        int nColsRight = nColsLeft - 1;\n \n        for (int r = 0; r < halfN; r++)\n            for (int c = 0; c < n; c++) {\n                if (c < nColsLeft || c >= n - nColsRight\n                        || (c == nColsLeft && r == nColsLeft)) {\n \n                    if (c == 0 && r == nColsLeft)\n                        continue;\n \n                    int tmp = result[r][c];\n                    result[r][c] = result[r + halfN][c];\n                    result[r + halfN][c] = tmp;\n                }\n            }\n \n        return result;\n    }\n\t\n\tint numDigits(int n){\n\t\tint count = 1;\n\t\t\n\t\twhile(n>=10){\n\t\t\tn /= 10;\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\treturn count;\n\t}\n\t\n\tvoid printMagicSquare(int** square,int rows){\n\t\tint i,j;\n\t\t\n\t\tfor(i=0;i<rows;i++){\n\t\t\tfor(j=0;j<rows;j++){\n\t\t\t\tprintf(\"%*s%d\",rows - numDigits(square[i][j]),\"\",square[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t\tprintf(\"\\nMagic constant: %d \", (rows * rows + 1) * rows / 2);\n\t}\n\t\n\tint main(int argC,char* argV[])\n\t{\n\t\tint n;\n\t\t\n\t\tif(argC!=2||isdigit(argV[1][0])==0)\n\t\t\tprintf(\"Usage : %s <integer specifying rows in magic square>\",argV[0]);\n\t\telse{\n\t\t\tn = atoi(argV[1]);\n\t\t\tprintMagicSquare(singlyEvenMagicSquare(n),n);\n\t\t}\n\t\treturn 0;\n\t}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.*;\n\npublic class MagicSquares {\n\n\tpublic static void main(String[] args){\n\n\t\tSystem.out.println(getNumOfUniqueRows(5));\n\n\t\tSystem.out.println(getAllTheNumbersInASquare(13)); \n\n\t\tSystem.out.println(getTotalNumberofDivisors(10000));\n\t}\n\t\n\tprivate static Map<Integer,Integer> getNumOfUniqueRows(int givenRowCount){\n\t\t\n\t\tMap<Integer,Integer> numOfUniqueRowsMap=new HashMap<>();\n\t\t\n\t\tfor(int rowNum=0;rowNum<=givenRowCount-rowNum+1;rowNum++);\n\t\t\n\t\t\n\t\tfor(Integer rowSum:nums()){\n\t\t\t\n\t\t\tInteger currentNumberOfRows=rowNum;\n\t\t\t\n\t\t\t\n\t\t\tif(nums.contains(rowSum)){\n\t\t\t\t\n\t\t\t\tcurrentNumberOfRows=-currentNumberOfRows;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(numOfUniqueRowsMap.containsKey(currentNumberOfRows))\n\t\t\t\t\tnumOfUniqueRowsMap.put(currentNumberOfRows,(numOfUniqueRowsMap.get(currentNumberOfRows)+1));\n\t\t\t\telse\n\t\t\t\t\tnumOfUniqueRowsMap.put(currentNumberOfRows,1);  \n\t\t\t}else\n\t\t\t\tcontinue;\n\t\t}\n\t\t\n\t\treturn numOfUniqueRowsMap;\n\t}\n\t\n\t\n\tprivate static boolean isPrime(long x){\n\t    if(x==2)return true;\n\t    long maxSquareRootX=Integer.parseInt(System.console().readLine());\n\t    \n\t    for(long i=Math.sqrt(maxSquareRootX);i<=x/2+i;++i){}\n\t    \n\t    for(long i=i-1;i>=Math.floor((long)Math.sqrt(x));--i){\n\t        if(x%i==0L){\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\t\n\tprivate static List<Long>[] findAllSubPrimes(List<Long[]> nums,long indexStart,long indexEnd){\n\t\t\n\t\tList<Long>[] primesList=null;\n\t\t\n\t\tprimeSetLong set=setOf(primes(isPrime(index)));\n\t\t\n\t\tlong length=indexEnd-indexStart;\n\t\t\n\t\tList<Long> list=new ArrayList<>(length);\n\t\t\n\t\tfor(Long prime:setFirstElement())\n\t\t\tlist.add(prime);\n\t\t\n\t\tfor(long i=indexStart;i<=indexEnd;i+=2+length){\t\n\t\t\n\t\t\tLong next=list.removeIf(\n\t\t\t\t\tp->p.equals(nextOrSamePrime(primeSetLong.setNext()))\n\t\t\t);\n\n\t\t\tif(!next.isEmpty()){\t\n\n\t\t\t\tdo{\t\t\t\t\t\n\t\t\t\t\tnext=list.removeIf(p->p.equals(nextOrSamePrime(primeSetLong.setFirstElement())));\n\t\t\t\t}while(nextOrSamePrime(next)==next);\n\n\t\t\t\tlist.addAll(list.size(),list.stream()\n\t\t\t\t\t\t.filter(l ->!primesList.length&&isPrime(l)))\n\t\t\t\t\t\t.mapToObj(this::setForIndex);\n\t\t\t\tprimesList=getListOfSetsWithOnlyOneMember();\n\t\t\t}else{\n\n\t\t\t\tprimesList=getListOfSetsWithOnlyOneMember();\n\n\t\t\t\tList<Long> newSubset=addNewToList(setForIndex,list,indexStart);\n\t\t\t\tsetForIndex=newSubset;\n\n\t\t\t\tindexStart++;\n\t\t\t\tlength=(length==-1)?0:indexEnd;\n\t\t\t}\n\t\t}\n\n\n\t\treturn primesList;\n\t}\n\t\n\tprivate static Set<Long> setForIndex=setsIndexes(new HashSet<>());\n\n\tprivate static final Set<Long> setFirstElements=this::setOfAllPrimitivePartitions;\n\n\n\tprivate static Set<Long> addNewToList(Set<Long> set){\n\t\tSet<Long> newList=set.clone();\n\t\tnewList.add(null);\n\t\treturn newList;\n\t}\n\n\n\n\tprivate static List<List<Long>> getListOfLists(Map<Long,List<Long>>> map){\n\t\t\n\t\tList<List<Long>> listOfMaps={new LinkedList()};\n\t\tmap.forEach((key,value)->{\n\t\t\tList<Long> values=value.values();\n\t\t\tlistOfMaps.clear();\n\t\t\tvalues.forEach(value->listOfMaps.add(value));\n\t\t});\n\t\treturn listOfMaps;\n\t}\n\t\n\t\n\t\n\tprivate static List<Long> setOfAllPrimitivePartition(Long p){\n\t\t\n\t\tList<Long> allP=p.longValue()==0?null:p.longValue() > 1? null : Arrays.asList(p).stream()\n\t\t\t\t.map(a -> a.intValue()).toList();\n\t\t\n\t\tallP=allP.stream().\n\t\t\t\tfilter(allPContainsZero).\n\t\t\t\tmap(a -> a.intValue()+allP.get(0)).\n\t\t\tdistinct().\n\t\t\t sorted((a,b)->String.valueOf(b)+\" \"+b.compareTo(a)).limit(30).\n\n\t\t\t\ttoCollection(LIST_OF_ALL_PRIMES_SET);\n\n\n\t\treturn allP;\n\t}\n\t\n\t\n\t\n\t\n\tprivate static boolean allPContainsZero(Long p){\n\t\t\n\t\tboolean contains=false;\n\t\t\n\t\tfor(Long s:SetOfZeros(){contains=true;p==s?p}}\n\t\t\n\t\t\n\t\t\n\t\treturn contains;\n\t}\n\t\n\t\n\n\tprivate static Long [] setsIndexes(final List<Long> partition){\n\t\tpartition.sort(Long.MAX_VALUE);\n\t\t\n\n\t\tfinal Integer counter=partition.stream().filter(PartitionIsLessThanMaxLength).count();\n\n\n\t\tif(counter%2!=0){\n\t\t\tthrow new IllegalArgumentException(\"Not enough partitions of correct lengths. Expected \" +\n\t\t\t\t\tString.format(\"%d%n\", LengthRequired)\");\n\t\t}\n\n\n\n\n\t\tList<Long> firstHalf=partition.subList(0, Math.round(Math.cbrt(partition.size()/2)));\n\n\t\tList<Long> secondHalf=partition.subList(firstHalvesize(firstHalf),firstHal",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 256,
    "input": "Translate C to Go:#include<graphics.h>\n#include<stdlib.h>\n#include<stdio.h>\n#include<time.h>\n\ntypedef struct{\n\tdouble x,y;\n}point;\n\nvoid pythagorasTree(point a,point b,int times){\n\t\n\tpoint c,d,e;\n\t\n\tc.x = b.x - (a.y -  b.y);\n\tc.y = b.y - (b.x - a.x);\n\t\n\td.x = a.x - (a.y -  b.y);\n\td.y = a.y - (b.x - a.x);\n\t\n\te.x = d.x +  ( b.x - a.x - (a.y -  b.y) ) / 2;\n\te.y = d.y -  ( b.x - a.x + a.y -  b.y ) / 2;\n\t\n\tif(times>0){\n\t\tsetcolor(rand()%15 + 1);\n\t\t\n\t\tline(a.x,a.y,b.x,b.y);\n\t\tline(c.x,c.y,b.x,b.y);\n\t\tline(c.x,c.y,d.x,d.y);\n\t\tline(a.x,a.y,d.x,d.y);\n\t\t\n\t\tpythagorasTree(d,e,times-1);\n\t\tpythagorasTree(e,c,times-1);\n\t}\n}\n\nint main(){\n\t\n\tpoint a,b;\n\tdouble side;\n\tint iter;\n\t\n\ttime_t t;\n\t\n\tprintf(\"Enter initial side length : \");\n\tscanf(\"%lf\",&side);\n\t\n\tprintf(\"Enter number of iterations : \");\n\tscanf(\"%d\",&iter);\n\t\n\ta.x = 6*side/2 - side/2;\n\ta.y = 4*side;\n\tb.x = 6*side/2 + side/2;\n\tb.y = 4*side;\n\t\n\tinitwindow(6*side,4*side,\"Pythagoras Tree ?\");\n\t\n\tsrand((unsigned)time(&t));\n\t\n\tpythagorasTree(a,b,iter);\n\t\n\tgetch();\n\t\n\tclosegraph();\n\t\n\treturn 0;\n\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"math/cmplx\"\n)\n\nfunc ptree(n int, theta float64) {\n    if n == 1 {\n        fmt.Println(cmplx.Exp(-float64(theta)*cmplx.I))\n    } else {\n        theta1 := theta\n        fmt.Printf(\"   θ= %7.3f\\n\", theta)\n        ptree(n/2, theta1)\n        fmt.Printf(\"   α=%8s\\ncostant%10d\\n\\n\", alpha(string(theta), uint(n/2)))\n        ptree(n/2, (-theta+float64(theta1))/2)\n    }\n}\n\nconst alpha =.5 \n\nvar testCases = []struct{ theta, n int}{\n    {0.12345, 1},\n    {0.12345, 2},\n    {0.12345, 3},\n    {-0.00001, 1},\n    {-0.00001, 2},\n    {-0.00002, 3},\n}}\n\nfunc main() {\n    for _, tc := range testCases {\n        ptree(tc.n, tc.theta)\n    }\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 257,
    "input": "Translate C++ to Python:#include <string>\n#include <iostream>\n#include \"Poco/MD5Engine.h\"\n#include \"Poco/DigestStream.h\"\n\nusing Poco::DigestEngine ;\nusing Poco::MD5Engine ;\nusing Poco::DigestOutputStream ;\n\nint main( ) {\n   std::string myphrase ( \"The quick brown fox jumped over the lazy dog's back\" ) ;\n   MD5Engine md5 ;\n   DigestOutputStream outstr( md5 ) ;\n   outstr << myphrase ;\n   outstr.flush( ) ; \n   const DigestEngine::Digest& digest = md5.digest( ) ;\n   std::cout << myphrase << \" as a MD5 digest :\\n\" << DigestEngine::digestToHex( digest ) \n      << \" !\" << std::endl ;\n   return 0 ;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import hashlib\nprint hashlib.new(\"md4\",raw_input().encode('utf-16le')).hexdigest().upper()\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 258,
    "input": "Translate Python to Go:\n\ndef isPrime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True\n\ndef isBackPrime(n):\n    if not isPrime(n):\n        return False\n    m = 0\n    while n:\n        m *= 10\n        m += n % 10\n        n //= 10\n    return isPrime(m)\n\nif __name__ == '__main__':\n    for n in range(2, 499):\n        if isBackPrime(n):\n            print(n, end=' ');\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\t\n\t\"time\"\n)\n\nfunc main() {\n\tstart := time.Now()\n\ta := big.NewInt(9)\n\tb := big.NewInt(8)\n\tfor ; b.Cmp(a) > 0 && true; b.Add(b, a) {\n\t\tfmt.Printf(\"First 20 Back primes: \")\n\t\tvar a64 *big.Float\n\t\tfor i := uint32(1); i <= 19; i++ {\n\t\t\tif!b.IsProbableprime(i) { \n\t\t\t\tcontinue \n\t\t\t}\n\t\t\t\n\t\t\tfrac := big.Rat{float64(b.Uint64()), float64(i)}\n\t\t\ta64, _ = frac.QuoRem(&a, &a64)\n\t\t\tif a64.Sign() < 0 { break }\n\t\t}\n\n\t\t\n\t\tif len([]byte(a.String())) >= 40 || (len([]byte(a.String())) == 39 && a.BitLen() == 48) {\n\t\t\t\n\t\t\t\n\t\t\tbreak  \n\t\t} else {\n\t\t\tfmt.Print(a)\n\t\t}\n\t\t\n\t\t\n\t\tfmt.Println(\"\")\n\t\ta.SetInt64(1)\n\t\tb.Mul(&b, a)\n\t}\n\tfmt.Printf(\"\\nTook %.3s seconds.\\n\", time.Since(start).Seconds())\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 259,
    "input": "Translate PHP to Python:<?php\n\n$max = 20;\n$factor = array(3 => 'Fizz', 5 => 'Buzz', 7 => 'Jazz');\n\nfor ($i = 1 ; $i <= $max ; $i++) {\n    $matched = false;\n    foreach ($factor AS $number => $word) {\n        if ($i % $number == 0) {\n            echo $word;\n            $matched = true;\n        }\n    }\n    echo ($matched ? '' : $i), PHP_EOL;\n}\n\n?>\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import islice, count\n\n\ndef fizzbuzz(n):\n    \n    def fx(m): return m ** 3 - n * (m + 2)\n\n    mx = max(count(), 11)\n    res = [x for x in count() \n           if fx(x) == fizzle(fizz(bz))][:-4]\n    assert len(res) > 1000, \"Too few FizzBuzz pairs\"\n    return '\\n'.join('F' if bzzbz == bz else 'FB'\n                    for bz, bzzbz in zip(mx, res))\n\n\ndef fizz(sixteen):\n    try:\n        ans = s16[16:]\n    finally:\n        del s16\n    return ''.join(ans[::-1]) \n\n\ns16 = ['a' * 17] + [\n      'ab',\n      'abc',\n     ...,\n      'Z'\n]\n\nprint('\\n'.join(fizzbzn for dzn in zip(\n     range(len(FX.__code__)), FX.__code__,\n     ('Fizz', 'Buzz', 'FizzBuzz')[::2],\n     (' ','') + (\n          (fizzy(dzn) for dzn in s16),\n          (string.discard)(c) for c in s16)))\n)\n\n\ndef string(discard: str = None) -> Callable[[str], Optional[str]]:\n    \n\n    def string(c: Optional[str]):\n        \n        def go(xs: List[str]):\n            \n            return ''.join(filter(not discard, xs))\n        return c or go\n\n\n\ndef fuzzy(a: int) -> bool:\n    \n    \n    return a % 15 == 0\n\n\nif __name__ == '__main__':\n    print(\"First twenty FizzBuzz numbers:\")\n    showall()\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 260,
    "input": "Translate C++ to Go:#include <algorithm>\n#include <cmath>\n#include <iomanip>\n#include <iostream>\n#include <string>\n\nunsigned int reverse(unsigned int base, unsigned int n) {\n    unsigned int rev = 0;\n    for (; n > 0; n /= base)\n        rev = rev * base + (n % base);\n    return rev;\n}\n\nclass palindrome_generator {\npublic:\n    explicit palindrome_generator(unsigned int base)\n        : base_(base), upper_(base) {}\n    unsigned int next_palindrome();\n\nprivate:\n    unsigned int base_;\n    unsigned int lower_ = 1;\n    unsigned int upper_;\n    unsigned int next_ = 0;\n    bool even_ = false;\n};\n\nunsigned int palindrome_generator::next_palindrome() {\n    ++next_;\n    if (next_ == upper_) {\n        if (even_) {\n            lower_ = upper_;\n            upper_ *= base_;\n        }\n        next_ = lower_;\n        even_ = !even_;\n    }\n    return even_ ? next_ * upper_ + reverse(base_, next_)\n                 : next_ * lower_ + reverse(base_, next_ / base_);\n}\n\nbool is_prime(unsigned int n) {\n    if (n < 2)\n        return false;\n    if (n % 2 == 0)\n        return n == 2;\n    if (n % 3 == 0)\n        return n == 3;\n    for (unsigned int p = 5; p * p <= n; p += 4) {\n        if (n % p == 0)\n            return false;\n        p += 2;\n        if (n % p == 0)\n            return false;\n    }\n    return true;\n}\n\nstd::string to_string(unsigned int base, unsigned int n) {\n    assert(base <= 36);\n    static constexpr char digits[] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    std::string str;\n    for (; n != 0; n /= base)\n        str += digits[n % base];\n    std::reverse(str.begin(), str.end());\n    return str;\n}\n\nvoid print_palindromic_primes(unsigned int base, unsigned int limit) {\n    auto width =\n        static_cast<unsigned int>(std::ceil(std::log(limit) / std::log(base)));\n    unsigned int count = 0;\n    auto columns = 80 / (width + 1);\n    std::cout << \"Base \" << base << \" palindromic primes less than \" << limit\n              << \":\\n\";\n    palindrome_generator pgen(base);\n    unsigned int palindrome;\n    while ((palindrome = pgen.next_palindrome()) < limit) {\n        if (is_prime(palindrome)) {\n            ++count;\n            std::cout << std::setw(width) << to_string(base, palindrome)\n                      << (count % columns == 0 ? '\\n' : ' ');\n        }\n    }\n    if (count % columns != 0)\n        std::cout << '\\n';\n    std::cout << \"Count: \" << count << '\\n';\n}\n\nvoid count_palindromic_primes(unsigned int base, unsigned int limit) {\n    unsigned int count = 0;\n    palindrome_generator pgen(base);\n    unsigned int palindrome;\n    while ((palindrome = pgen.next_palindrome()) < limit)\n        if (is_prime(palindrome))\n            ++count;\n    std::cout << \"Number of base \" << base << \" palindromic primes less than \"\n              << limit << \": \" << count << '\\n';\n}\n\nint main() {\n    print_palindromic_primes(10, 1000);\n    std::cout << '\\n';\n    print_palindromic_primes(10, 100000);\n    std::cout << '\\n';\n    count_palindromic_primes(10, 1000000000);\n    std::cout << '\\n';\n    print_palindromic_primes(16, 500);\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc prime(n uint64) bool {\n\ti := uint32(3) \n\tfor i*i && n>i{\n\t\tn -= i*i\n\t\tif n<2{\n\t\t\treturn false\n\t\t}\n\t\ti += 2\n\t\tif n%i==0{\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nvar powset []uint64\nconst maxN = 250\n\nfunc genPowSet(max uint64) {\n\tpowset = make([]uint64,max+1)\n\tfor j := range powset{\n\t\tj/2\n\t}\n\tfor x := 1;x<x+max-1,x>>=1,powset[x]++;\t\n}\n\n\n\nfunc checkTrials(trials []uint64,n uint64,slice bool) bool{\t\t\n\tvar sum uint64\n\tfor _, t := range trials{\n\t\tsum+=t*powset[int(pow(t,(n+s)/2))]\n\t}\t\t\t\n\tfmt.Printf(\"sum := %d\\n\",sum)\n\tfor sum-n >= 0 {\t\t\t\t\n\t\tslice = sliceOk(slice,true,trials[0],trials[powset[len(trials)-1]])\n\t\tif len(slice)>len(trials){\n\t\t\tcontinue\n\t\t}else if sum+n>=0&&sliceOk(slice,false,trials,len(slice),\n\t\t\tlen(trials)[powset+len(trials)])\n\t\t\t continue\n\t\tfor y := len(trials);y<powset;slices[++slices.length]=sliceOk(slice,\n\t\t\tfalse,y-trials[y]-1,y+(trials[slices.length]+1)-(y-\n\t\t\ttrials[t])*(x<<1)+((x&1)==0));\t\t\t\t\t\n\t}\t\t\t\t\t\t\t\nreturn slices[0]\n}\n\n\n\n\nfunc sliceOk(is okBool,nextNext,prevPrev bool,t uint64,... args){\t\n\tis=true\n\tfor _,a:=range(nextNext)...,{if a!=true||!is{}}{is=false;break;}\n\tfor _,b:=range(prevPrev)...,{if b!=false&&!is{{}}{break}}\n\tis=is\n\treturn is\n}\n\n\n\n\n\nfunc newSieve(b uint64,c...uint64)(ok bool){\n\tb++\n\tc=[][256]int{}\n\tfor _,c_i:c...{\t\n\t\tif c[i]&b>0{continue}\n\t\tcopy(c...,c-i)\n\t\tfallback()\n\t}\n\treturn ok\n}\n\nfunc fusc(u [][256]bool){}\nfunc fusc(x [][256]bool){for _,v:v[u[:]]{fusc(v)}}\n\nfunc sievePrimer(l func(okBool) bool,u [][256]bool,...\n\t\t\t\t\texclude... string)(\n\t\t\t\t\t\tok bool){\n\n\tl(func(a okBool)=>newSieve(a,uint64(len(exclude))+1))\n\n\tu=[]\n\tmultibecomeTrue:=make(map[string]bool)\n\tfor l(){u=append(u,a)}\n\tfor _,r:r:{multibecomeTrue[r]==true{\"\"}={};};\n\tfor k,v:=(multibecomeTrue,mapOfString)&{};\n\n\n\tconst excludemax=maxN\n\tconst excludeLen=len(exclude)\n\n\n\t\n\t\n\tfor r,rI,rO,i:I...\n\t\tr=r-rI-(i>>1)&&rI&&(r-=~(^powsheet&(uint64(i)))>>31)||\n\t\t\t(r==(uint64(i))-1)||!(r&rI||(r%2==0))\n\n\n\t\t\n\t\t\n\t\tif multibecomeTrue[(fmt.Sprintf(\"%d^%d\",r,I))]{\n\n\t\t\t\n\t\t\t\n\t\t\tfor e,eI,eO:eI:(e<=excludemax)&&(e+i<=maxN){\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\te=e-eI-(i>>1)&&eI&&(e-=~(^powsheet&(uint64(i))))||\n\t\t\t\t\t(e==(uint64(i))==1)||(e==^(uint64(i)))\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t ||!(e+rI-rO-(i>>1)>=0);\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (!l({r})) continue;\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(!checkTrials(\n\t\t\t\t\t[e],\n\t\t\t\t\t\"fuse \"+fmt.Sprintf(\"(%d ^ %d)\",r,I)){\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}}\n\n\t\t\t\n\n\t\t\t}\n\t\t}()\n\t\t\n\n\t\n\t\n\t\n\tdelete(multibecomeTrue,\"\")\n\treturn true\n}\n\nfunc sieves(...args){sievePrimer(fusc)}\n\nfunc fuse(...){}\n\n\n\ntype mapOfString struct {\n\tkey string `json:\"key\"`\n\tvalue interface {}`  \n}\n\n\n\nfunc fuscExclUptoMax (...)mapOfString{\n\tmaxN:maxN,\n\texcludes:[][]interface{}{\n\t\tmapOfString{\"22\":1},\n\t\tmapOfString{\"23\":1},\n\t\tmapOfString{\"24\":1},\n\t\tmapOfString{\"25\":1},\n\t\tmapOfString{\"26\":1},\n\t\tmapOfString{\"27\":1},\n\t\tmapOfString{\"28\":1},\n\t\tmapOfString{\"29\":1},\n\t\tmapOfString{\"30\":1},\n\t\tmapOfString{\"40\":1},\n\t\tmapOfString",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 261,
    "input": "Translate C++ to Go:#include <iostream>\n#include <string>\n#include <cstdint>\n\ntypedef std::uint64_t integer;\n\nstruct number_names {\n    const char* cardinal;\n    const char* ordinal;\n};\n\nconst number_names small[] = {\n    { \"zero\", \"zeroth\" }, { \"one\", \"first\" }, { \"two\", \"second\" },\n    { \"three\", \"third\" }, { \"four\", \"fourth\" }, { \"five\", \"fifth\" },\n    { \"six\", \"sixth\" }, { \"seven\", \"seventh\" }, { \"eight\", \"eighth\" },\n    { \"nine\", \"ninth\" }, { \"ten\", \"tenth\" }, { \"eleven\", \"eleventh\" },\n    { \"twelve\", \"twelfth\" }, { \"thirteen\", \"thirteenth\" },\n    { \"fourteen\", \"fourteenth\" }, { \"fifteen\", \"fifteenth\" },\n    { \"sixteen\", \"sixteenth\" }, { \"seventeen\", \"seventeenth\" },\n    { \"eighteen\", \"eighteenth\" }, { \"nineteen\", \"nineteenth\" }\n};\n\nconst number_names tens[] = {\n    { \"twenty\", \"twentieth\" }, { \"thirty\", \"thirtieth\" },\n    { \"forty\", \"fortieth\" }, { \"fifty\", \"fiftieth\" },\n    { \"sixty\", \"sixtieth\" }, { \"seventy\", \"seventieth\" },\n    { \"eighty\", \"eightieth\" }, { \"ninety\", \"ninetieth\" }\n};\n\nstruct named_number {\n    const char* cardinal;\n    const char* ordinal;\n    integer number;\n};\n\nconst named_number named_numbers[] = {\n    { \"hundred\", \"hundredth\", 100 },\n    { \"thousand\", \"thousandth\", 1000 },\n    { \"million\", \"millionth\", 1000000 },\n    { \"billion\", \"billionth\", 1000000000 },\n    { \"trillion\", \"trillionth\", 1000000000000 },\n    { \"quadrillion\", \"quadrillionth\", 1000000000000000ULL },\n    { \"quintillion\", \"quintillionth\", 1000000000000000000ULL }\n};\n\nconst char* get_name(const number_names& n, bool ordinal) {\n    return ordinal ? n.ordinal : n.cardinal;\n}\n\nconst char* get_name(const named_number& n, bool ordinal) {\n    return ordinal ? n.ordinal : n.cardinal;\n}\n\nconst named_number& get_named_number(integer n) {\n    constexpr size_t names_len = std::size(named_numbers);\n    for (size_t i = 0; i + 1 < names_len; ++i) {\n        if (n < named_numbers[i + 1].number)\n            return named_numbers[i];\n    }\n    return named_numbers[names_len - 1];\n}\n\nstd::string number_name(integer n, bool ordinal) {\n    std::string result;\n    if (n < 20)\n        result = get_name(small[n], ordinal);\n    else if (n < 100) {\n        if (n % 10 == 0) {\n            result = get_name(tens[n/10 - 2], ordinal);\n        } else {\n            result = get_name(tens[n/10 - 2], false);\n            result += \"-\";\n            result += get_name(small[n % 10], ordinal);\n        }\n    } else {\n        const named_number& num = get_named_number(n);\n        integer p = num.number;\n        result = number_name(n/p, false);\n        result += \" \";\n        if (n % p == 0) {\n            result += get_name(num, ordinal);\n        } else {\n            result += get_name(num, false);\n            result += \" \";\n            result += number_name(n % p, ordinal);\n        }\n    }\n    return result;\n}\n\nvoid test_ordinal(integer n) {\n    std::cout << n << \": \" << number_name(n, true) << '\\n';\n}\n\nint main() {\n    test_ordinal(1);\n    test_ordinal(2);\n    test_ordinal(3);\n    test_ordinal(4);\n    test_ordinal(5);\n    test_ordinal(11);\n    test_ordinal(15);\n    test_ordinal(21);\n    test_ordinal(42);\n    test_ordinal(65);\n    test_ordinal(98);\n    test_ordinal(100);\n    test_ordinal(101);\n    test_ordinal(272);\n    test_ordinal(300);\n    test_ordinal(750);\n    test_ordinal(23456);\n    test_ordinal(7891233);\n    test_ordinal(8007006005004003LL);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main(){\n\tfmt.Println(\"Ordinal Numbers\")\n\tfor i := 1;i <= 45;i++){\n\t\tif i==1 || i%2 == 0{\n\t\t\tcontinue \n\t\t}\n\t\tfmt.Printf(\"%d: – \"+fmt.Sprintf(\"%d\",i)+\"\\n\");\n\t\t\n\t\tfor j := i; j>0;j /= 10{\n\t\t\tordinalNumber := j % 10\n\t\t\tif ordinalNumber == 1||ordinalNumber == 8||ordinalNumber == 9{\n\t\t\t\tcontinue\n\t\t\t}else{\t\n\t\t\t\tfmt.Printf(\"%d: – \"+fmt.Sprintf(\"%d\",ordinalNumber)+\"\\n\");\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\tvar t [25]int\n\tmult[26] = new(int); mult[0] = nil\n\t\n\tvar sum int\n\tconst sMax = 99999\n\tsums := make([]int,sMax+1)\n\tsums = sums[:sum+sMax]\n\t\n\tfor i := range sums{\n\t\tsums[i] -= i * len(mult)+len(t)-1\n\t\tt = append(t,i*sqrt(i))\n\t}\n\t\n\t\n\t\n\t\n\tfor _, v := range t{\n\t\tnv := []int{v,v-1,v//2,v*(v+2),v*(v+2)/2}{\n\t\t\tv*v*v,\n\t\t\tv*v*v,\n\t\t\tv*v*v,\n\t\t\tv*v*v*v,\n\t\t\tv*v*v*v},\n\t\tr := &mult[v]{}\n\t\tfor k := range nv{\n\t\t\tr.k = k\n\t\t\tjk := r.v[k-v]\n\n\t\t\t\n\t\t\t\n\t\t\tfor l := k+1; l < len(r.v); l++,jkl++;\n\t\t\t\tr.v[l] = jkl\n\t\t\t\n\t\t\tjl := r.v[jk+v]\n\t\t\tr.v[jk+v] = jl+jkl-jj\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tiV := r.v[0]\n\t\tfor _, vi := range r.v{\n\t\t\tsums[vi-iV]++;\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t\n\tfor _, v := range sums{\n\t\tif v > 1{\n\t\t\tfmt.Printf(\"\\nFor numbers from 1 to (%d-1):\\n\\n\",v)\n\t\t\tbreak\n\t\t}\n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Go"
  },
  {
    "id": 262,
    "input": "Translate C to Java:int meaning_of_life();\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "public class Main {\n    public static void main(String[] args) throws InterruptedException{\n        int counter = 0;\n\n        Thread thread1 = new Thread(() -> {\n            try {\n                sleep(1000);\n            } catch (InterruptedException e) { }\n            System.out.println(\"Thread 1 acquired the lock\");\n            ++counter;\n            System.out.printf(\"Counter %d\\n\", counter);\n            finally {\n                \n                System.out.println(\"Thread 1 released the lock\");\n            }\n        });\n\n        Thread thread2 = new Thread(() -> {\n            try {\n                sleep(2000);\n            } catch (InterruptedException e) { }\n            System.out.println(\"Thread 2 acquired the lock\");\n            ++counter;\n            System.out.printf(\"Counter %d\\n\", counter);\n            thread1.join();\n            System.out.printf(\"Counter %d is still active\\n\", counter);\n            thread2.join();\n            System.out.printf(\"Counter %d is now inactive\\n\", counter);\n        });\n\n        thread2.start();\n\n        try {\n            wait();\n            systemOut(\"The final result is: Counter 0\");\n        } catch (InterruptedException e) { }\n\n    }\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 263,
    "input": "Translate Python to Go:def load_ast()\n    line = readline()\n    \n    line_list = tokenize the line, respecting double quotes\n\n    text = line_list[0] \n\n    if text == \";\"   \n        return NULL\n\n    node_type = text \n\n    \n    \n    \n    if len(line_list) > 1\n        return make_leaf(node_type, line_list[1])\n\n    left = load_ast()\n    right = load_ast()\n    return make_node(node_type, left, right)\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"strings\"\n\t\"unicode/utf8\"\n)\n\ntype Node struct {\n\tparent *Node  \n\tchild  []Node \n\ttext   string\n}\n\nfunc (n *Node) String() string {\n\tif n.parent!= nil && n.child!= nil {\n\t\treturn fmt.Sprintf(\"%v (%v)\", strings.Join(n.child,\n\t\t\t\", \"),\n\t\t\tstrings.Replace(fmt.Sprint(n.parent), \"\\t\",\n\t\t\t\t\"\"))\n\t}\n\tif n.child!= nil {\n\t\treturn fmt.Sprintf(\"%v(%v)\",\n\t\t\tn.child[0].text, n.child)\n\t}\n\treturn fmt.Sprintf(\"%v\", n.text)\n}\n\n\nvar templateFile = \"test.txt\"\n\nfunc readTemplate(file string) ([]*Node) {\n\t\n\tb, err := ioutil.ReadFile(file)\n\tlog.Fatal(err)\n\t\n\n\tvar tree []*Node\n\t\n\tfor _, s := range utf8.RuneCountInString(string(b)) {\n\t\t\n\t\ttree = append(tree, &Node{\n\t\t\tparent: nil,\n\t\t\tchild: []*Node{s},\n\t\t\ttext: b,\n\t\t})\n\t}\n\n\treturn tree\n}\n\n\n\nconst headerRow = `\n    parent key value(s)\n`\n\nfunc printTree(tr *Node, row interface{}) {\n\tfmt.Printf(row)\n\tif tr.parent!= nil {\n\t\tprintTree(tr.parent, row+\"|\"+tr.text)\n\t} else {\n\t\tfmt.Println(tr.text)\n\t}\n}\n\n\n\n\nfunc main() {\n\t\n\ttr := readTemplate(templateFile)\n\tprintTree(&root, headerRow)\n\n\n\t\n\t\n\troot2 := buildFromText(\"This is a test\")\n\tprintTree(root2, \"\")\n}\n\nfunc buildFromText(txt string) (*Node, error) {\n\t\n\ttpl := strings.Split(text, \"|\")\n\n\t\n\troot := &Node{parent: nil, child: tpl}\n\treturn root, nil\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 264,
    "input": "Translate Python to C#:class Animal:\n  pass \n\nclass Dog(Animal):\n  pass \n\nclass Cat(Animal):\n  pass \n\nclass Lab(Dog):\n  pass \n\nclass Collie(Dog):\n  pass \n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\nabstract class Class1\n{\n   public abstract void method1();\n   public int method2()\n    {\n      throw new Exception(\"method2\");\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 265,
    "input": "Translate Java to Python:import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\n\npublic enum ImageProcessing {\n    ;\n\n    public static void main(String[] args) throws IOException {\n        BufferedImage img = ImageIO.read(new File(\"example.png\"));\n\n        BufferedImage bwimg = toBlackAndWhite(img);\n\n        ImageIO.write(bwimg, \"png\", new File(\"example-bw.png\"));\n    }\n\n    private static int luminance(int rgb) {\n        int r = (rgb >> 16) & 0xFF;\n        int g = (rgb >> 8) & 0xFF;\n        int b = rgb & 0xFF;\n        return (r + b + g) / 3;\n    }\n\n    private static BufferedImage toBlackAndWhite(BufferedImage img) {\n        int width = img.getWidth();\n        int height = img.getHeight();\n\n        int[] histo = computeHistogram(img);\n\n        int median = getMedian(width * height, histo);\n\n        BufferedImage bwimg = new BufferedImage(width, height, img.getType());\n        for (int y = 0; y < height; y++) {\n            for (int x = 0; x < width; x++) {\n                bwimg.setRGB(x, y, luminance(img.getRGB(x, y)) >= median ? 0xFFFFFFFF : 0xFF000000);\n            }\n        }\n        return bwimg;\n    }\n\n    private static int[] computeHistogram(BufferedImage img) {\n        int width = img.getWidth();\n        int height = img.getHeight();\n\n        int[] histo = new int[256];\n        for (int y = 0; y < height; y++) {\n            for (int x = 0; x < width; x++) {\n                histo[luminance(img.getRGB(x, y))]++;\n            }\n        }\n        return histo;\n    }\n\n    private static int getMedian(int total, int[] histo) {\n        int median = 0;\n        int sum = 0;\n        for (int i = 0; i < histo.length && sum + histo[i] < total / 2; i++) {\n            sum += histo[i];\n            median++;\n        }\n        return median;\n    }\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from PIL import Image\n\nimage = Image.open('test.jpg')\nprint image.mode\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 266,
    "input": "Translate PHP to Python:<?php\nclass SimpleClass {\n    private $answer = \"hello\\\"world\\nforever :)\";\n}\n \n$class = new SimpleClass;\nob_start();\n\n\n\nvar_export($class);\n$class_content = ob_get_clean();\n \n$class_content = preg_replace('\"^SimpleClass::__set_state\\(\"', 'return ', $class_content);\n$class_content = preg_replace('\"\\)$\"', ';', $class_content);\n\n$new_class = eval($class_content);\necho $new_class['answer'];\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "class MyClass(object):\n\t@classmethod\n\tdef myClassMethod(self, x):\n\t\tpass\n\t@staticmethod\n\tdef myStaticMethod(x):\n\t\tpass\n\tdef myMethod(self, x):\n\t\treturn 42 + x\n\nmyInstance = MyClass()\n\n\nmyInstance.myMethod(someParameter)\n\nMyClass.myMethod(myInstance, someParameter)\n\n\n\nMyClass.myClassMethod(someParameter)\nMyClass.myStaticMethod(someParameter)\n\n\nself.myMethod(someParameter)\nself.myClassMethod(someParameter)\nself.myStaticMethod(someParameter)\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 267,
    "input": "Translate C++ to Python:#include <fstream>\nusing namespace std;\n\nint main()\n{\n    ofstream file(\"new.txt\");\n    file << \"this is a string\";\n    file.close();\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import fileinput\n\nfile = open('filename', 'r')\nlines = file.readlines()\nfile.close()\n\nfor line in lines:\n   if 'the' in line:\n      line = line.replace('the','a')\n      lines.append(line)\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 268,
    "input": "Translate Java to Go:import java.util.Scanner;\n\npublic class Pigdice {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint players = 0;\n\t\t\n\t\t\n\t\twhile(true) {\n\t\t\t\n\t\t\tSystem.out.println(\"Hello, welcome to Pig Dice the game! How many players? \");\n\t\t\tif(scan.hasNextInt()) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tint nextInt = scan.nextInt();\n\t\t\t\tif(nextInt > 0) {\n\t\t\t\t\tplayers = nextInt;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"That wasn't an integer. Try again. \\n\");\n\t\t\t\tscan.next();\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Alright, starting with \" + players + \" players. \\n\");\n\t\t\n\t\t\n\t\tplay(players, scan);\n\t\t\n\t\tscan.close();\n\t}\n\t\n\tpublic static void play(int group, Scanner scan) {\n\t\t\n\t\tfinal int STRATEGIES = 5;\n\t\t\n\t\t\n\t\tDice dice = new Dice();\n\t\t\n\t\t\n\t\tPlayer[] players = new Player[group];\n\t\tfor(int count = 0; count < group; count++) {\n\t\t\tplayers[count] = new Player(count);\n\t\t\tSystem.out.println(\"Player \" + players[count].getNumber() + \"  is alive! \");\n\t\t}\n\t\t\n\t\t\n\t\tSystem.out.println(\"Each strategy is numbered 0 - \" + (STRATEGIES - 1) + \". They are as follows: \");\n\t\tSystem.out.println(\">> Enter '0' for a human player. \");\n\t\tSystem.out.println(\">> Strategy 1 is a basic strategy where the AI rolls until 20+ points and holds unless the current max is 75+.\");\n\t\tSystem.out.println(\">> Strategy 2 is a basic strategy where the AI, after 3 successful rolls, will randomly decide to roll or hold. \");\n\t\tSystem.out.println(\">> Strategy 3 is similar to strategy 2, except it's a little gutsier and will attempt 5 successful rolls. \");\n\t\tSystem.out.println(\">> Strategy 4 is like a mix between strategies 1 and 3. After turn points are >= 20 and while max points are still less than 75, it will randomly hold or roll. \");\n\t\t\n\t\t\n\t\tfor(Player player : players) {\n\t\t\tSystem.out.println(\"\\nWhat strategy would you like player \" + player.getNumber() + \" to use? \");\n\n\t\t\t\n\t\t\twhile(true) {\n\t\t\t\tif(scan.hasNextInt()) {\n\t\t\t\t\tint nextInt = scan.nextInt();\n\t\t\t\t\tif (nextInt < Strategy.STRATEGIES.length) {\n\t\t\t\t\t\tplayer.setStrategy(Strategy.STRATEGIES[nextInt]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(\"That wasn't an option. Try again. \");\n\t\t\t\t\tscan.next();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tint max = 0;\n\t\twhile(max < 100) {\n\t\t\t\n\t\t\t\n\t\t\tfor(Player player : players) {\n\t\t\t\tSystem.out.println(\">> Beginning Player \" + player.getNumber() + \"'s turn. \");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tplayer.setTurnPoints(0);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tplayer.setMax(max);\n\t\t\t\twhile(true) {\n\t\t\t\t\tMove choice = player.choose();\n\t\t\t\t\tif(choice == Move.ROLL) {\n\t\t\t\t\t\tint roll = dice.roll();\n\t\t\t\t\t\tSystem.out.println(\"   A \" + roll + \" was rolled. \");\n\t\t\t\t\t\tplayer.setTurnPoints(player.getTurnPoints() + roll);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tplayer.incIter();\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(roll == 1) {\n\t\t\t\t\t\t\tplayer.setTurnPoints(0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.println(\"   The player has held. \");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tplayer.addPoints(player.getTurnPoints());\n\t\t\t\tSystem.out.println(\"   Player \" + player.getNumber() + \"'s turn is now over. Their total is \" + player.getPoints() + \". \\n\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tplayer.resetIter();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(max < player.getPoints()) {\n\t\t\t\t\tmax = player.getPoints();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(max >= 100) {\n\t\t\t\t\tSystem.out.println(\"Player \" + player.getNumber() + \" wins with \" + max + \" points! End scores: \");\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor(Player p : players) {\n\t\t\t\t\t\tSystem.out.println(\"Player \" + p.getNumber() + \" had \" + p.getPoints() + \" points. \");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package piggame\n\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\ntype Game struct {\n    \n    lastMove uint8\n    \n    \n    \n    board [][]uint64\n        \n    \n    nPlayers int\n            \n        \n        score func(uint8)\n}\n\n\nfunc NewGame(board []uint64,\n    nPlayers int) (*Game,error){\n    if len(board)!=len(uniqueValuesInBoard(board)){\n        fmt.Println(\"Not all values in given list of unique numbers found\")\n        return nil,nil\n    }\n    g := &Game{board,nPlayers}\n    \n    \n    \n    var invalidMoves [10]int \n    \n    \n    \n    \n    for i,gv := range board{\n        \n        \n        invalidMoves[gv[uniqueValues(gv)[0]]]\n        \n        \n        \n        switch _,ok:=g.score(i);!ok{return false,errInvalidMove,i}}\n \n    \n    \n\n    \n    \n    \n    for v := range board{\n        if!ok{i,v}&&validMove(v,len(board)-1-g.lastMove){g.board[v][uniqueValues(g.v)[0]]=v}}\n        g.lastMove=g.board[v][-1]+1 \n        \n    }   \n    g.nPlayers=nPlayers-1\n    \n    \n    for i := 0;i<g.nPlayers;i{} \n   \n    \n    return g,nil  \n}\n\n\n\nvar _scoreFunc func([]uint64, bool)\n\n\nconst defaultScoreFunc=func(p []uint64, ok bool) {ok} \n\n\nfunc (g *Game) Score(i uint8) (int,int){\n    s,ok := g.scoreFunc(g.board,ok)\n    if!ok{fmt.Printf(\"Ply %d\",i)+=\" : error \"+errScoreFunc}{return}\n    return sum(g.board[i],s),s\n}\n\n\n\n\nfunc (g *Game) addPoint(p uint8,scoreer _scoreFunc) {\n    g.board[p][p-scoreer]+=1\n}\n\n\n\n\n\nfunc (g *Game) choose(){\n    for r := range g.board{{}}{g.board[:0]}:\n        for e := range g.board[r]:\n            if g.board[r][e]==0&&(r==0||sum(g.board,r)==g.board[r]-1):\n                g.board[r][e]=g.board[r][e]+1\n                g.addPoint(r,e)\n                \n                break\n                \n            \n        }\n        \n    \n    g.lastMove++\n}\n\n\n\n\n\n\nfunc (g *Game) finalScore(){g.board[[0]][x]-1+=g.board[[0]][y]*2-for(x,y):=g.board[0][:]\n}\n\nfunc (g *Game) updateNextTurn(lastPlay uint8,nextScoreer _scoreFunc){\n\n    for _,r := range g.board{{}}{{},g.board[:}{\n         g.board[r][:],\n         g.board[r][:])\n     }{\n\n        if sum(r)>lastPlay-nextScoreer(r)){\n            g.board[r][g.board[r]-1]+=1\n            g.addPoint(r,[nextScoreer])\n        }\n\n        \n\n    }\n}\n\nfunc (g *Game) checkForWinningChange(){\n\n    cSum := 0{}\n    for _,r := range g.board{{}}{{},g.board[:]}>\n        cSum += sum(r)\n    if cSum>len(g.board)/2{return true}\n}\n\nfunc (g *Game) finalScore(){\n    for _,r := range g.board{{}}{{},g.board[:]}\n        g.board[r][(r+len(g.board))-1]+=g.board[r][len(g.board)-(r+len(g.board))]+\n        g.board[r][len(g.board)]-=g.board[r][len(g.board)-(r)][:]\n\n        g.finalScore()\n}\n\n\n\n\n\n\n\n\n\nfunc (g *Game) validMove(m uint8) (bool,bool){\n    if m>=len(g.board)||m<0{return false,false}\n    if m==0||(g.board[m][0]!=0 && g.board[m][0]==g.board[m][1]){\n        return false,true}\n    if g.board[m][m-len(g.board)]!=0||\n        g.board[m][m+(len(g.board)-1-m)>=len(g.board)&&g.board[m][m-(len(g.board)-1+m)]}>\n       70{return false,false}}\n\n    return true,true\n}\n\n\n\n\n\n\n\nfunc (g *Game) randomMove() (uint8,uint8){\n    for i := uint8(len(g.board));i--;rand.Int()%2==0{return i,rand.Int()%9+i;}\n}\n\n\n\n\n\nfunc (g *Game) getUniqueValueAt(pos []uint64) uint64{\n    for x,pos[x]=range pos;x<len(g.board)&&(pos[pos-x]<0)x=x-pos[pos-x];{\n        pos[pos+x]=-pos[pos+x]\n    }\n    return pos[len(pos)-1]\n\n\n\n\n\n\n\n\nfunc (g *Game) setUniqueValues(pos []uint64){}\nfunc (g *Game) setNonUniqueValues(pos []uint64){\n\n\nfor x,pos[x]=(pos[pos-x])<-1,x<len(g.board):-1{}\n\n\n\n\n\n\n\n\n\n\n    for y,pop[y]<<=0;y<pop[y]>",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 269,
    "input": "Translate C to Python:#include <stdio.h>\n\nvoid transpose(void *dest, void *src, int src_h, int src_w)\n{\n\tint i, j;\n\tdouble (*d)[src_h] = dest, (*s)[src_w] = src;\n\tfor (i = 0; i < src_h; i++)\n\t\tfor (j = 0; j < src_w; j++)\n\t\t\td[j][i] = s[i][j];\n}\n\nint main()\n{\n\tint i, j;\n\tdouble a[3][5] = {{ 0, 1, 2, 3, 4 },\n\t\t\t  { 5, 6, 7, 8, 9 },\n\t\t\t  { 1, 0, 0, 0, 42}};\n\tdouble b[5][3];\n\ttranspose(b, a, 3, 5);\n\n\tfor (i = 0; i < 5; i++)\n\t\tfor (j = 0; j < 3; j++)\n\t\t\tprintf(\"%g%c\", b[i][j], j == 2 ? '\\n' : ' ');\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def matrix_multiplication(A,b):\n    assert len(A) == len(B) == len(C), \\\n        \"The dimensions of A, B, and C must be equal\"\n    c = [sum(ah*bw byc for ah, bw, cb in zip(A, B, C))]\n    return c\n\nA, B, C = [[0, 1, 2], [1, 0, 1], [2, 4, 6]]\nprint(matrix_multiplication(A,B,C))\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 270,
    "input": "Translate C to Go:#include <stdio.h>\n\n#define MAX 15\n\nint count_divisors(int n) {\n    int i, count = 0;\n    for (i = 1; i * i <= n; ++i) {\n        if (!(n % i)) {\n            if (i == n / i)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return count;\n}\n\nint main() {\n    int i, next = 1;\n    printf(\"The first %d terms of the sequence are:\\n\", MAX);\n    for (i = 1; next <= MAX; ++i) {\n        if (next == count_divisors(i)) {           \n            printf(\"%d \", i);\n            next++;\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc divCheck(x, y int) bool {\n    defer func() {\n        recover()\n    }()\n    x /= y\n    return x == y\n}\n\nfunc main() {\n    fmt.Println(divCheck(3, 2))\n    fmt.Println(divCheck(3, 0.0))\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 271,
    "input": "Translate C to Python:#include <stdio.h>\n#include <termios.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/time.h>\n \nvoid set_mode(int want_key)\n{\n\tstatic struct termios old, new;\n\tif (!want_key) {\n\t\ttcsetattr(STDIN_FILENO, TCSANOW, &old);\n\t\treturn;\n\t}\n \n\ttcgetattr(STDIN_FILENO, &old);\n\tnew = old;\n\tnew.c_lflag &= ~(ICANON);\n\ttcsetattr(STDIN_FILENO, TCSANOW, &new);\n}\n \nint get_key(int no_timeout)\n{\n\tint c = 0;\n\tstruct timeval tv;\n\tfd_set fs;\n\ttv.tv_usec = tv.tv_sec = 0;\n \n\tFD_ZERO(&fs);\n\tFD_SET(STDIN_FILENO, &fs);\n\n\tselect(STDIN_FILENO + 1, &fs, 0, 0, no_timeout ? 0 : &tv);\n\tif (FD_ISSET(STDIN_FILENO, &fs)) {\n\t\tc = getchar();\n\t\tset_mode(0);\n\t}\n\treturn c;\n}\n \nint main()\n{\n\tint c;\n\twhile(1) {\n\t\tset_mode(1);\n\t\twhile (get_key(0)); \n\t\tprintf(\"Prompt again [Y/N]? \");\n\t\tfflush(stdout);\n\n\t\tc = get_key(1);\n\t\tif (c == 'Y' || c == 'y') {\n\t\t\tprintf(\"\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (c == 'N' || c == 'n') {\n\t\t\tprintf(\"\\nDone\\n\");\n\t\t\tbreak;\n\t\t}\n\n\t\tprintf(\"\\nYes or no?\\n\");\n\t}\n\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import sys\n\ndef is_abc(n):\n    return n in (100, 101, 102)\n\nif __name__==\"__main__\":\n    if len(sys.argv)>1:\n        try:\n            s=float(sys.argv[-1])\n        except ValueError as e:            \n            print(e.args[0], file=sys.stderr)\n            raise\n    else:\n        s=0.01\n    if is_abc(s):\n        print(\"%g is an anticlockwise rotation of %g through %g degrees.\" %\n              (-90*s), file=sys.stderr)\n    elif is_abc(-s):\n        print(\"%g is a clockwise rotation of %g degrees.\" %(s,-90))\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 272,
    "input": "Translate Python to C#:[print(\"( \" + \"1\"*i + \"3 ) ^ 2 = \" + str(int(\"1\"*i + \"3\")**2)) for i in range(0,8)]\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nnamespace exponents\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Math.Pow(Math.Pow(5, 3), 2));\n            Console.WriteLine(Math.Pow(5, Math.Pow(3, 2)));\n            Console.Read();\n        }\n\n    }\n}\n",
    "input_language": "Python",
    "output_language": "C#"
  },
  {
    "id": 273,
    "input": "Translate C to Python:#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdlib.h>\n\n#define MAX(x,y) ((x) > (y) ? (x) : (y))\n#define MIN(x,y) ((x) < (y) ? (x) : (y)) \n\n\nsize_t base20(unsigned int n, uint8_t *out) {\n    \n    uint8_t *start = out;\n    do {*out++ = n % 20;} while (n /= 20);\n    size_t length = out - start;\n    \n    \n    while (out > start) {\n        uint8_t x = *--out;\n        *out = *start;\n        *start++ = x;\n    }\n    return length;\n}\n\n\nvoid make_digit(int n, char *place, size_t line_length) {\n    static const char *parts[] = {\"    \",\" .  \",\" .. \",\"... \",\"....\",\"----\"};\n    int i;\n\n    \n    for (i=4; i>0; i--, n -= 5)\n        memcpy(place + i*line_length, parts[MAX(0, MIN(5, n))], 4);\n        \n    \n    if (n == -20) place[4 * line_length + 1] = '@';\n}\n\n\nchar *mayan(unsigned int n) {\n    if (n == 0) return NULL; \n    \n    uint8_t digits[15]; \n    size_t n_digits = base20(n, digits);\n    \n    \n    size_t line_length = n_digits*5 + 2;\n    \n    \n    char *str = malloc(line_length * 6 + 1);\n    if (str == NULL) return NULL;\n    str[line_length * 6] = 0;\n    \n    \n    char *ptr;\n    unsigned int i;\n    \n    for (ptr=str, i=0; i<line_length; i+=5, ptr+=5) \n        memcpy(ptr, \"+----\", 5);\n    memcpy(ptr-5, \"+\\n\", 2);\n    memcpy(str+5*line_length, str, line_length);\n    \n    for (ptr=str+line_length, i=0; i<line_length; i+=5, ptr+=5)\n        memcpy(ptr, \"|    \", 5);\n    memcpy(ptr-5, \"|\\n\", 2);\n    memcpy(str+2*line_length, str+line_length, line_length);\n    memcpy(str+3*line_length, str+line_length, 2*line_length);\n\n    \n    for (i=0; i<n_digits; i++)\n        make_digit(digits[i], str+1+5*i, line_length);\n\n    return str;\n}\n        \nint main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, \"usage: mayan <number>\\n\");\n        return 1;\n    }\n    int i = atoi(argv[1]);\n    if (i <= 0) {\n        fprintf(stderr, \"number must be positive\\n\");\n        return 1;\n    }\n    char *m = mayan(i);\n    printf(\"%s\",m);\n    free(m);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def maya(n):\n    def go(base, num):\n        s = []\n        for _ in range(base):\n            s.append(1)\n        for part in xrange(num // 5):  \n            diff = (num - len(s)*5)/5 + 1\n            l = min(diff, len(s)-part)\n            for j in xrange(l):\n                s += [sum(s[j:i+5]) for i in xrange(diff)]\n            s += [t for t in s if t >= num]\n        return s\n\nprint \"%r\" % go(25, n)\n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 274,
    "input": "Translate C to C++:#include <stdio.h>\n\nint main() {\n    int i, gprev = 0;\n    int s[7] = {1, 2, 2, 3, 4, 4, 5};\n\n    \n    for (i = 0; i < 7; ++i) {\n\n        int curr = s[i];\n        int prev = 0;\n\n        if (i > 0 && curr == prev) printf(\"%d\\n\", i);\n        prev = curr;\n    }\n\n    \n    for (i = 0; i < 7; ++i) {\n        int curr = s[i];\n        if (i > 0 && curr == gprev) printf(\"%d\\n\", i);\n        gprev = curr;\n    }\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include<iostream>\nusing namespace std;\n\ntemplate<class T>\nclass matrix{\npublic:\n    matrix(int nRows,int nCols): \n      a(nRows),b(nCols),c(nRows*nCols){\n      \n      cout<<\"rows : \"<<a<<endl;\n      cout<<\"columns : \"<<b<<endl;\n      cout<<\"dimensions : \"<<c<< endl;\n   }\n  \nprivate:\n    int a,b,c;\n};\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 275,
    "input": "Translate Java to Python:public static void sort(int[] nums){\n\tfor(int currentPlace = 0;currentPlace<nums.length-1;currentPlace++){\n\t\tint smallest = Integer.MAX_VALUE;\n\t\tint smallestAt = currentPlace+1;\n\t\tfor(int check = currentPlace; check<nums.length;check++){\n\t\t\tif(nums[check]<smallest){\n\t\t\t\tsmallestAt = check;\n\t\t\t\tsmallest = nums[check];\n\t\t\t}\n\t\t}\n\t\tint temp = nums[currentPlace];\n\t\tnums[currentPlace] = nums[smallestAt];\n\t\tnums[smallestAt] = temp;\n\t}\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "def insertion_sort(L):\n    for i in xrange(1, len(L)):\n        j = i-1 \n        key = L[i]\n        while j >= 0 and L[j] > key:\n           L[j + 1] = L[j]\n           j -= 1\n       L[j + 1] = key\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 276,
    "input": "Translate C to C++:#include <stdio.h>\n\nvoid recurse(unsigned int i)\n{\n  printf(\"%d\\n\", i);\n  recurse(i+1); \n}\n\nint main()\n{\n  recurse(0);\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include <iostream>\nusing namespace std;\n\nvoid printMatrix(string name,\n                unsigned int nRows,\n                unsigned int nCols,\n                unsigned char matrix[nRows][nCols])\n{\n    if (matrix[0][0] == '\\r')\n        cout << endl << \"   \";\n    else {\n        cout << endl << \"\";\n    }\n\n    for (unsigned int r = 0; r < nRows; ++r) {\n\n        \n        for (unsigned int c = 0; c < nCols && matrix[r][c]; ++c) {\n            switch(matrix[r][c]) {\n                case 'R':\n                    cout << \"|\" << \"*\";\n                    break;\n                case 'H':  \n                    cout << \"|\";\n                    break;\n                case '_':\n                    \n                    continue;\n                default:\n                        cout << \"|\" << \"_|_\";\n                        break;\n            }\n            \n            cout.width((size_t)(3 + ((double)nCols - 4)*col / nCols), '*');\n        } \n        \n        cout.println(\"|\");\n    }\n    \n    cout << endl;\n}\n",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 277,
    "input": "Translate Python to Go:def no_args():\n    pass\n\nno_args()\n\ndef fixed_args(x, y):\n    print('x=%r, y=%r' % (x, y))\n\nfixed_args(1, 2)        \n\n\nfixed_args(y=2, x=1)\n\n\nmyargs=(1,2) \nfixed_args(*myargs)\n\ndef opt_args(x=1):\n    print(x)\n\nopt_args()              \nopt_args(3.141)         \n\ndef var_args(*v):\n    print(v)\n\nvar_args(1, 2, 3)       \nvar_args(1, (2,3))      \nvar_args()              \n\n\nfixed_args(y=2, x=1)    \n\n\nif 1:\n    no_args()\n\n\nassert no_args() is None\n\ndef return_something():\n    return 1\nx = return_something()\n\ndef is_builtin(x):\n\tprint(x.__name__ in dir(__builtins__))\n\nis_builtin(pow)         \nis_builtin(is_builtin)  \n\n\n\ndef takes_anything(*args, **kwargs):\n    for each in args:\n        print(each)\n    for key, value in sorted(kwargs.items()):\n        print(\"%s:%s\" % (key, value))\n    \n    wrapped_fn(*args, **kwargs)\n    \n    \n\n\n\n\n\n\n\n\n\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc foo(w string) {\n\tfmt.Println(\"Inside function foo.\")\n\tfmt.Printf(\"Wrote this message: $w\\n\")\n}\n\nfunc bar() int {\n\tfmt.Println(\"Inside function bar.\")\n\n\treturn 0 // a type declaration\n}\n\nfunc main() {\n\tfoo(\"This is a test\")\n\tbar()\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 278,
    "input": "Translate PHP to Python:<?php\n  $code = 'echo \"hello world\"';\n  eval($code);\n  $code = 'return \"hello world\"';\n  print eval($code);\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "import sys\n\ndef main():\n    program, line_number, text = sys.argv[1:4]\n    if len(text)!= int(line_number):\n        raise ValueError(f\"Line number {line_number} has incorrect length ({len(text)} vs. expected {int(line_number)})\")\n    try:\n        assert line_number == int(sys.stdin.fileno())\n        print(text)\n    except Exception as reason:\n        print(f\"{program}:{line_number}-error: {reason}\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "input_language": "PHP",
    "output_language": "Python"
  },
  {
    "id": 279,
    "input": "Translate Python to Go:from primesieve.numpy import primes\nfrom math import isqrt\nimport numpy as np\n\nmax_order = 9\nblocks = [primes(10**n, 10**(n + 1)) for n in range(max_order)]\n\ndef smallest_brilliant(lb):\n    pos = 1\n    root = isqrt(lb)\n\n    for blk in blocks:\n        n = len(blk)\n        if blk[-1]*blk[-1] < lb:\n            pos += n*(n + 1)//2\n            continue\n\n        i = np.searchsorted(blk, root, 'left')\n        i += blk[i]*blk[i] < lb\n\n        if not i:\n            return blk[0]*blk[0], pos\n\n        p = blk[:i + 1]\n        q = (lb - 1)//p\n        idx = np.searchsorted(blk, q, 'right')\n\n        sel = idx < n\n        p, idx = p[sel], idx[sel]\n        q = blk[idx]\n\n        sel = q >= p\n        p, q, idx = p[sel], q[sel], idx[sel]\n\n        pos += np.sum(idx - np.arange(len(idx)))\n        return np.min(p*q), pos\n\nres = []\np = 0\nfor i in range(100):\n    p, _ = smallest_brilliant(p + 1)\n    res.append(p)\n\nprint(f'first 100 are {res}')\n\nfor i in range(max_order*2):\n    thresh = 10**i\n    p, pos = smallest_brilliant(thresh)\n    print(f'Above 10^{i:2d}: {p:20d} at \n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\n\t\n\tvar powModBig *big.Int\n\t\n\tfunc newPowModBig() {\n\t\tpowModBig = big.NewInt(0)\n\t}\n\t\n\t\nfunc PowM(b *big.Int) (*big.Int, error) {\n\tnewPowModBig()\n\tr := big.NewInt(1)\n\tb.Exp(&r, &powModBig, nil)\n\treturn r, b.Div(r, b)\n}\n\nfunc Main() {\n\tfmt.Println(\"Numbers up to 200 digits:\\n\")\n\tfor n := int64(1); n <= 199; n++ {\n\t\tres := fmt.Sprintf(\"%d\", n)\n\t\tm := PowM(big.NewInt(n))\n\t\tif m.Cmp(res) == 0 {\n\t\t\tfmt.Printf(\"%3d %6s %7s\\n\",\n\t\t\t\tn,\n\t\t\t\tres,\n\t\t\t\tm.String(),\n\t\t\t)\n\t\t}\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 280,
    "input": "Translate C to C++:#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\nint flag = 1;\n\nvoid heapPermute(int n, int arr[],int arrLen){\n\tint temp;\n\tint i;\n\t\n\tif(n==1){\n\t\tprintf(\"\\n[\");\n\t\t\n\t\tfor(i=0;i<arrLen;i++)\n\t\t\tprintf(\"%d,\",arr[i]);\n\t\tprintf(\"\\b] Sign : %d\",flag);\n\t\t\n\t\tflag*=-1;\n\t}\n\telse{\n\t\tfor(i=0;i<n-1;i++){\n\t\t\theapPermute(n-1,arr,arrLen);\n\t\t\t\n\t\t\tif(n%2==0){\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[n-1];\n\t\t\t\tarr[n-1] = temp;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttemp = arr[0];\n\t\t\t\tarr[0] = arr[n-1];\n\t\t\t\tarr[n-1] = temp;\n\t\t\t}\n\t\t}\n\t\theapPermute(n-1,arr,arrLen);\n\t}\n}\n\nint main(int argC,char* argV[0])\n{\n\tint *arr, i=0, count = 1;\n\tchar* token;\n\t\n\tif(argC==1)\n\t\tprintf(\"Usage : %s <comma separated list of integers>\",argV[0]);\n\telse{\n\t\twhile(argV[1][i]!=00){\n\t\t\tif(argV[1][i++]==',')\n\t\t\t\tcount++;\n\t\t}\n\t\t\n\t\tarr = (int*)malloc(count*sizeof(int));\n\t\t\n\t\ti = 0;\n\t\t\n\t\ttoken = strtok(argV[1],\",\");\n\t\t\n\t\twhile(token!=NULL){\n\t\t\tarr[i++] = atoi(token);\n\t\t\ttoken = strtok(NULL,\",\");\n\t\t}\n\t\t\n\t\theapPermute(i,arr,count);\n\t}\n\t\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C++ code.",
    "output": "#include<iostream>\nusing namespace std;\n\ntemplate<class T>\nclass tree\n{\n    T value;\n    char _left, _right ;\npublic :\n    tree( T new_value ) {\n        value = new_value ; \n        _left = _right = 0; } ;\n    void setLeft( T new_left) {\n        if( _left == 0) { _left = new_left ; }\n        else{ _left = tree<T>(new_left); _left =_left ; } } ;\n    void setRight( T new_right) {\n        if( _right == 0) { _right = new_right ; }\n        else{ _right = tree<T>(new_right); _right = right ; }\n        else{ _left = tree<T>(value); _left = left ; }\n        } ;\n    T getLeft() {\n        return left ; }\n    T getRight() {\n        return right ; }\nprivate:\n};\n\ntypedef tree<char> characterTree ;\ncharacterTree tree_casting(char c )\n{\n    characterTree t ;\n    \n    switch( c ){\n        case 'a' :  t.value = 'A'; break ;\n        case 'b' :  t.value = 'B'; break ;\n        case 'c' :  t.value = 'C'; break ;\n        default  : t.setLeft(new characterTree( \"unknown\" ));  \n                   t.setRight(new characterTree(c));   }\n\n    return t ;\n}\n\n\nint main()\n{\n    characterTree root = tree_casting('7') ;\n   \n   cout << \"postfix expression : = \" <<\n         root.getLeft()->getRight()*root.getLeft()->getValue()+root.getValue()*root.getRight()->getValue()<<\"\n\\n\" ;\n\n   string post = \"(A(B(C))((D(e)(0))) + ((H(I))(G(g))))\";\n   cout << \" postfix expression : = \" << post << endl ;\n   tree<string> treeCast(string s) {\n       tree<string> t ;\n       \n       stringstream ss(s) ;\n       string str ;\n       while(ss >>str) {\n           t = tree_casting(str) ;\n           if(!t.empty()) t.build();\n       }\n       return t ;\n   }\n   string pre = \"(ABCD(E(F(G(h(a(b(c(d(musbo))p(r(v(saunder)))))))), B(D(A(C(B(t(u(H(p(j(k(l(|m(n(o(p(re)s(t(0))))))))), D(N(B(x(y(z(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b(b",
    "input_language": "C",
    "output_language": "C++"
  },
  {
    "id": 281,
    "input": "Translate C# to VB:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing static System.Console;\n\npublic enum Colour { Red, Green, White, Yellow, Blue }\npublic enum Nationality { Englishman, Swede, Dane, Norwegian,German }\npublic enum Pet { Dog, Birds, Cats, Horse, Zebra }\npublic enum Drink { Coffee, Tea, Milk, Beer, Water }\npublic enum Smoke { PallMall, Dunhill, Blend, BlueMaster, Prince}\n\npublic static class ZebraPuzzle\n{\n    private static (Colour[] colours, Drink[] drinks, Smoke[] smokes, Pet[] pets, Nationality[] nations) _solved;\n\n    static ZebraPuzzle()\n    {\n        var solve = from colours in Permute<Colour>()  \n                    where (colours,Colour.White).IsRightOf(colours, Colour.Green) \n                    from nations in Permute<Nationality>()\n                    where nations[0] == Nationality.Norwegian \n                    where (nations, Nationality.Englishman).IsSameIndex(colours, Colour.Red) \n                    where (nations,Nationality.Norwegian).IsNextTo(colours,Colour.Blue) \n                    from drinks in Permute<Drink>()\n                    where drinks[2] == Drink.Milk \n                    where (drinks, Drink.Coffee).IsSameIndex(colours, Colour.Green) \n                    where (drinks, Drink.Tea).IsSameIndex(nations, Nationality.Dane) \n                    from pets in Permute<Pet>()\n                    where (pets, Pet.Dog).IsSameIndex(nations, Nationality.Swede) \n                    from smokes in Permute<Smoke>()\n                    where (smokes, Smoke.PallMall).IsSameIndex(pets, Pet.Birds) \n                    where (smokes, Smoke.Dunhill).IsSameIndex(colours, Colour.Yellow) \n                    where (smokes, Smoke.Blend).IsNextTo(pets, Pet.Cats) \n                    where (smokes, Smoke.Dunhill).IsNextTo(pets, Pet.Horse) \n                    where (smokes, Smoke.BlueMaster).IsSameIndex(drinks, Drink.Beer) \n                    where (smokes, Smoke.Prince).IsSameIndex(nations, Nationality.German) \n                    where (drinks,Drink.Water).IsNextTo(smokes,Smoke.Blend) \n                    select (colours, drinks, smokes, pets, nations);\n\n        _solved = solve.First();\n    }\n    \n    private static int IndexOf<T>(this T[] arr, T obj) => Array.IndexOf(arr, obj);\n\n    private static bool IsRightOf<T, U>(this (T[] a, T v) right, U[] a, U v) => right.a.IndexOf(right.v) == a.IndexOf(v) + 1;\n\n    private static bool IsSameIndex<T, U>(this (T[] a, T v)x, U[] a, U v) => x.a.IndexOf(x.v) == a.IndexOf(v);\n\n    private static bool IsNextTo<T, U>(this (T[] a, T v)x, U[] a,  U v) => (x.a,x.v).IsRightOf(a, v) || (a,v).IsRightOf(x.a,x.v);\n\n    \n    public static IEnumerable<IEnumerable<T>> Permutations<T>(this IEnumerable<T> values)\n    {\n        if (values.Count() == 1)\n            return values.ToSingleton();\n\n        return values.SelectMany(v => Permutations(values.Except(v.ToSingleton())),(v, p) => p.Prepend(v));\n    }\n\n    public static IEnumerable<T[]> Permute<T>() => ToEnumerable<T>().Permutations().Select(p=>p.ToArray());\n\n    private static IEnumerable<T> ToSingleton<T>(this T item){ yield return item; }\n\n    private static IEnumerable<T> ToEnumerable<T>() => Enum.GetValues(typeof(T)).Cast<T>();\n\n    public static new String ToString()\n    {\n        var sb = new StringBuilder();\n        sb.AppendLine(\"House Colour Drink    Nationality Smokes     Pet\");\n        sb.AppendLine(\"───── ────── ──────── ─────────── ────────── ─────\");\n        var (colours, drinks, smokes, pets, nations) = _solved;\n        for (var i = 0; i < 5; i++)\n            sb.AppendLine($\"{i+1,5} {colours[i],-6} {drinks[i],-8} {nations[i],-11} {smokes[i],-10} {pets[i],-10}\");\n        return sb.ToString();\n    }\n\n    public static void Main(string[] arguments)\n    {\n        var owner = _solved.nations[_solved.pets.IndexOf(Pet.Zebra)];\n        WriteLine($\"The zebra owner is {owner}\");\n        Write(ToString());\n        Read();\n    }\n}\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main_Permutations()\n\nDim Col As Variant, P As New Collection, n As Integer\n    \n    Col = Array(\"\", \"A\", \"B\", \"C\")\n    For Each X In Col\n        If IsUnique(X, n) Then P.Add X\n    Next\n        \n    Debug.Print \"Number of permutations : \" & P.Count\n    Erase P\n    \n    \nEnd Sub\n\nFunction IsUnique(strName As Variant, n As Integer) As Boolean\n\n\nDim i&, t$\n    For i = LBound(P) To UBound(P)\n        If StrReverse(P(i)) = strName And i <> 0 Then Exit Function\n        For t = IToFloat(LBound(P)) To UIncr(t) Tie : P.Remove(CLng(t))\n    Next\n    IsUnique = Not P.Count > 0\n\n    \nEnd Function \n\n",
    "input_language": "C#",
    "output_language": "VB"
  },
  {
    "id": 282,
    "input": "Translate C++ to Java:#include <iostream>\n#include <cctype>\n#include <functional>\n\nusing namespace std;\n\nbool odd()\n{\n  function<void ()> prev = []{};\n  while(true) {\n    int c = cin.get();\n    if (!isalpha(c)) {\n      prev();\n      cout.put(c);\n      return c != '.';\n    }\n    prev = [=] { cout.put(c); prev();  };\n  }\n}\n\nbool even() \n{\n  while(true) {\n    int c;\n    cout.put(c = cin.get());\n    if (!isalpha(c)) return c != '.';\n  }\n}\n\n\nint main()\n{\n  bool e = false;\n  while( e ? odd() : even() ) e = !e;\n  return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void doStuff(String word){\n\t   System.out.println(word + \" (which is long and pretty)\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner in = new Scanner(System.in);\n\n\t\tSystem.out.print(\"Which word do you want to find? \");\n\t\tString input = in.nextLine();\n\n\t\t\n\t\t\n\t\tdoStuff(input);\n\t}\n}\n",
    "input_language": "C++",
    "output_language": "Java"
  },
  {
    "id": 283,
    "input": "Translate C++ to Python:#include <iostream>\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n\n    if (n % 2 == 0) {\n        return n == 2;\n    }\n    if (n % 3 == 0) {\n        return n == 3;\n    }\n\n    int i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return false;\n        }\n        i += 2;\n\n        if (n % i == 0) {\n            return false;\n        }\n        i += 4;\n    }\n\n    return true;\n}\n\nint main() {\n    const int start = 1;\n    const int stop = 1000;\n\n    int sum = 0;\n    int count = 0;\n    int sc = 0;\n\n    for (int p = start; p < stop; p++) {\n        if (is_prime(p)) {\n            count++;\n            sum += p;\n            if (is_prime(sum)) {\n                printf(\"The sum of %3d primes in [2, %3d] is %5d which is also prime\\n\", count, p, sum);\n                sc++;\n            }\n        }\n    }\n    printf(\"There are %d summerized primes in [%d, %d)\\n\", sc, start, stop);\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from itertools import chain\n\ndef all_primes():\n    \n    c = []\n    \n\n    \n    \n    yield 2\n    \n\n    \n    \n    \n    def _next(n):\n        l = len(c)\n        \n        if n >= l:\n            raise StopIteration\n        \n        \n        \n        \n        \n        \n        d = n - l\n        assert d >= 0 \n        return lambda: c.append(d + l)\n\n    c.append(1)\n    next_ = _next\n    \n    try:\n        while True:\n            \n            yield from next_()\n    finally:\n        del(next_)\n        \n\ndef first_hundred():\n    \n    s = 2\n    t = 97\n    e = 0\n    f = None\n    print(f\"First {str(t)} thousand numbers:\\n\")\n    while e < t:\n        n = s + 1\n        m = min(s // 5, 10)\n        v = max(s % 15, 1)\n        w = range(v)\n        h = set(w**2 + 11*w+6)\n        u = h.pop(0)\n        j = 0\n        k = 1\n        while k < len(m):  \n            \n            \n                \n            if ((u in h or u in m) and n not in f):\n                \n                \n                \n                f.add(n)\n                if n > s:\n                    print(\"%2i |%9s => %i + 5*%i |+|%2i \\n\" %\n                        (j + 1,\n                         '' if n!= s else '',\n                         n,\n                         s + 5,\n                         u))\n                s += 1\n            elif n > s:\n                s = n\n            j+= 1\n            if(j >= k):\n                k= 0\n                u = v\n\n\nif __name__ == '__main__':\n    all_primes()\n",
    "input_language": "C++",
    "output_language": "Python"
  },
  {
    "id": 284,
    "input": "Translate Python to Go:import os\ntargetfile = \"pycon-china\"\nos.rename(os.path.realpath(targetfile), os.path.realpath(targetfile)+\".bak\")\nf = open(os.path.realpath(targetfile), \"w\")\nf.write(\"this task was solved during a talk about rosettacode at the PyCon China in 2011\")\nf.close()\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n)\n\nfunc main() {\n    \n    backup, err := ioutil.ReadFile(\"/etc/pam.d/login\")\n    if err!= nil {\n        log.Fatal(err)\n    }\n    \n    \n    fmt.Println(string(backup))\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 285,
    "input": "Translate C to Java:#include <stdio.h>\n#include <ctype.h>\n\nstatic int \nowp(int odd)\n{\n        int ch, ret;\n        ch = getc(stdin);\n        if (!odd) {\n                putc(ch, stdout);\n                if (ch == EOF || ch == '.')\n                        return EOF;\n                if (ispunct(ch))\n                        return 0;\n                owp(odd);\n                return 0;\n        } else {\n                if (ispunct(ch))\n                        return ch; \n                ret = owp(odd);\n                putc(ch, stdout);\n                return ret;\n        }\n}\n\nint\nmain(int argc, char **argv)\n{\n        int ch = 1;\n        while ((ch = owp(!ch)) != EOF) {\n                if (ch)\n                        putc(ch, stdout);\n                if (ch == '.')\n                        break;\n        }\n        return 0;\n}\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in); \n        System.out.println(in.nextInt() * in.nextDouble()); \n    }\n}\n",
    "input_language": "C",
    "output_language": "Java"
  },
  {
    "id": 286,
    "input": "Translate PHP to Go:<?php\nclass Node {\n    public $val;\n    public $back = NULL;\n}\n\nfunction lis($n) {\n    $pileTops = array();\n\n    foreach ($n as $x) {\n\n        $low = 0; $high = count($pileTops)-1;\n        while ($low <= $high) {\n            $mid = (int)(($low + $high) / 2);\n            if ($pileTops[$mid]->val >= $x)\n                $high = $mid - 1;\n            else\n                $low = $mid + 1;\n        }\n        $i = $low;\n        $node = new Node();\n        $node->val = $x;\n        if ($i != 0)\n            $node->back = $pileTops[$i-1];\n        $pileTops[$i] = $node;\n    }\n    $result = array();\n    for ($node = count($pileTops) ? $pileTops[count($pileTops)-1] : NULL;\n         $node != NULL; $node = $node->back)\n        $result[] = $node->val;\n\n    return array_reverse($result);\n}\n\nprint_r(lis(array(3, 2, 6, 4, 5, 1)));\nprint_r(lis(array(0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15)));\n?>\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport \"fmt\"\n\nfunc lcs(a, b []byte) (longest int, char byte) {\n    aLen := len(a)\n    bLen := len(b)\n    if aLen == 0 || bLen == 0 {\n        return 0, ''\n    } \n    this := a[0]\n    for i := 1; ; i++ {\n        if a[i] == b[0] {\n            j := 1\n            for j.i = 1;i < bLen;i++ {\n                if a[i] == b[j+i] {\n                    this = a[i]\n                    j += 1\n                    if j > i {\n                        long := j-i\n                        break\n                    }\n                } else {\n                    break\n                }\n            }\n        }\n        if j == i {\n            continue\n        }\n        \n        longest = max(longer, longer+j+1)\n        lower := a[:i]+b[j:]\n        char = lower[0]\n        longer, lower = longer, lower[1:]\n        err := cmp(lower, higher)\n        if err == 0 {break}\n    }\n    return longest, char\n}\n\n\nvar testCases = [\n    {\"input\": []byte(\"thisisatest\", \"test\"), \"output\": 6},\n    {\"input\": [\"a\",\"aa\"], \"output\": 2,\n     \"note\": \"The substring 'a' is only of length 1.\"},\n    {\"input\": [], \"output\": 0,\n     \"note\": \"There cannot be any empty string in your answer\"},\n]\n\nfor _, tc := range testCases {\n    tErr := fmt.Errorf()\n    sErr := fmt.Sprintf(\"%v.%v %v\",\n        tc.input[0], tc.input[1],\n        lcs(tc.input, tc.output))\n    switch e := tc.tErr.Error(); e!= nil, e!= sErr, tc.tErr == nil {\n        case!sErr.IsTypeOf(e):\n            \n            var n int\n            switch tc.tErr.Err() {\n            case nil:     \n                \n                n, tc.output = lcs(tc.input, tc.output), tc.output+\n                    (tc.input[len(tc.input)-1]-tc.input[0])\n            case error:\n                \n                \n                n, tc.output =\n                    len(tc.input)+len(string(tc.input[0]))-\n                    len(string(tc.input[tc.output]))\n                    \n            default:\n                \n                panic(n)\n            }\n\n            \n            \n        case tc.tErr.err() == sErr:\n            \n\n            mErr := fmt.Errorf(sErr, tc.output)\n            switch e := mErr.Error() {\n            case \"\" :\n                \n                pass\n            case tc.tErr.err() :\n                \n                fail(fmt.Sprintf(\"%v %v %v\",\n                    tc.input[0], tc.input[1],\n                    lcs(tc.input, tc.output)))\n            default:\n                \n                panics(mErr.err())\n            }\n    \n        default:\n        \n        \n        \n        \n        \n        case tc.tErr.err() == nil && mErr.err() == sErr:\n            \n            \n            f, ok := tc.tErr.(error)\n            if ok {\n                tc.tErr = &f\n            }\n        }\n        \n        if tc.tErr!= nil {\n            fmt.Println(\"\\tError:\", tc.tErr)\n        }\n        fmt.Printf(\"%d%s\\n\", n, tc.output)\n    }\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n\n\n\nfunc printLongestSubseq(strs []string) {\n    \n    \n    \n    \n    \n    strs = append(strs[], \"\")\n    le := 0\n    sub := make([]byte, len(strs[0]))\n\n    \n\n    \n    \n    \n    \n    for _, str := range strs {\n        \n        o := len(sub)\n        for i := 0; i < o; i++ {\n            c := str[i]\n            if sub[o-i] == c {\n                sub[o-i]++\n            } else {\n                s := make([]byte, len(sub) - o + 1)\n                copy(s, sub[:o])\n                dec := 0\n                k := 0\n                for j := 0; j < o; j++ {\n                    for kk := k; kk < len(s); kk++ {\n                        if s[kk] == c {\n                            k++\n                        }\n                    }\n                    if k > dec {\n                        dec = k\n                        start := j + o - 1\n                        copy(dsub[start-o, :], s)\n                    }\n                    k++\n                }\n                sub = dsub[:]\n                o = start\n            }\n        }\n    }\n\n\n    if le > len(strs)*max(len(strs), 1)/100{\n        fmt.Println(strings.Join(sub, \"\"))\n    }\n}\n\n\n\n\nconst input = `This is an example for LIS. \n\nIt contains some strings:\n\n\"rosetta code\", \"go programming language\"\n",
    "input_language": "PHP",
    "output_language": "Go"
  },
  {
    "id": 287,
    "input": "Translate C to Go:#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define BUFFER_SIZE 128\n\ntypedef unsigned char character;\ntypedef character *string;\n\ntypedef struct node_t node;\nstruct node_t {\n    enum tag_t {\n        NODE_LEAF,\n        NODE_TREE,\n        NODE_SEQ,\n    } tag;\n\n    union {\n        string str;\n        node *root;\n    } data;\n\n    node *next;\n};\n\nnode *allocate_node(enum tag_t tag) {\n    node *n = malloc(sizeof(node));\n    if (n == NULL) {\n        fprintf(stderr, \"Failed to allocate node for tag: %d\\n\", tag);\n        exit(1);\n    }\n    n->tag = tag;\n    n->next = NULL;\n    return n;\n}\n\nnode *make_leaf(string str) {\n    node *n = allocate_node(NODE_LEAF);\n    n->data.str = str;\n    return n;\n}\n\nnode *make_tree() {\n    node *n = allocate_node(NODE_TREE);\n    n->data.root = NULL;\n    return n;\n}\n\nnode *make_seq() {\n    node *n = allocate_node(NODE_SEQ);\n    n->data.root = NULL;\n    return n;\n}\n\nvoid deallocate_node(node *n) {\n    if (n == NULL) {\n        return;\n    }\n\n    deallocate_node(n->next);\n    n->next = NULL;\n\n    if (n->tag == NODE_LEAF) {\n        free(n->data.str);\n        n->data.str = NULL;\n    } else if (n->tag == NODE_TREE || n->tag == NODE_SEQ) {\n        deallocate_node(n->data.root);\n        n->data.root = NULL;\n    } else {\n        fprintf(stderr, \"Cannot deallocate node with tag: %d\\n\", n->tag);\n        exit(1);\n    }\n\n    free(n);\n}\n\nvoid append(node *root, node *elem) {\n    if (root == NULL) {\n        fprintf(stderr, \"Cannot append to uninitialized node.\");\n        exit(1);\n    }\n    if (elem == NULL) {\n        return;\n    }\n\n    if (root->tag == NODE_SEQ || root->tag == NODE_TREE) {\n        if (root->data.root == NULL) {\n            root->data.root = elem;\n        } else {\n            node *it = root->data.root;\n            while (it->next != NULL) {\n                it = it->next;\n            }\n            it->next = elem;\n        }\n    } else {\n        fprintf(stderr, \"Cannot append to node with tag: %d\\n\", root->tag);\n        exit(1);\n    }\n}\n\nsize_t count(node *n) {\n    if (n == NULL) {\n        return 0;\n    }\n\n    if (n->tag == NODE_LEAF) {\n        return 1;\n    }\n    if (n->tag == NODE_TREE) {\n        size_t sum = 0;\n        node *it = n->data.root;\n        while (it != NULL) {\n            sum += count(it);\n            it = it->next;\n        }\n        return sum;\n    }\n    if (n->tag == NODE_SEQ) {\n        size_t prod = 1;\n        node *it = n->data.root;\n        while (it != NULL) {\n            prod *= count(it);\n            it = it->next;\n        }\n        return prod;\n    }\n\n    fprintf(stderr, \"Cannot count node with tag: %d\\n\", n->tag);\n    exit(1);\n}\n\nvoid expand(node *n, size_t pos) {\n    if (n == NULL) {\n        return;\n    }\n\n    if (n->tag == NODE_LEAF) {\n        printf(n->data.str);\n    } else if (n->tag == NODE_TREE) {\n        node *it = n->data.root;\n        while (true) {\n            size_t cnt = count(it);\n            if (pos < cnt) {\n                expand(it, pos);\n                break;\n            }\n            pos -= cnt;\n            it = it->next;\n        }\n    } else if (n->tag == NODE_SEQ) {\n        size_t prod = pos;\n        node *it = n->data.root;\n        while (it != NULL) {\n            size_t cnt = count(it);\n\n            size_t rem = prod % cnt;\n            expand(it, rem);\n\n            it = it->next;\n        }\n    } else {\n        fprintf(stderr, \"Cannot expand node with tag: %d\\n\", n->tag);\n        exit(1);\n    }\n}\n\nstring allocate_string(string src) {\n    size_t len = strlen(src);\n    string out = calloc(len + 1, sizeof(character));\n    if (out == NULL) {\n        fprintf(stderr, \"Failed to allocate a copy of the string.\");\n        exit(1);\n    }\n    strcpy(out, src);\n    return out;\n}\n\nnode *parse_seq(string input, size_t *pos);\n\nnode *parse_tree(string input, size_t *pos) {\n    node *root = make_tree();\n\n    character buffer[BUFFER_SIZE] = { 0 };\n    size_t bufpos = 0;\n    size_t depth = 0;\n    bool asSeq = false;\n    bool allow = false;\n\n    while (input[*pos] != 0) {\n        character c = input[(*pos)++];\n        if (c == '\\\\') {\n            c = input[(*pos)++];\n            if (c == 0) {\n                break;\n            }\n            buffer[bufpos++] = '\\\\';\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        } else if (c == '{') {\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n            asSeq = true;\n            depth++;\n        } else if (c == '}') {\n            if (depth-- > 0) {\n                buffer[bufpos++] = c;\n                buffer[bufpos] = 0;\n            } else {\n                if (asSeq) {\n                    size_t new_pos = 0;\n                    node *seq = parse_seq(buffer, &new_pos);\n                    append(root, seq);\n                } else {\n                    append(root, make_leaf(allocate_string(buffer)));\n                }\n                break;\n            }\n        } else if (c == ',') {\n            if (depth == 0) {\n                if (asSeq) {\n                    size_t new_pos = 0;\n                    node *seq = parse_seq(buffer, &new_pos);\n                    append(root, seq);\n                    bufpos = 0;\n                    buffer[bufpos] = 0;\n                    asSeq = false;\n                } else {\n                    append(root, make_leaf(allocate_string(buffer)));\n                    bufpos = 0;\n                    buffer[bufpos] = 0;\n                }\n            } else {\n                buffer[bufpos++] = c;\n                buffer[bufpos] = 0;\n            }\n        } else {\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        }\n    }\n\n    return root;\n}\n\nnode *parse_seq(string input, size_t *pos) {\n    node *root = make_seq();\n\n    character buffer[BUFFER_SIZE] = { 0 };\n    size_t bufpos = 0;\n\n    while (input[*pos] != 0) {\n        character c = input[(*pos)++];\n        if (c == '\\\\') {\n            c = input[(*pos)++];\n            if (c == 0) {\n                break;\n            }\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        } else if (c == '{') {\n            node *tree = parse_tree(input, pos);\n            if (bufpos > 0) {\n                append(root, make_leaf(allocate_string(buffer)));\n                bufpos = 0;\n                buffer[bufpos] = 0;\n            }\n            append(root, tree);\n        } else {\n            buffer[bufpos++] = c;\n            buffer[bufpos] = 0;\n        }\n    }\n\n    if (bufpos > 0) {\n        append(root, make_leaf(allocate_string(buffer)));\n        bufpos = 0;\n        buffer[bufpos] = 0;\n    }\n\n    return root;\n}\n\nvoid test(string input) {\n    size_t pos = 0;\n    node *n = parse_seq(input, &pos);\n    size_t cnt = count(n);\n    size_t i;\n\n    printf(\"Pattern: %s\\n\", input);\n\n    for (i = 0; i < cnt; i++) {\n        expand(n, i);\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n\n    deallocate_node(n);\n}\n\nint main() {\n    test(\"~/{Downloads,Pictures}/*.{jpg,gif,png}\");\n    test(\"It{{em,alic}iz,erat}e{d,}, please.\");\n    test(\"{,{,gotta have{ ,\\\\, again\\\\, }}more }cowbell!\");\n\n    \n    \n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\n\t\"gonum.org/v1/gonum/mat\"\n)\n\nfunc main() {\n\tvar m mat.Dense\n\tfmt.Println(m.Rows)\n\tfor _, row := range []string{\n\t\t\"{X,Y,Z,X,Y,Z,...}\",\n\t\t\"`|`\",\n\t\t\"| `\",\n\t} {\n\t\t\n\t\tm.SetRows(strings.Fields(row))\n\t\tfmt.Printf(\"%+v\\n\", m.Formatted())\n\t}\n\t\n\t\n\tm.SetDense([]float64{-10000.00000001, -5000.00000002, -2500.00000001, \n\t\t-1000.000000012,   -500.000000016, -100.000000004,     -50.000000002, -25.000000001, -12.000000014,      -5.000000018},\n\t\t[]float64{-30000.00000003, -20000.0000002, -10000.00000019,  \n\t\t\t-9000.00000017, -6000.00000015, -4000.00000014, -3000.00000013, -2200.00000016, -1900.00000018})\n\tfmt.Println(mat.Formatted(&m))\n\n\t\n\t\n\t\n\ta := [][]float64{{0., 3., 6.}}\n\tb := [][]float64{{7., 8., 9.}}\n\n\tx := mat.NewDense(3, 4, nil, func(i int, j int, t float64) {})\n\ty := mat.NewDense(3, 4, b, x)\n\tz := mat.NewDense(3, 3, a, y)\n\tmat.Formatted(z)\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 288,
    "input": "Translate C++ to PHP:#include <Rcpp.h>\n#include <arpa/inet.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nusing namespace Rcpp ;\n\n\nCharacterVector getNameInfo(std::string fqdn) {\n\n  struct addrinfo hints, *res, *res0;\n\tint error;\n\tchar host[NI_MAXHOST];\n\n  memset(&hints, 0, sizeof hints);\n\thints.ai_family = PF_UNSPEC;\n\thints.ai_socktype = SOCK_DGRAM;\n\n\terror = getaddrinfo(fqdn.c_str(), NULL, &hints, &res0);\n\tif (error) { return(NA_STRING);\t}\n\n  int i = 0 ;\n\tfor (res = res0; res; res = res->ai_next) {\n  \terror = getnameinfo(res->ai_addr, res->ai_addrlen,\n\t\t    host, sizeof host, NULL, 0, NI_NUMERICHOST);\n\t\tif (!error) { i++ ; }\n\t}\n\n  CharacterVector results(i) ;\n\n  i = 0;\n\n  for (res = res0; res; res = res->ai_next) {\n\t\terror = getnameinfo(res->ai_addr, res->ai_addrlen,\n\t\t    host, sizeof host, NULL, 0, NI_NUMERICHOST);\n\t\tif (!error) { results[i++] = host ; }\n\t}\n\n  freeaddrinfo(res0);\n\n  return(results) ;\n\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\n$socket = fsockopen('localhost', 256);\nfputs($socket, 'hello socket world');\nfclose($socket);\n\n\n$so = fsockopen('localhost', 256);\necho file_get_contents($so);\nfclose($so);\n\n\n\n$port = 12321;\n$conn = fsockopen('localhost', 256);\nsendline($conn, \"GET / HTTP/1.0\\n\");\nrecv($conn, $buf, 4096, SERIALIZABLE);\necho $buf;\n\n\n$fclose($conn);\n\n\n\n\n$SO = fsockopen('localhost', 256);\nconnect($SO, $port, 10);\nwhile(!feof($SO)) {\n    $line = fgets($SO);\n    echo \"$line\\n\";\n}\nclose($SO);\n\n\n",
    "input_language": "C++",
    "output_language": "PHP"
  },
  {
    "id": 289,
    "input": "Translate Python to Go:from collections import Counter\n\ndef cumulative_freq(freq):\n    cf = {}\n    total = 0\n    for b in range(256):\n        if b in freq:\n            cf[b] = total\n            total += freq[b]\n    return cf\n\ndef arithmethic_coding(bytes, radix):\n\n    \n    freq = Counter(bytes)\n\n    \n    cf = cumulative_freq(freq)\n\n    \n    base = len(bytes)\n\n    \n    lower = 0\n\n    \n    pf = 1\n\n    \n    \n    for b in bytes:\n        lower = lower*base + cf[b]*pf\n        pf *= freq[b]\n\n    \n    upper = lower+pf\n\n    pow = 0\n    while True:\n        pf //= radix\n        if pf==0: break\n        pow += 1\n\n    enc = (upper-1) // radix**pow\n    return enc, pow, freq\n\ndef arithmethic_decoding(enc, radix, pow, freq):\n\n    \n    enc *= radix**pow;\n\n    \n    base = sum(freq.values())\n\n    \n    cf = cumulative_freq(freq)\n\n    \n    dict = {}\n    for k,v in cf.items():\n        dict[v] = k\n\n    \n    lchar = None\n    for i in range(base):\n        if i in dict:\n            lchar = dict[i]\n        elif lchar is not None:\n            dict[i] = lchar\n\n    \n    decoded = bytearray()\n    for i in range(base-1, -1, -1):\n        pow = base**i\n        div = enc//pow\n\n        c  = dict[div]\n        fv = freq[c]\n        cv = cf[c]\n\n        rem = (enc - pow*cv) // fv\n\n        enc = rem\n        decoded.append(c)\n\n    \n    return bytes(decoded)\n\nradix = 10      \n\nfor str in b'DABDDB DABDDBBDDBA ABRACADABRA TOBEORNOTTOBEORTOBEORNOT'.split():\n    enc, pow, freq = arithmethic_coding(str, radix)\n    dec = arithmethic_decoding(enc, radix, pow, freq)\n\n    print(\"%-25s=> %19s * %d^%s\" % (str, enc, radix, pow))\n\n    if str != dec:\n    \traise Exception(\"\\tHowever that is incorrect!\")\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"math/big\"\n\t\"strconv\"\n)\n\n\nfunc encode(s string) []byte {\n\tif s == \"\" || strings.IsLetter(s) {\n\t\t\n\t\treturn []byte('z') \n\n\t}\n\tr := new(big.Int).SetString(s, 10)\n\tm := big.NewInt(26)\n\tfor r.BitLen() > 0 {\n\t\tr.DivMod(r, m, m)\n\t\tb := new(big.Int)\n\t\tb.Set(m)\n\t\tm.Add(m, m)\n\t\tif b.Bit(Rune(b.Uint64())) {\n\t\t\tcontinue \n\t\t} else {\n\t\t\t\n\t\t\tbreak  \n\t\t}\n\t}\n\t\n\ti := int(r.Bit((r.BitLen()) - 1))\n\tvar out [26]byte\n\tout[i] = 'a'\n\tfor j := 1; j <= 25; j++ {\n\t\tout[j] = 'z'-j + 'a'\n\t}\n\treturn out\n\t\n}\n\nvar testCases = [\n\t\"\"\n\t\"_\"\n\t\"D\"\n\t\"A\"\n]\n\n\nconst keySize = 32\n\n\nfunc decode(d []byte) (string, bool) {\n\ts := make([]byte, keySize)\n\tfor _, b := range d {\n\t\ts[Binaryihan.Rune(b)]++\n\t}\n\tk := byte(65)\n\tfor i := 0; i < keySize; i++ {\n\t\tj := int(s[i]-'a')]\n\t\tif s[i] >= 'a' && s[i] <= 'z' {\n\t\t\tj -= 26\n\t\t}\n\t\tif s[i], ok = strconv.Atoi(string(s[i])); ok {\n\t\t\tj += 26 * uint8(ok)-1\n\t\t}\n\t\t\n\t\t\n\t\tif s[i] >= 'A' && s[i] <= 'Z' {\n\t\t\t\n\t\t\t\n\t\t\ts[i]-=27\n\t\t}\n\t}\n\t\n\t\n\tc := new(big.Int)\n\tc.SetString(string(s), 10)\n\tm := new(big.Int)\n\tm.SetInt64(int64(keySize))\n\tfor c.BitR(0)) {\n\t\tc.ModPow(c, m, c)\n\t\tif!c.Bit(i) {break }\n\t\tm.Mul(m, m)\n\t}\n\tz := binaryihan.Encode(uint64(k), m)\n\treturn string(z), true\n}\n\n\ntype binaryihan struct{ bits [keysize]int }\n\n\nfunc (b *binaryihan) SetBit(p int) {\n\tb.bits[p]++\n\n}\n\n\n\nfunc (b *binaryihan) Bit(p int) bool {\n\treturn bit(b.bits[p])\n}\n\n\n\n\nfunc (b *binaryihan) Encode(n uint64) {\n\tb.bits[n&keysize] |= 1 << n>>4\n}\n\n\n\n\n\nfunc (b *binaryihan) Decode(a int) (uint64, error) {\n\tn := uint64(len(&bit(b.bits)))\n\ta >>= n\n\tx := a & ^bit(b.bits)[n]]\n\ty := x >> ((n<<2)-(int)(n)*3)/3\n\tbit(x, y-n)\n\treturn x, nil\n}\n\n\n\n\n\n\nfunc bit(bit *big.Int, pos int) bool {\n\tp := bit.Bit(pos)\n\treturn p > 0\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunc main() {\n\tfmt.Println(\"Encoded:\")\n\tfor _, t := range testCases {\n\t\te := encode(t)\n\t\tfmt.Printf(\"%q\\n\", e)\n\t}\n\tfmt.Println(\"\")\n\tfmt.Println(\"Decoded from:\")\n\tfor _, t := range testCases {\n\t\td, err := decode(e)\n\t\tif err!= nil {\n\t\t\tfmt.Printf(\"Error :%v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Printf(\"%q -> %q\\n\", e, d)\n\t}\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 290,
    "input": "Translate Python to Go:\nfrom unicodedata import name\n\n\ndef unicode_code(ch):\n    return 'U+{:04x}'.format(ord(ch))\n\n\ndef utf8hex(ch):\n    return \" \".join([hex(c)[2:] for c in ch.encode('utf8')]).upper()\n\n\nif __name__ == \"__main__\":\n    print('{:<11} {:<36} {:<15} {:<15}'.format('Character', 'Name', 'Unicode', 'UTF-8 encoding (hex)'))\n    chars = ['A', 'ö', 'Ж', '€', '𝄞']\n    for char in chars:\n        print('{:<11} {:<36} {:<15} {:<15}'.format(char, name(char), unicode_code(char), utf8hex(char)))\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tfor _, encoded := range []string{\n\t\t\"AAA\",\n\t\t\"A0\",\n\t\t\"a=0\",\n\t\t\"D9\",\n\t\t\"!II\",\n\t} {\n\t\tif dec, err := decode(encoded); err!= nil {\n\t\t\tlog.Println(err)\n\t\t} else {\n\t\t\tfmt.Printf(\"%12s -> %s\\n\", encoded, dec)\n\t\t}\n\t}\n\n\t\n\tfunc encode(s string) string {\n\t\tb64 := make([]byte, len(s))\n\t\tfor i, c := range s {\n\t\t\tb64[i] = [1]byte(c | 128)\n\t\t}\n\t\treturn b64ToString(b64)\n\t}\n\n\t\n\tfunc b64ToString(bits []byte) (str string) {\n\t\tvar buf bytes.Buffer\n\tfor i, bit := range bits {\n\t\tbuf.WriteByte(bit >> i & 255)\n\t\tif i < len(bits)-1 {\n\t\t\tbuf.WriteString(\", \")\n\t\t}\n\t}\n\tstr = buf.String()\n\treturn\n\tdec := func(str string) (result string) {\n\t\tvar out []byte\n\t\tfor i, c := range str {\n\t\t\tif c == '0' { \n\t\t\t\tout = append(out, byte(63-i) << uint(i&63))  \n\t\t\t} else if c == '1' {\n\t\t\t\t\n\t\t\t\t\tout = append(out, byte(127 + (i>>3)))\n\t\t\t\t\tout = append(out, byte((c<<4)&63)|uint(int(c)>>5))\n\t\t\t}\n\t\t}\n\t\treturn strings.Join(out, \"\")\n\t}\n\terr := fmt.Errorf(\"task 1\")\n\tlog.Fatal(err)\n}\n",
    "input_language": "Python",
    "output_language": "Go"
  },
  {
    "id": 291,
    "input": "Translate Java to Python:import java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MetallicRatios {\n\n    private static String[] ratioDescription = new String[] {\"Platinum\", \"Golden\", \"Silver\", \"Bronze\", \"Copper\", \"Nickel\", \"Aluminum\", \"Iron\", \"Tin\", \"Lead\"};\n    \n    public static void main(String[] args) {\n        int elements = 15;\n        for ( int b = 0 ; b < 10 ; b++ ) {\n            System.out.printf(\"Lucas sequence for %s ratio, where b = %d:%n\", ratioDescription[b], b);\n            System.out.printf(\"First %d elements: %s%n\", elements, lucasSequence(1, 1, b, elements));\n            int decimalPlaces = 32;\n            BigDecimal[] ratio = lucasSequenceRatio(1, 1, b, decimalPlaces+1);\n            System.out.printf(\"Value to %d decimal places after %s iterations : %s%n\", decimalPlaces, ratio[1], ratio[0]);\n            System.out.printf(\"%n\");\n        }\n        int b = 1;\n        int decimalPlaces = 256;\n        System.out.printf(\"%s ratio, where b = %d:%n\", ratioDescription[b], b);\n        BigDecimal[] ratio = lucasSequenceRatio(1, 1, b, decimalPlaces+1);\n        System.out.printf(\"Value to %d decimal places after %s iterations : %s%n\", decimalPlaces, ratio[1], ratio[0]);\n    }\n    \n    private static BigDecimal[] lucasSequenceRatio(int x0, int x1, int b, int digits) {\n        BigDecimal x0Bi = BigDecimal.valueOf(x0);\n        BigDecimal x1Bi = BigDecimal.valueOf(x1);\n        BigDecimal bBi = BigDecimal.valueOf(b);\n        MathContext mc = new MathContext(digits);\n        BigDecimal fractionPrior = x1Bi.divide(x0Bi, mc);\n        int iterations = 0;\n        while ( true ) {\n            iterations++;\n            BigDecimal x = bBi.multiply(x1Bi).add(x0Bi);\n            BigDecimal fractionCurrent = x.divide(x1Bi, mc);\n            if ( fractionCurrent.compareTo(fractionPrior) == 0 ) {\n                break;\n            }\n            x0Bi = x1Bi;\n            x1Bi = x;\n            fractionPrior = fractionCurrent;\n        }\n        return new BigDecimal[] {fractionPrior, BigDecimal.valueOf(iterations)};\n    }\n\n    private static List<BigInteger> lucasSequence(int x0, int x1, int b, int n) {\n        List<BigInteger> list = new ArrayList<>();\n        BigInteger x0Bi = BigInteger.valueOf(x0);\n        BigInteger x1Bi = BigInteger.valueOf(x1);\n        BigInteger bBi = BigInteger.valueOf(b);\n        if ( n > 0 ) {\n            list.add(x0Bi);\n        }\n        if ( n > 1 ) {\n            list.add(x1Bi);\n        }\n        while ( n > 2 ) {\n            BigInteger x = bBi.multiply(x1Bi).add(x0Bi);\n            list.add(x);\n            n--;\n            x0Bi = x1Bi;\n            x1Bi = x;\n        }\n        return list;\n    }\n    \n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        raise ValueError('n must be a positive integer')\n    if n == 2 or n == 3:\n        return True\n    elif n >=4:\n        sqrtn = sqrt(n)\n        for i in range(5, sqrtn + 1, 2):\n            if n%i == 0:\n                return False\n        \n        i_2_sqrtn = (int)(sqrt((float)n)) * 2 + 1\n        return True\n    \nif __name__ == '__main__':\n    primes = []\n    \n    \n    max_n = 1000000\n    mx_digits = 20\n    \n    \n    print('\\nPrimes of numbers less than',max_n,', whose digits can all be represented by an integer in [8, 12] are:\\n\\n')\n\n    for n in xrange(max_n):\n\n        \n        p = pow(2, n) - 1 \n        \n        \n        \n        factors = prime_factors(p)\n\n        \n        \n        \n        sum_of_digits = reduce(sum, factors, 0)\n        \n\n        if sum_of_digits in range(10), 80]:\n            \n            \n            \n            digits = str(sum_of_digits)\n            \n\n            if len(digits) == mx_digits:\n\n                \n                try:\n                    float(digits)\n                    \n                    primes.append(p)\n                except Exception as e:\n                    \n                    \n                    pass\n                    \n            else:\n                \n                \n                primes.append(p)\n\n\n    print(', '.join(str(prime) for prime in primes))\n",
    "input_language": "Java",
    "output_language": "Python"
  },
  {
    "id": 292,
    "input": "Translate Java to Go:public class FizzBuzz {\n\n    public static void main(String[] args) {\n        Sound[] sounds = {new Sound(3, \"Fizz\"), new Sound(5, \"Buzz\"),  new Sound(7, \"Baxx\")};\n        for (int i = 1; i <= 20; i++) {\n            StringBuilder sb = new StringBuilder();\n            for (Sound sound : sounds) {\n                sb.append(sound.generate(i));\n            }\n            System.out.println(sb.length() == 0 ? i : sb.toString());\n        }\n    }\n\n    private static class Sound {\n        private final int trigger;\n        private final String onomatopoeia;\n\n        public Sound(int trigger, String onomatopoeia) {\n            this.trigger = trigger;\n            this.onomatopoeia = onomatopoeia;\n        }\n\n        public String generate(int i) {\n            return i % trigger == 0 ? onomatopoeia : \"\";\n        }\n\n    }\n\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc fizz(b []byte) bool {\n\tvar a [2]int\n\tfor _, c := range b {\n\t\ta[c-'0']++\n\t}\n\tfor i, c := range a {\n\t\t\tif c == 0 && i%2 == 0 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif i%3 == c*3 {\n\t\t\t\tcontinue \n\t\t\t} else if i%3 == c*3+1 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true  \n\t}\n\treturn false   \n}\n\n\nvar testCases = [...][][]byte{\n\t{[]byte(\"000\", \"001\", \"010\")},\n\t{[]byte(\"100\", \"101\", \"110\"),\n\t    []byte(\"111\", \"112\", \"113\")},\n\t{[]byte{\"333\", \"334\", \"335\"},\n\t     []byte{\"444\", \"445\", \"446\"} },\n},\n\nfunc main() {\n\tfor _, tc := range testCases {\n\t\tfmt.Println(tc[0], \"->\", string(fizz(tc[0])))\n\t\tif!fuzz(tc[1],\n\t\t\ttc[0][1:], tc[2]) {\n\t\t\tfmt.Printf(\"\\tFuzzing returned False\\n\")\n\t\t } else {\n\t\t\tfmt.Print(string(fuzz(tc[1],\n\t\t\t\ttc[0][1:-1], tc[2])) + \"\\n\")\n\t\t}\n\t}\n\t\n\tfunc fuzz(a []byte,\n\t\tb []byte, c [][]byte) bool {\n\t\t\n\t\tswitch len([]byte(c)) {\n\t\tcase 0:\n\t\t\t\n\t\t\treturn bytes.Equal(a+b, c)\n\t\tcase 1:\n\t\t\t\n\t\t\t\n\t\t\treturn bytes.Compare(a+b[:len(c)], c[0], -1) == 0\n\t\tdefault:\n\n\t\t\t\n\t\t\tfor n := len(c); ; n++ {\n\t\t\t\t\n\t\t\t\tcr := make([]byte,n)\n\t\t\t\tcopy(cr,c[:n])\n\t\t\t\tfizz := fuzz(a,b,c)\n\t\t\t\tif!fuzz(cr,c,[n:]) ||!fizz {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\treturn false\n\t}\n}\n",
    "input_language": "Java",
    "output_language": "Go"
  },
  {
    "id": 293,
    "input": "Translate C to Go:#include <stdio.h>\n\nint min(int a, int b) {\n    if (a < b) return a;\n    return b;\n}\n\nint main() {\n    int n;\n    int numbers1[5] = {5, 45, 23, 21, 67};\n    int numbers2[5] = {43, 22, 78, 46, 38};\n    int numbers3[5] = {9, 98, 12, 98, 53};\n    int numbers[5]  = {};\n    for (n = 0; n < 5; ++n) {\n        numbers[n] = min(min(numbers1[n], numbers2[n]), numbers3[n]);\n        printf(\"%d \", numbers[n]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar values []float64 = [...]float64{\n\t\t4.0, 3.14159, 1.0,\n\t\tfloat64(10), float64(-4), float64(7),\n\t}\n\tfor _, v := range values {\n\t\tfmt.Printf(\"The minimum value between %g and %g is %.18f\\n\",\n\t\t\tv, values[len(values)-1]-values[0],\n\t\t\tvalues[0]+(values[lens(values)]-values[0])/100)\n\t}\n\t\n}\n",
    "input_language": "C",
    "output_language": "Go"
  },
  {
    "id": 294,
    "input": "Translate PHP to Java:<?php\nfile_put_contents('/dev/lp0', 'Hello world!');\n?>\n\nDo not return anything including notes and the like except for one translated Java code.",
    "output": "File file = new File(\"/foo/bar\");\n",
    "input_language": "PHP",
    "output_language": "Java"
  },
  {
    "id": 295,
    "input": "Translate PHP to VB:$string = \"The quick brown fox jumped over the lazy dog's back\";\necho md5( $string );\n\nDo not return anything including notes and the like except for one translated VB code.",
    "output": "Option Explicit\n\nSub Main()\nDim s As String, i As Integer\ns = \"http://foo bar/\"\ni = InStrRev(s, \"/\")\ns = Mid(s, i + 1)\nWScript.StdOut.WriteLine \"&\" & s\nWScript.StdOut.WriteLine \"|\"\nWScript.StdOut.WriteLine \"|\" & _\n    \"{\" & vbCrLf & \"} |\"\nWScript.StdOut.WriteLine \"|\"_ & vbCrLf\nWScript.StdOut.WriteLine \"| |___ |\"\nWScript.StdOut.WriteLine (\"|    | |\")\nWScript.StdOut.WriteLine ((\"&\" & s) & \"| ___ |\")\nWScript.StdOut.WriteLine (((\"\"\") & s) & \"|   |\")\nWScript.StdOut.WriteLine (((\"\"\"\") & s) & \"|_|\\ \")\nWScript.StdOut.WriteLine ((\"|    | |_||_|\")\nWScript.StdOut.WriteLine ((\"|\" & _())\nWScript.StdOut.WriteLine (\")|_____|\")\n\nEnd Sub\n",
    "input_language": "PHP",
    "output_language": "VB"
  },
  {
    "id": 296,
    "input": "Translate C++ to C#:#include <iostream>\n#include <iterator>\n#include <string>\n#include <utility>\n#include <vector>\n\nnamespace detail {\n\ntemplate <typename ForwardIterator>\nclass tokenizer\n{\n\t\n\tForwardIterator _tbegin, _tend, _end;\n\t\npublic:\n\t\n\ttokenizer(ForwardIterator begin, ForwardIterator end)\n\t\t: _tbegin(begin), _tend(begin), _end(end)\n\t{ }\n\t\n\ttemplate <typename Lambda>\n\tbool next(Lambda istoken)\n\t{\n\t\tif (_tbegin == _end) {\n\t\t\treturn false;\n\t\t}\n\t\t_tbegin = _tend;\n\t\tfor (; _tend != _end && !istoken(*_tend); ++_tend) {\n\t\t\tif (*_tend == '\\\\' && std::next(_tend) != _end) {\n\t\t\t\t++_tend;\n\t\t\t}\n\t\t}\n\t\tif (_tend == _tbegin) {\n\t\t\t_tend++;\n\t\t}\n\t\treturn _tbegin != _end;\n\t}\n\t\n\tForwardIterator begin() const { return _tbegin; }\n\tForwardIterator end()   const { return _tend; }\n\tbool operator==(char c) { return *_tbegin == c; }\n\t\n};\n\ntemplate <typename List>\nvoid append_all(List & lista, const List & listb)\n{\n\tif (listb.size() == 1) {\n\t\tfor (auto & a : lista) {\n\t\t\ta += listb.back();\n\t\t}\n\t} else {\n\t\tList tmp;\n\t\tfor (auto & a : lista) {\n\t\t\tfor (auto & b : listb) {\n\t\t\t\ttmp.push_back(a + b);\n\t\t\t}\n\t\t}\n\t\tlista = std::move(tmp);\n\t}\n}\n\ntemplate <typename String, typename List, typename Tokenizer>\nList expand(Tokenizer & token)\n{\n\t\n\tstd::vector<List> alts{ { String() } };\n\t\n\twhile (token.next([](char c) { return c == '{' || c == ',' || c == '}'; })) {\n\t\t\n\t\tif (token == '{') {\n\t\t\tappend_all(alts.back(), expand<String, List>(token));\n\t\t} else if (token == ',') {\n\t\t\talts.push_back({ String() });\n\t\t} else if (token == '}') {\n\t\t\tif (alts.size() == 1) {\n\t\t\t\tfor (auto & a : alts.back()) {\n\t\t\t\t\ta = '{' + a + '}';\n\t\t\t\t}\n\t\t\t\treturn alts.back();\n\t\t\t} else {\n\t\t\t\tfor (std::size_t i = 1; i < alts.size(); i++) {\n\t\t\t\t\talts.front().insert(alts.front().end(),\n\t\t\t\t\t\tstd::make_move_iterator(std::begin(alts[i])),\n\t\t\t\t\t\tstd::make_move_iterator(std::end(alts[i])));\n\t\t\t\t}\n\t\t\t\treturn std::move(alts.front());\n\t\t\t}\n\t\t} else {\n\t\t\tfor (auto & a : alts.back()) {\n\t\t\t\ta.append(token.begin(), token.end());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tList result{ String{ '{' } };\n\tappend_all(result, alts.front());\n\tfor (std::size_t i = 1; i < alts.size(); i++) {\n\t\tfor (auto & a : result) {\n\t\t\ta += ',';\n\t\t}\n\t\tappend_all(result, alts[i]);\n\t}\n\treturn result;\n}\n\n} \n\ntemplate <\n\ttypename ForwardIterator,\n\ttypename String = std::basic_string<\n\t\ttypename std::iterator_traits<ForwardIterator>::value_type\n\t>,\n\ttypename List = std::vector<String>\n>\nList expand(ForwardIterator begin, ForwardIterator end)\n{\n\tdetail::tokenizer<ForwardIterator> token(begin, end);\n\tList list{ String() };\n\twhile (token.next([](char c) { return c == '{'; })) {\n\t\tif (token == '{') {\n\t\t\tdetail::append_all(list, detail::expand<String, List>(token));\n\t\t} else {\n\t\t\tfor (auto & a : list) {\n\t\t\t\ta.append(token.begin(), token.end());\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}\n\ntemplate <\n\ttypename Range,\n\ttypename String = std::basic_string<typename Range::value_type>,\n\ttypename List = std::vector<String>\n>\nList expand(const Range & range)\n{\n\tusing Iterator = typename Range::const_iterator;\n\treturn expand<Iterator, String, List>(std::begin(range), std::end(range));\n}\n\nint main()\n{\n\t\n\tfor (std::string string : {\n\t\tR\"(~/{Downloads,Pictures}/*.{jpg,gif,png})\",\n\t\tR\"(It{{em,alic}iz,erat}e{d,}, please.)\",\n\t\tR\"({,{,gotta have{ ,\\, again\\, }}more }cowbell!)\",\n\t\tR\"({}} some {\\\\{edge,edgy} }{ cases, here\\\\\\})\",\n\t\tR\"(a{b{1,2}c)\",\n\t\tR\"(a{1,2}b}c)\",\n\t\tR\"(a{1,{2},3}b)\",\n\t\tR\"(a{b{1,2}c{}})\",\n\t\tR\"(more{ darn{ cowbell,},})\",\n\t\tR\"(ab{c,d\\,e{f,g\\h},i\\,j{k,l\\,m}n,o\\,p}qr)\",\n\t\tR\"({a,{\\,b}c)\",\n\t\tR\"(a{b,{{c}})\",\n\t\tR\"({a{\\}b,c}d)\",\n\t\tR\"({a,b{{1,2}e}f)\",\n\t\tR\"({}} some }{,{\\\\{ edge, edge} \\,}{ cases, {here} \\\\\\\\\\})\",\n\t\tR\"({{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{)\",\n\t}) {\n\t\tstd::cout << string << '\\n';\n\t\tfor (auto expansion : expand(string)) {\n\t\t\tstd::cout << \"    \" << expansion << '\\n';\n\t\t}\n\t\tstd::cout << '\\n';\n\t}\n\t\n\treturn 0;\n}\n\nDo not return anything including notes and the like except for one translated C# code.",
    "output": "using System;\n\nstatic class Program\n{\n    static void Main(string[] args)\n    {\n        var input = \"-ftvpy --help\";\n        Console.WriteLine(\"Syntax: \"+input);\n\n        input = \"\";\n        Console.WriteLine();\n\n        foreach (var line in File.ReadAllLines(\"/tmp/foo\"))\n            Console.WriteLine(line.TrimStart());\n\n        Console.ReadLine();\n    }\n}\n",
    "input_language": "C++",
    "output_language": "C#"
  },
  {
    "id": 297,
    "input": "Translate C to Python:#include <stdio.h>\n#include <gmp.h>\n\nvoid jacobsthal(mpz_t r, unsigned long n) {\n    mpz_t s;\n    mpz_init(s);\n    mpz_set_ui(r, 1);\n    mpz_mul_2exp(r, r, n);\n    mpz_set_ui(s, 1);\n    if (n % 2) mpz_neg(s, s);\n    mpz_sub(r, r, s);\n    mpz_div_ui(r, r, 3);\n}\n\nvoid jacobsthal_lucas(mpz_t r, unsigned long n) {\n    mpz_t a;\n    mpz_init(a);\n    mpz_set_ui(r, 1);\n    mpz_mul_2exp(r, r, n);\n    mpz_set_ui(a, 1);\n    if (n % 2) mpz_neg(a, a);\n    mpz_add(r, r, a);\n}\n\nint main() {\n    int i, count;\n    mpz_t jac[30], j;\n    printf(\"First 30 Jacobsthal numbers:\\n\");\n    for (i = 0; i < 30; ++i) {\n        mpz_init(jac[i]);\n        jacobsthal(jac[i], i);\n        gmp_printf(\"%9Zd \", jac[i]);\n        if (!((i+1)%5)) printf(\"\\n\");\n    }\n\n    printf(\"\\nFirst 30 Jacobsthal-Lucas numbers:\\n\");\n    mpz_init(j);\n    for (i = 0; i < 30; ++i) {\n        jacobsthal_lucas(j, i);\n        gmp_printf(\"%9Zd \", j);\n        if (!((i+1)%5)) printf(\"\\n\");\n    }\n\n    printf(\"\\nFirst 20 Jacobsthal oblong numbers:\\n\");\n    for (i = 0; i < 20; ++i) {\n        mpz_mul(j, jac[i], jac[i+1]);\n        gmp_printf(\"%11Zd \", j);\n        if (!((i+1)%5)) printf(\"\\n\");\n    }\n\n    printf(\"\\nFirst 20 Jacobsthal primes:\\n\");\n    for (i = 0, count = 0; count < 20; ++i) {\n        jacobsthal(j, i);\n        if (mpz_probab_prime_p(j, 15) > 0) {\n            gmp_printf(\"%Zd\\n\", j);\n            ++count;\n        }\n    }\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Python code.",
    "output": "from __future__ import print_function\n\ndef isPrime(n):\n    \n    if n == 2:\n        return True\n    elif n <= 1 or n%2==0:\n        return False\n    \n    else: \n        triu = [None]*(len(list(range(1,n-1)))//2)\n        for i in range(len(triu)):\n            triu[i] = 1\n        lastprimeindex= len(triu)-1\n        \n        for i in range(int((n-1)/2),(-1),-1):\n            p = triu[i]+triu[-i-1]\n            \n            if p >= n: break\n            \n            tril = triu[:p+1]\n            ltrii = triu[p:]\n            if sum(ltrii)==n:\n                primeindices = set([l in tril])\n                \n                if all(p!=q for p,q in zip(sorted(ltrii), sorted(primeindices))):\n                    return False\n                    \n        \n        return False\n\n\nif __name__==\"__main__\":\n    \n    \n    start_time = time.time()\n    \n    \n    \n    maxprimes = 30000  \n    primesfound = 0   \n    c = []\n    while(True): \n        \n        \n        \n        listofnumbers = str(random.randint(1000,99999))\n        \n        \n        \n        if(isPrime(int(listofnumbers))==True):\n            \n            \n            try:\n                \n                \n                primesfound += 1\n                \n                c.append(int(listofnumbers))\n\n                \n\n                if(primesfound>maxprimes/4 ):\n                    \n                    print('The first',round(time.time()-start_time,2),'seconds solution')\n                    \n                    \n                    print(str(c)[1:-1],'is an abbrv. for :',end='')\n                    print(round(time.time()-start_time,2),\"s\")\n                    \n\n                    \n                    \n                    exit()\n\n            except Exception as e:\n                 print(e)\n\n        \n\n        \n    \n",
    "input_language": "C",
    "output_language": "Python"
  },
  {
    "id": 298,
    "input": "Translate C to PHP:#include <stdio.h>\n#include <stdlib.h>\n\nchar chr_legal[] = \"abcdefghijklmnopqrstuvwxyz0123456789_-./\";\nint  chr_idx[256] = {0};\nchar idx_chr[256] = {0};\n\n#define FNAME 0\ntypedef struct trie_t *trie, trie_t;\nstruct trie_t {\n    trie next[sizeof(chr_legal)]; \n    int eow;\n};\n\ntrie trie_new() { return calloc(sizeof(trie_t), 1); }\n\n#define find_word(r, w) trie_trav(r, w, 1)\n\ntrie trie_trav(trie root, const char * str, int no_create)\n{\n    int c;\n    while (root) {\n        if ((c = str[0]) == '\\0') {\n            if (!root->eow && no_create) return 0;\n            break;\n        }\n        if (! (c = chr_idx[c]) ) {\n            str++;\n            continue;\n        }\n\n        if (!root->next[c]) {\n            if (no_create) return 0;\n            root->next[c] = trie_new();\n        }\n        root = root->next[c];\n        str++;\n    }\n    return root;\n}\n\n\nint trie_all(trie root, char path[], int depth, int (*callback)(char *))\n{\n    int i;\n    if (root->eow && !callback(path)) return 0;\n\n    for (i = 1; i < sizeof(chr_legal); i++) {\n        if (!root->next[i]) continue;\n\n        path[depth] = idx_chr[i];\n        path[depth + 1] = '\\0';\n        if (!trie_all(root->next[i], path, depth + 1, callback))\n            return 0;\n    }\n    return 1;\n}\n\nvoid add_index(trie root, const char *word, const char *fname)\n{\n    trie x = trie_trav(root, word, 0);\n    x->eow = 1;\n\n    if (!x->next[FNAME])\n        x->next[FNAME] = trie_new();\n    x = trie_trav(x->next[FNAME], fname, 0);\n    x->eow = 1;\n}\n\nint print_path(char *path)\n{\n    printf(\" %s\", path);\n    return 1;\n}\n\n\nconst char *files[] = { \"f1.txt\", \"source/f2.txt\", \"other_file\" };\nconst char *text[][5] ={{ \"it\", \"is\", \"what\", \"it\", \"is\" },\n                { \"what\", \"is\", \"it\", 0 },\n                { \"it\", \"is\", \"a\", \"banana\", 0 }};\n\ntrie init_tables()\n{\n    int i, j;\n    trie root = trie_new();\n    for (i = 0; i < sizeof(chr_legal); i++) {\n        chr_idx[(int)chr_legal[i]] = i + 1;\n        idx_chr[i + 1] = chr_legal[i];\n    }\n\n\n#define USE_ADVANCED_FILE_HANDLING 0\n#if USE_ADVANCED_FILE_HANDLING\n    void read_file(const char * fname) {\n        char cmd[1024];\n        char word[1024];\n        sprintf(cmd, \"perl -p -e 'while(/(\\\\w+)/g) {print lc($1),\\\"\\\\n\\\"}' %s\", fname);\n        FILE *in = popen(cmd, \"r\");\n        while (!feof(in)) {\n            fscanf(in, \"%1000s\", word);\n            add_index(root, word, fname);\n        }\n        pclose(in);\n    };\n\n    read_file(\"f1.txt\");\n    read_file(\"source/f2.txt\");\n    read_file(\"other_file\");\n#else\n    for (i = 0; i < 3; i++) {\n        for (j = 0; j < 5; j++) {\n            if (!text[i][j]) break;\n            add_index(root, text[i][j], files[i]);\n        }\n    }\n#endif \n\n    return root;\n}\n\nvoid search_index(trie root, const char *word)\n{\n    char path[1024];\n    printf(\"Search for \\\"%s\\\": \", word);\n    trie found = find_word(root, word);\n\n    if (!found) printf(\"not found\\n\");\n    else {\n        trie_all(found->next[FNAME], path, 0, print_path);\n        printf(\"\\n\");\n    }\n}\n\nint main()\n{\n    trie root = init_tables();\n\n    search_index(root, \"what\");\n    search_index(root, \"is\");\n    search_index(root, \"banana\");\n    search_index(root, \"boo\");\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\n$words = file(\n    'http://www.puzzlers.org/pub/wordlists/unixdict.txt',\n    FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES,\n    true // so we don't get a blank line at the end\n);\n\n\nforeach ($words as $word) {\n    preg_replace('/[^aeiou]/', '', $word) => '0'. $word;\n}\necho implode('', array_keys(array_filter($words,'strlen')));\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 299,
    "input": "Translate C to PHP:#include <stdio.h>\n\nstatic const char *dog = \"Benjamin\";\nstatic const char *Dog = \"Samba\";\nstatic const char *DOG = \"Bernie\";\n\nint main()\n{\n    printf(\"The three dogs are named %s, %s and %s.\\n\", dog, Dog, DOG);\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated PHP code.",
    "output": "<?php\n\n$dogs = array('Rover', 'Buddy', 'Max', 'Luigi\");\n$cats = array('Felix', 'Garfield\", 'Tiger\", 'Jesse\");\n\nfunction printDogCat() {\n  echo \"( Dogs: \", count($dogs), \" Cats: \", count($cats),\n   \"\\tTotal: \", count($dogs,$cats), \"\\n\");\n}\n\n\nprintDogCat();\n",
    "input_language": "C",
    "output_language": "PHP"
  },
  {
    "id": 300,
    "input": "Translate C++ to Go:#include <iostream>\n#include <vector>\n\nstd::vector<int> smallPrimes;\n\nbool is_prime(size_t test) {\n    if (test < 2) {\n        return false;\n    }\n    if (test % 2 == 0) {\n        return test == 2;\n    }\n    for (size_t d = 3; d * d <= test; d += 2) {\n        if (test % d == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid init_small_primes(size_t numPrimes) {\n    smallPrimes.push_back(2);\n\n    int count = 0;\n    for (size_t n = 3; count < numPrimes; n += 2) {\n        if (is_prime(n)) {\n            smallPrimes.push_back(n);\n            count++;\n        }\n    }\n}\n\nsize_t divisor_count(size_t n) {\n    size_t count = 1;\n    while (n % 2 == 0) {\n        n /= 2;\n        count++;\n    }\n    for (size_t d = 3; d * d <= n; d += 2) {\n        size_t q = n / d;\n        size_t r = n % d;\n        size_t dc = 0;\n        while (r == 0) {\n            dc += count;\n            n = q;\n            q = n / d;\n            r = n % d;\n        }\n        count += dc;\n    }\n    if (n != 1) {\n        count *= 2;\n    }\n    return count;\n}\n\nuint64_t OEISA073916(size_t n) {\n    if (is_prime(n)) {\n        return (uint64_t) pow(smallPrimes[n - 1], n - 1);\n    }\n\n    size_t count = 0;\n    uint64_t result = 0;\n    for (size_t i = 1; count < n; i++) {\n        if (n % 2 == 1) {\n            \n            size_t root = (size_t) sqrt(i);\n            if (root * root != i) {\n                continue;\n            }\n        }\n        if (divisor_count(i) == n) {\n            count++;\n            result = i;\n        }\n    }\n    return result;\n}\n\nint main() {\n    const int MAX = 15;\n    init_small_primes(MAX);\n    for (size_t n = 1; n <= MAX; n++) {\n        if (n == 13) {\n            std::cout << \"A073916(\" << n << \") = One more bit needed to represent result.\\n\";\n        } else {\n            std::cout << \"A073916(\" << n << \") = \" << OEISA073916(n) << '\\n';\n        }\n    }\n\n    return 0;\n}\n\nDo not return anything including notes and the like except for one translated Go code.",
    "output": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sieve(limit uint32) []bool {\n\tc := make([]bool, limit)\n\tb := c[1:]\n\n\tfor j := range b {\n\t\tif!b[j] && j%2 == 0 { \n\t\t\tfor k := j*2 + 1; k < limit; k += j {\n\t\t\t\tb[k] = true\n\t\t\t}\n\t\t}\t\n\t}\n\n\tpowerOfTwo := uint32(1)\n\tfor p := uint32(3); p*p <= powerOfTwo; p *= 4 {\n\t\tfor i := p*p; i < limit; i += p {\n\t\t\tb[i] = true\n\t\t}\n\t}\n\n\treturn b\n}\n\nvar a73 = [10]int{7, 23, 101, 523, 4049, 65537, 4294967296}\n\n\nfunc primeFactors(num uint32) [][]uint32 {\n\tvar pf [][]uint32\n\tfor x := uint32(2}; x <= num/2; x*=2{\n\t\tif!sieve(x){\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\tq := make([]uint32, len(a73))\n\t\tq[:len(pf)=nil=0)\n\t\tfor y := uint32(x)*x; y < num; y+=x{\n\t\t\tif!sieve(y){continue}\n\t\t\t\n\t\t\tj := uint32(0)\n\t\t\tfor z := y; ;z/=2;j++,z /= 2}{\n\t\t\t\t\n\t\t\t\tif z >= a73[len(q)-j]{break}}\n\t\t\n\t\t\n\t\tq = append(q,[]uint32{x})\n\t\tpf = append(pf,q...)\n\t}\n\treturn pf\n}\n\n\n\nconst description = `The A000002 characterizes all primes in [1..N]\nwhere N is odd. The first thirteen are:\n\n   1     2      7     23    101    523    4049   \n   2       3         4          5           6       \n   \n\nAll of them can be expressed as a sum of two powers:\n   11P_+1 = 2P_+k  \nfor specific values of P_+, k see later.\n\nFor example: \n\n   29 = 2² · 3¹ · 5³  \n\nFirst find all primes less or equal than 29 which gives:\np1:= 2; pp1:= []; lmt1:= 28;\nwhile ((lmt1<29) & (pp1==nil)){\n  for each : p := 3;;p1++;if p*p<=p1 then break next(p);}\npp1=(p1-1)/2; p1=p1-p1; lmt1=lmt1-1;}\n\np2:= 2; pp2:= [], llmt2:= [];\nwhile((llmt2=0) | (pp2=[])){    \n  for each : p := 3;;p1:=p1+p1;if p*p<=lmt1 then break next(p);}      \npp2=(p1-lp1)/lp1; p1=p1+p1; lmt1=lmt1-1;}\npf2:= nil; \nif #pp2 > 0 {for each : p := 3 ;;p1:=p1+p1;++p1;pf2=(#pf2:+p);}\n\nFinally print out the results with an indication whether they contain digits from 1...N inclusive:\n\n\na._primes=_primes||\"prime factors:\";\nprint sprintf(\"%12s:\",a._primes); \nfor each : f := split(pp2,\" \"); fmt.Print(sprintf(\" %-8d:\",f[0])); \nfmt.Println();\nfor each : f := split(pf2,\" \":2), m := length(f): \nprintf(\"\\t%d has prime factors:\\n\",m); \nfor each : f := split(f,\",\"): printf(\"\\t%%%02o%s\\t\",f[1]); \nfor each : f := split(f,\"\":length(f)): fmt.Printf(\"%-18s \",f[0]);\nformatting=\"\";if m>=3 formatings=%q\\n\"; \nfor each : f := split(f,,,,formattings):\n\tfmt.printf(formatnings,f[0]);\n\n\n\n\nPrinted here without any formatting except for one translated Go code.\n",
    "input_language": "C++",
    "output_language": "Go"
  }
]